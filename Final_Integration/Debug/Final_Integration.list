
Final_Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cb4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003d74  08003d74  00013d74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003e3c  08003e3c  00013e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003e44  08003e44  00013e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003e48  08003e48  00013e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000055c  20000000  08003e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000344  2000055c  080043a8  0002055c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200008a0  080043a8  000208a0  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0002055c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014545  00000000  00000000  00020584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002d46  00000000  00000000  00034ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009376  00000000  00000000  0003780f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c00  00000000  00000000  00040b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001040  00000000  00000000  00041788  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007455  00000000  00000000  000427c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003e7d  00000000  00000000  00049c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004da9a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000024a4  00000000  00000000  0004db18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000055c 	.word	0x2000055c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d5c 	.word	0x08003d5c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000560 	.word	0x20000560
 8000104:	08003d5c 	.word	0x08003d5c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	; 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	; 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__aeabi_uldivmod>:
 800041c:	2b00      	cmp	r3, #0
 800041e:	d111      	bne.n	8000444 <__aeabi_uldivmod+0x28>
 8000420:	2a00      	cmp	r2, #0
 8000422:	d10f      	bne.n	8000444 <__aeabi_uldivmod+0x28>
 8000424:	2900      	cmp	r1, #0
 8000426:	d100      	bne.n	800042a <__aeabi_uldivmod+0xe>
 8000428:	2800      	cmp	r0, #0
 800042a:	d002      	beq.n	8000432 <__aeabi_uldivmod+0x16>
 800042c:	2100      	movs	r1, #0
 800042e:	43c9      	mvns	r1, r1
 8000430:	1c08      	adds	r0, r1, #0
 8000432:	b407      	push	{r0, r1, r2}
 8000434:	4802      	ldr	r0, [pc, #8]	; (8000440 <__aeabi_uldivmod+0x24>)
 8000436:	a102      	add	r1, pc, #8	; (adr r1, 8000440 <__aeabi_uldivmod+0x24>)
 8000438:	1840      	adds	r0, r0, r1
 800043a:	9002      	str	r0, [sp, #8]
 800043c:	bd03      	pop	{r0, r1, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	ffffffd9 	.word	0xffffffd9
 8000444:	b403      	push	{r0, r1}
 8000446:	4668      	mov	r0, sp
 8000448:	b501      	push	{r0, lr}
 800044a:	9802      	ldr	r0, [sp, #8]
 800044c:	f000 f806 	bl	800045c <__udivmoddi4>
 8000450:	9b01      	ldr	r3, [sp, #4]
 8000452:	469e      	mov	lr, r3
 8000454:	b002      	add	sp, #8
 8000456:	bc0c      	pop	{r2, r3}
 8000458:	4770      	bx	lr
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__udivmoddi4>:
 800045c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045e:	4657      	mov	r7, sl
 8000460:	464e      	mov	r6, r9
 8000462:	4645      	mov	r5, r8
 8000464:	46de      	mov	lr, fp
 8000466:	b5e0      	push	{r5, r6, r7, lr}
 8000468:	0004      	movs	r4, r0
 800046a:	b083      	sub	sp, #12
 800046c:	000d      	movs	r5, r1
 800046e:	4692      	mov	sl, r2
 8000470:	4699      	mov	r9, r3
 8000472:	428b      	cmp	r3, r1
 8000474:	d82f      	bhi.n	80004d6 <__udivmoddi4+0x7a>
 8000476:	d02c      	beq.n	80004d2 <__udivmoddi4+0x76>
 8000478:	4649      	mov	r1, r9
 800047a:	4650      	mov	r0, sl
 800047c:	f000 f8ae 	bl	80005dc <__clzdi2>
 8000480:	0029      	movs	r1, r5
 8000482:	0006      	movs	r6, r0
 8000484:	0020      	movs	r0, r4
 8000486:	f000 f8a9 	bl	80005dc <__clzdi2>
 800048a:	1a33      	subs	r3, r6, r0
 800048c:	4698      	mov	r8, r3
 800048e:	3b20      	subs	r3, #32
 8000490:	469b      	mov	fp, r3
 8000492:	d500      	bpl.n	8000496 <__udivmoddi4+0x3a>
 8000494:	e074      	b.n	8000580 <__udivmoddi4+0x124>
 8000496:	4653      	mov	r3, sl
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	001f      	movs	r7, r3
 800049e:	4653      	mov	r3, sl
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	001e      	movs	r6, r3
 80004a6:	42af      	cmp	r7, r5
 80004a8:	d829      	bhi.n	80004fe <__udivmoddi4+0xa2>
 80004aa:	d026      	beq.n	80004fa <__udivmoddi4+0x9e>
 80004ac:	465b      	mov	r3, fp
 80004ae:	1ba4      	subs	r4, r4, r6
 80004b0:	41bd      	sbcs	r5, r7
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	da00      	bge.n	80004b8 <__udivmoddi4+0x5c>
 80004b6:	e079      	b.n	80005ac <__udivmoddi4+0x150>
 80004b8:	2200      	movs	r2, #0
 80004ba:	2300      	movs	r3, #0
 80004bc:	9200      	str	r2, [sp, #0]
 80004be:	9301      	str	r3, [sp, #4]
 80004c0:	2301      	movs	r3, #1
 80004c2:	465a      	mov	r2, fp
 80004c4:	4093      	lsls	r3, r2
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	2301      	movs	r3, #1
 80004ca:	4642      	mov	r2, r8
 80004cc:	4093      	lsls	r3, r2
 80004ce:	9300      	str	r3, [sp, #0]
 80004d0:	e019      	b.n	8000506 <__udivmoddi4+0xaa>
 80004d2:	4282      	cmp	r2, r0
 80004d4:	d9d0      	bls.n	8000478 <__udivmoddi4+0x1c>
 80004d6:	2200      	movs	r2, #0
 80004d8:	2300      	movs	r3, #0
 80004da:	9200      	str	r2, [sp, #0]
 80004dc:	9301      	str	r3, [sp, #4]
 80004de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <__udivmoddi4+0x8c>
 80004e4:	601c      	str	r4, [r3, #0]
 80004e6:	605d      	str	r5, [r3, #4]
 80004e8:	9800      	ldr	r0, [sp, #0]
 80004ea:	9901      	ldr	r1, [sp, #4]
 80004ec:	b003      	add	sp, #12
 80004ee:	bc3c      	pop	{r2, r3, r4, r5}
 80004f0:	4690      	mov	r8, r2
 80004f2:	4699      	mov	r9, r3
 80004f4:	46a2      	mov	sl, r4
 80004f6:	46ab      	mov	fp, r5
 80004f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004fa:	42a3      	cmp	r3, r4
 80004fc:	d9d6      	bls.n	80004ac <__udivmoddi4+0x50>
 80004fe:	2200      	movs	r2, #0
 8000500:	2300      	movs	r3, #0
 8000502:	9200      	str	r2, [sp, #0]
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	4643      	mov	r3, r8
 8000508:	2b00      	cmp	r3, #0
 800050a:	d0e8      	beq.n	80004de <__udivmoddi4+0x82>
 800050c:	07fb      	lsls	r3, r7, #31
 800050e:	0872      	lsrs	r2, r6, #1
 8000510:	431a      	orrs	r2, r3
 8000512:	4646      	mov	r6, r8
 8000514:	087b      	lsrs	r3, r7, #1
 8000516:	e00e      	b.n	8000536 <__udivmoddi4+0xda>
 8000518:	42ab      	cmp	r3, r5
 800051a:	d101      	bne.n	8000520 <__udivmoddi4+0xc4>
 800051c:	42a2      	cmp	r2, r4
 800051e:	d80c      	bhi.n	800053a <__udivmoddi4+0xde>
 8000520:	1aa4      	subs	r4, r4, r2
 8000522:	419d      	sbcs	r5, r3
 8000524:	2001      	movs	r0, #1
 8000526:	1924      	adds	r4, r4, r4
 8000528:	416d      	adcs	r5, r5
 800052a:	2100      	movs	r1, #0
 800052c:	3e01      	subs	r6, #1
 800052e:	1824      	adds	r4, r4, r0
 8000530:	414d      	adcs	r5, r1
 8000532:	2e00      	cmp	r6, #0
 8000534:	d006      	beq.n	8000544 <__udivmoddi4+0xe8>
 8000536:	42ab      	cmp	r3, r5
 8000538:	d9ee      	bls.n	8000518 <__udivmoddi4+0xbc>
 800053a:	3e01      	subs	r6, #1
 800053c:	1924      	adds	r4, r4, r4
 800053e:	416d      	adcs	r5, r5
 8000540:	2e00      	cmp	r6, #0
 8000542:	d1f8      	bne.n	8000536 <__udivmoddi4+0xda>
 8000544:	465b      	mov	r3, fp
 8000546:	9800      	ldr	r0, [sp, #0]
 8000548:	9901      	ldr	r1, [sp, #4]
 800054a:	1900      	adds	r0, r0, r4
 800054c:	4169      	adcs	r1, r5
 800054e:	2b00      	cmp	r3, #0
 8000550:	db22      	blt.n	8000598 <__udivmoddi4+0x13c>
 8000552:	002b      	movs	r3, r5
 8000554:	465a      	mov	r2, fp
 8000556:	40d3      	lsrs	r3, r2
 8000558:	002a      	movs	r2, r5
 800055a:	4644      	mov	r4, r8
 800055c:	40e2      	lsrs	r2, r4
 800055e:	001c      	movs	r4, r3
 8000560:	465b      	mov	r3, fp
 8000562:	0015      	movs	r5, r2
 8000564:	2b00      	cmp	r3, #0
 8000566:	db2c      	blt.n	80005c2 <__udivmoddi4+0x166>
 8000568:	0026      	movs	r6, r4
 800056a:	409e      	lsls	r6, r3
 800056c:	0033      	movs	r3, r6
 800056e:	0026      	movs	r6, r4
 8000570:	4647      	mov	r7, r8
 8000572:	40be      	lsls	r6, r7
 8000574:	0032      	movs	r2, r6
 8000576:	1a80      	subs	r0, r0, r2
 8000578:	4199      	sbcs	r1, r3
 800057a:	9000      	str	r0, [sp, #0]
 800057c:	9101      	str	r1, [sp, #4]
 800057e:	e7ae      	b.n	80004de <__udivmoddi4+0x82>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	4652      	mov	r2, sl
 8000588:	40da      	lsrs	r2, r3
 800058a:	4641      	mov	r1, r8
 800058c:	0013      	movs	r3, r2
 800058e:	464a      	mov	r2, r9
 8000590:	408a      	lsls	r2, r1
 8000592:	0017      	movs	r7, r2
 8000594:	431f      	orrs	r7, r3
 8000596:	e782      	b.n	800049e <__udivmoddi4+0x42>
 8000598:	4642      	mov	r2, r8
 800059a:	2320      	movs	r3, #32
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	002a      	movs	r2, r5
 80005a0:	4646      	mov	r6, r8
 80005a2:	409a      	lsls	r2, r3
 80005a4:	0023      	movs	r3, r4
 80005a6:	40f3      	lsrs	r3, r6
 80005a8:	4313      	orrs	r3, r2
 80005aa:	e7d5      	b.n	8000558 <__udivmoddi4+0xfc>
 80005ac:	4642      	mov	r2, r8
 80005ae:	2320      	movs	r3, #32
 80005b0:	2100      	movs	r1, #0
 80005b2:	1a9b      	subs	r3, r3, r2
 80005b4:	2200      	movs	r2, #0
 80005b6:	9100      	str	r1, [sp, #0]
 80005b8:	9201      	str	r2, [sp, #4]
 80005ba:	2201      	movs	r2, #1
 80005bc:	40da      	lsrs	r2, r3
 80005be:	9201      	str	r2, [sp, #4]
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x6c>
 80005c2:	4642      	mov	r2, r8
 80005c4:	2320      	movs	r3, #32
 80005c6:	0026      	movs	r6, r4
 80005c8:	1a9b      	subs	r3, r3, r2
 80005ca:	40de      	lsrs	r6, r3
 80005cc:	002f      	movs	r7, r5
 80005ce:	46b4      	mov	ip, r6
 80005d0:	4097      	lsls	r7, r2
 80005d2:	4666      	mov	r6, ip
 80005d4:	003b      	movs	r3, r7
 80005d6:	4333      	orrs	r3, r6
 80005d8:	e7c9      	b.n	800056e <__udivmoddi4+0x112>
 80005da:	46c0      	nop			; (mov r8, r8)

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	1c08      	adds	r0, r1, #0
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	; (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000630:	21fa      	movs	r1, #250	; 0xfa
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <HAL_InitTick+0x2c>)
{
 8000634:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000636:	0089      	lsls	r1, r1, #2
{
 8000638:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800063a:	6818      	ldr	r0, [r3, #0]
 800063c:	f7ff fd78 	bl	8000130 <__udivsi3>
 8000640:	f000 f87a 	bl	8000738 <HAL_SYSTICK_Config>
 8000644:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8000646:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000648:	2c00      	cmp	r4, #0
 800064a:	d105      	bne.n	8000658 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 800064c:	3802      	subs	r0, #2
 800064e:	0022      	movs	r2, r4
 8000650:	0029      	movs	r1, r5
 8000652:	f000 f837 	bl	80006c4 <HAL_NVIC_SetPriority>
 8000656:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8000658:	bd70      	pop	{r4, r5, r6, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	20000558 	.word	0x20000558

08000660 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000660:	2340      	movs	r3, #64	; 0x40
 8000662:	4a08      	ldr	r2, [pc, #32]	; (8000684 <HAL_Init+0x24>)
{
 8000664:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000666:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000668:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800066a:	430b      	orrs	r3, r1
 800066c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800066e:	f7ff ffdf 	bl	8000630 <HAL_InitTick>
 8000672:	1e04      	subs	r4, r0, #0
 8000674:	d103      	bne.n	800067e <HAL_Init+0x1e>
    HAL_MspInit();
 8000676:	f003 f9d1 	bl	8003a1c <HAL_MspInit>
}
 800067a:	0020      	movs	r0, r4
 800067c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800067e:	2401      	movs	r4, #1
 8000680:	e7fb      	b.n	800067a <HAL_Init+0x1a>
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	40022000 	.word	0x40022000

08000688 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000688:	4a02      	ldr	r2, [pc, #8]	; (8000694 <HAL_IncTick+0xc>)
 800068a:	6813      	ldr	r3, [r2, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	6013      	str	r3, [r2, #0]
}
 8000690:	4770      	bx	lr
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	20000618 	.word	0x20000618

08000698 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000698:	4b01      	ldr	r3, [pc, #4]	; (80006a0 <HAL_GetTick+0x8>)
 800069a:	6818      	ldr	r0, [r3, #0]
}
 800069c:	4770      	bx	lr
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	20000618 	.word	0x20000618

080006a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a4:	b570      	push	{r4, r5, r6, lr}
 80006a6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006a8:	f7ff fff6 	bl	8000698 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 80006ac:	1c63      	adds	r3, r4, #1
 80006ae:	1e5a      	subs	r2, r3, #1
 80006b0:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 80006b2:	0005      	movs	r5, r0
    wait++;
 80006b4:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006b6:	f7ff ffef 	bl	8000698 <HAL_GetTick>
 80006ba:	1b40      	subs	r0, r0, r5
 80006bc:	4284      	cmp	r4, r0
 80006be:	d8fa      	bhi.n	80006b6 <HAL_Delay+0x12>
  {
  }
}
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080006c4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006c4:	b570      	push	{r4, r5, r6, lr}
 80006c6:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80006c8:	2800      	cmp	r0, #0
 80006ca:	da14      	bge.n	80006f6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006cc:	230f      	movs	r3, #15
 80006ce:	b2c0      	uxtb	r0, r0
 80006d0:	4003      	ands	r3, r0
 80006d2:	3b08      	subs	r3, #8
 80006d4:	4a11      	ldr	r2, [pc, #68]	; (800071c <HAL_NVIC_SetPriority+0x58>)
 80006d6:	089b      	lsrs	r3, r3, #2
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	189b      	adds	r3, r3, r2
 80006dc:	2203      	movs	r2, #3
 80006de:	4010      	ands	r0, r2
 80006e0:	4090      	lsls	r0, r2
 80006e2:	32fc      	adds	r2, #252	; 0xfc
 80006e4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006e6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006e8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006ea:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006ec:	69dc      	ldr	r4, [r3, #28]
 80006ee:	43ac      	bics	r4, r5
 80006f0:	4321      	orrs	r1, r4
 80006f2:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006f6:	2503      	movs	r5, #3
 80006f8:	0883      	lsrs	r3, r0, #2
 80006fa:	4028      	ands	r0, r5
 80006fc:	40a8      	lsls	r0, r5
 80006fe:	35fc      	adds	r5, #252	; 0xfc
 8000700:	002e      	movs	r6, r5
 8000702:	4a07      	ldr	r2, [pc, #28]	; (8000720 <HAL_NVIC_SetPriority+0x5c>)
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	189b      	adds	r3, r3, r2
 8000708:	22c0      	movs	r2, #192	; 0xc0
 800070a:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800070c:	4029      	ands	r1, r5
 800070e:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000710:	0092      	lsls	r2, r2, #2
 8000712:	589c      	ldr	r4, [r3, r2]
 8000714:	43b4      	bics	r4, r6
 8000716:	4321      	orrs	r1, r4
 8000718:	5099      	str	r1, [r3, r2]
 800071a:	e7eb      	b.n	80006f4 <HAL_NVIC_SetPriority+0x30>
 800071c:	e000ed00 	.word	0xe000ed00
 8000720:	e000e100 	.word	0xe000e100

08000724 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000724:	231f      	movs	r3, #31
 8000726:	4018      	ands	r0, r3
 8000728:	3b1e      	subs	r3, #30
 800072a:	4083      	lsls	r3, r0
 800072c:	4a01      	ldr	r2, [pc, #4]	; (8000734 <HAL_NVIC_EnableIRQ+0x10>)
 800072e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000730:	4770      	bx	lr
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	e000e100 	.word	0xe000e100

08000738 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000738:	4a09      	ldr	r2, [pc, #36]	; (8000760 <HAL_SYSTICK_Config+0x28>)
 800073a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 800073c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800073e:	4293      	cmp	r3, r2
 8000740:	d80d      	bhi.n	800075e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000742:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000744:	4a07      	ldr	r2, [pc, #28]	; (8000764 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000746:	4808      	ldr	r0, [pc, #32]	; (8000768 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000748:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800074a:	6a03      	ldr	r3, [r0, #32]
 800074c:	0609      	lsls	r1, r1, #24
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	430b      	orrs	r3, r1
 8000754:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000756:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000758:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800075a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800075e:	4770      	bx	lr
 8000760:	00ffffff 	.word	0x00ffffff
 8000764:	e000e010 	.word	0xe000e010
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800076c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800076e:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8000770:	2001      	movs	r0, #1
  if(hdma == NULL)
 8000772:	2c00      	cmp	r4, #0
 8000774:	d035      	beq.n	80007e2 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000776:	6825      	ldr	r5, [r4, #0]
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <HAL_DMA_Init+0x78>)
 800077a:	2114      	movs	r1, #20
 800077c:	18e8      	adds	r0, r5, r3
 800077e:	f7ff fcd7 	bl	8000130 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000784:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8000786:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000788:	2302      	movs	r3, #2
 800078a:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800078c:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 800078e:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000790:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000794:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000796:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8000798:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800079a:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 800079c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800079e:	433b      	orrs	r3, r7
 80007a0:	6967      	ldr	r7, [r4, #20]
 80007a2:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007a4:	69a7      	ldr	r7, [r4, #24]
 80007a6:	433b      	orrs	r3, r7
 80007a8:	69e7      	ldr	r7, [r4, #28]
 80007aa:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80007ac:	6a27      	ldr	r7, [r4, #32]
 80007ae:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 80007b0:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80007b2:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	01db      	lsls	r3, r3, #7
 80007b8:	4299      	cmp	r1, r3
 80007ba:	d00c      	beq.n	80007d6 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80007bc:	251c      	movs	r5, #28
 80007be:	4028      	ands	r0, r5
 80007c0:	3d0d      	subs	r5, #13
 80007c2:	4085      	lsls	r5, r0
 80007c4:	490a      	ldr	r1, [pc, #40]	; (80007f0 <HAL_DMA_Init+0x84>)
 80007c6:	680b      	ldr	r3, [r1, #0]
 80007c8:	43ab      	bics	r3, r5
 80007ca:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80007cc:	6863      	ldr	r3, [r4, #4]
 80007ce:	680d      	ldr	r5, [r1, #0]
 80007d0:	4083      	lsls	r3, r0
 80007d2:	432b      	orrs	r3, r5
 80007d4:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007d6:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80007d8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007da:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80007dc:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 80007de:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 80007e0:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 80007e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007e4:	bffdfff8 	.word	0xbffdfff8
 80007e8:	40020000 	.word	0x40020000
 80007ec:	ffff800f 	.word	0xffff800f
 80007f0:	400200a8 	.word	0x400200a8

080007f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80007f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80007f6:	1d46      	adds	r6, r0, #5
 80007f8:	7ff5      	ldrb	r5, [r6, #31]
 80007fa:	2402      	movs	r4, #2
 80007fc:	2d01      	cmp	r5, #1
 80007fe:	d02a      	beq.n	8000856 <HAL_DMA_Start_IT+0x62>
 8000800:	2501      	movs	r5, #1
 8000802:	77f5      	strb	r5, [r6, #31]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000804:	1d85      	adds	r5, r0, #6
 8000806:	46ac      	mov	ip, r5
 8000808:	7fed      	ldrb	r5, [r5, #31]
 800080a:	2700      	movs	r7, #0
 800080c:	b2ed      	uxtb	r5, r5
 800080e:	2d01      	cmp	r5, #1
 8000810:	d12d      	bne.n	800086e <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000812:	4666      	mov	r6, ip
 8000814:	77f4      	strb	r4, [r6, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000816:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000818:	63c7      	str	r7, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800081a:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800081c:	371c      	adds	r7, #28
    __HAL_DMA_DISABLE(hdma);
 800081e:	43ae      	bics	r6, r5
 8000820:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000822:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000824:	9601      	str	r6, [sp, #4]
 8000826:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8000828:	4037      	ands	r7, r6
 800082a:	40bd      	lsls	r5, r7
 800082c:	9e01      	ldr	r6, [sp, #4]
 800082e:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000830:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000832:	6883      	ldr	r3, [r0, #8]
 8000834:	6805      	ldr	r5, [r0, #0]
 8000836:	2b10      	cmp	r3, #16
 8000838:	d10f      	bne.n	800085a <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800083a:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800083c:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800083e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000840:	2b00      	cmp	r3, #0
 8000842:	d00d      	beq.n	8000860 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000844:	230e      	movs	r3, #14
 8000846:	6822      	ldr	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000848:	4313      	orrs	r3, r2
 800084a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800084c:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 800084e:	2400      	movs	r4, #0
    __HAL_DMA_ENABLE(hdma);
 8000850:	682a      	ldr	r2, [r5, #0]
 8000852:	4313      	orrs	r3, r2
 8000854:	602b      	str	r3, [r5, #0]
}
 8000856:	0020      	movs	r0, r4
 8000858:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800085a:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800085c:	60e2      	str	r2, [r4, #12]
 800085e:	e7ee      	b.n	800083e <HAL_DMA_Start_IT+0x4a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000860:	2204      	movs	r2, #4
 8000862:	6823      	ldr	r3, [r4, #0]
 8000864:	4393      	bics	r3, r2
 8000866:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000868:	6822      	ldr	r2, [r4, #0]
 800086a:	230a      	movs	r3, #10
 800086c:	e7ec      	b.n	8000848 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma);
 800086e:	77f7      	strb	r7, [r6, #31]
 8000870:	e7f1      	b.n	8000856 <HAL_DMA_Start_IT+0x62>

08000872 <HAL_DMA_Abort_IT>:
{
 8000872:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000874:	1d84      	adds	r4, r0, #6
 8000876:	7fe3      	ldrb	r3, [r4, #31]
 8000878:	2b02      	cmp	r3, #2
 800087a:	d004      	beq.n	8000886 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800087c:	2304      	movs	r3, #4
 800087e:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8000880:	3b03      	subs	r3, #3
}
 8000882:	0018      	movs	r0, r3
 8000884:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000886:	210e      	movs	r1, #14
 8000888:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800088a:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	438a      	bics	r2, r1
 8000890:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000892:	2201      	movs	r2, #1
 8000894:	6819      	ldr	r1, [r3, #0]
 8000896:	4391      	bics	r1, r2
 8000898:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800089a:	231c      	movs	r3, #28
 800089c:	402b      	ands	r3, r5
 800089e:	0015      	movs	r5, r2
 80008a0:	409d      	lsls	r5, r3
 80008a2:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 80008a4:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80008a6:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80008a8:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80008aa:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 80008ac:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80008ae:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 80008b0:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 80008b2:	42a2      	cmp	r2, r4
 80008b4:	d0e5      	beq.n	8000882 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80008b6:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80008b8:	0023      	movs	r3, r4
 80008ba:	e7e2      	b.n	8000882 <HAL_DMA_Abort_IT+0x10>

080008bc <HAL_DMA_IRQHandler>:
{
 80008bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80008be:	221c      	movs	r2, #28
 80008c0:	2704      	movs	r7, #4
 80008c2:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80008c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80008c6:	4032      	ands	r2, r6
 80008c8:	003e      	movs	r6, r7
 80008ca:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80008cc:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80008ce:	6803      	ldr	r3, [r0, #0]
 80008d0:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80008d2:	422e      	tst	r6, r5
 80008d4:	d00d      	beq.n	80008f2 <HAL_DMA_IRQHandler+0x36>
 80008d6:	423c      	tst	r4, r7
 80008d8:	d00b      	beq.n	80008f2 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	0692      	lsls	r2, r2, #26
 80008de:	d402      	bmi.n	80008e6 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	43ba      	bics	r2, r7
 80008e4:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 80008e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80008e8:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d019      	beq.n	8000922 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 80008ee:	4798      	blx	r3
  return;
 80008f0:	e017      	b.n	8000922 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80008f2:	2702      	movs	r7, #2
 80008f4:	003e      	movs	r6, r7
 80008f6:	4096      	lsls	r6, r2
 80008f8:	422e      	tst	r6, r5
 80008fa:	d013      	beq.n	8000924 <HAL_DMA_IRQHandler+0x68>
 80008fc:	423c      	tst	r4, r7
 80008fe:	d011      	beq.n	8000924 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	0692      	lsls	r2, r2, #26
 8000904:	d406      	bmi.n	8000914 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000906:	240a      	movs	r4, #10
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	43a2      	bics	r2, r4
 800090c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800090e:	2201      	movs	r2, #1
 8000910:	1d83      	adds	r3, r0, #6
 8000912:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8000914:	2200      	movs	r2, #0
 8000916:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000918:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 800091a:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 800091c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800091e:	4293      	cmp	r3, r2
 8000920:	d1e5      	bne.n	80008ee <HAL_DMA_IRQHandler+0x32>
}
 8000922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000924:	2608      	movs	r6, #8
 8000926:	0037      	movs	r7, r6
 8000928:	4097      	lsls	r7, r2
 800092a:	423d      	tst	r5, r7
 800092c:	d0f9      	beq.n	8000922 <HAL_DMA_IRQHandler+0x66>
 800092e:	4234      	tst	r4, r6
 8000930:	d0f7      	beq.n	8000922 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000932:	250e      	movs	r5, #14
 8000934:	681c      	ldr	r4, [r3, #0]
 8000936:	43ac      	bics	r4, r5
 8000938:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800093a:	2301      	movs	r3, #1
 800093c:	001c      	movs	r4, r3
 800093e:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8000940:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000942:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000944:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8000946:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8000948:	2200      	movs	r2, #0
 800094a:	1d43      	adds	r3, r0, #5
 800094c:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 800094e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000950:	e7e5      	b.n	800091e <HAL_DMA_IRQHandler+0x62>
	...

08000954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000954:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000956:	4a53      	ldr	r2, [pc, #332]	; (8000aa4 <HAL_GPIO_Init+0x150>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000958:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800095a:	1882      	adds	r2, r0, r2
 800095c:	1e54      	subs	r4, r2, #1
 800095e:	41a2      	sbcs	r2, r4
{
 8000960:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8000962:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8000964:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000966:	3205      	adds	r2, #5
 8000968:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 800096a:	9a01      	ldr	r2, [sp, #4]
 800096c:	40da      	lsrs	r2, r3
 800096e:	d101      	bne.n	8000974 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000970:	b005      	add	sp, #20
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000974:	2501      	movs	r5, #1
 8000976:	409d      	lsls	r5, r3
 8000978:	9a01      	ldr	r2, [sp, #4]
 800097a:	402a      	ands	r2, r5
 800097c:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 800097e:	d100      	bne.n	8000982 <HAL_GPIO_Init+0x2e>
 8000980:	e08d      	b.n	8000a9e <HAL_GPIO_Init+0x14a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000982:	684a      	ldr	r2, [r1, #4]
 8000984:	4694      	mov	ip, r2
 8000986:	2210      	movs	r2, #16
 8000988:	4664      	mov	r4, ip
 800098a:	4394      	bics	r4, r2
 800098c:	0022      	movs	r2, r4
 800098e:	3c01      	subs	r4, #1
 8000990:	2a02      	cmp	r2, #2
 8000992:	d11f      	bne.n	80009d4 <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000994:	2407      	movs	r4, #7
 8000996:	270f      	movs	r7, #15
 8000998:	401c      	ands	r4, r3
 800099a:	00a4      	lsls	r4, r4, #2
 800099c:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 800099e:	08da      	lsrs	r2, r3, #3
 80009a0:	0092      	lsls	r2, r2, #2
 80009a2:	1882      	adds	r2, r0, r2
 80009a4:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80009a6:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80009a8:	690f      	ldr	r7, [r1, #16]
 80009aa:	40a7      	lsls	r7, r4
 80009ac:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80009ae:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80009b0:	2403      	movs	r4, #3
 80009b2:	005e      	lsls	r6, r3, #1
 80009b4:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 80009b6:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80009b8:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009ba:	68cc      	ldr	r4, [r1, #12]
 80009bc:	40b4      	lsls	r4, r6
 80009be:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 80009c0:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009c2:	4662      	mov	r2, ip
 80009c4:	06d2      	lsls	r2, r2, #27
 80009c6:	0fd2      	lsrs	r2, r2, #31
 80009c8:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 80009ca:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009cc:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009ce:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80009d0:	6042      	str	r2, [r0, #4]
 80009d2:	e001      	b.n	80009d8 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d4:	2c01      	cmp	r4, #1
 80009d6:	d9eb      	bls.n	80009b0 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80009d8:	2603      	movs	r6, #3
 80009da:	0034      	movs	r4, r6
 80009dc:	005d      	lsls	r5, r3, #1
 80009de:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009e0:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80009e2:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009e4:	4032      	ands	r2, r6
 80009e6:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 80009e8:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80009ea:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009ec:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 80009ee:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 80009f0:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009f2:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80009f4:	688a      	ldr	r2, [r1, #8]
 80009f6:	40aa      	lsls	r2, r5
 80009f8:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80009fa:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 80009fc:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80009fe:	00d2      	lsls	r2, r2, #3
 8000a00:	d54d      	bpl.n	8000a9e <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2501      	movs	r5, #1
 8000a04:	4c28      	ldr	r4, [pc, #160]	; (8000aa8 <HAL_GPIO_Init+0x154>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000a06:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a08:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000a0a:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000a0c:	001d      	movs	r5, r3
 8000a0e:	4035      	ands	r5, r6
 8000a10:	00ad      	lsls	r5, r5, #2
 8000a12:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a14:	6362      	str	r2, [r4, #52]	; 0x34
 8000a16:	4a25      	ldr	r2, [pc, #148]	; (8000aac <HAL_GPIO_Init+0x158>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000a18:	089c      	lsrs	r4, r3, #2
 8000a1a:	00a4      	lsls	r4, r4, #2
 8000a1c:	18a4      	adds	r4, r4, r2
 8000a1e:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000a20:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000a22:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000a24:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000a26:	05ff      	lsls	r7, r7, #23
 8000a28:	2200      	movs	r2, #0
 8000a2a:	42b8      	cmp	r0, r7
 8000a2c:	d00c      	beq.n	8000a48 <HAL_GPIO_Init+0xf4>
 8000a2e:	4f20      	ldr	r7, [pc, #128]	; (8000ab0 <HAL_GPIO_Init+0x15c>)
 8000a30:	3201      	adds	r2, #1
 8000a32:	42b8      	cmp	r0, r7
 8000a34:	d008      	beq.n	8000a48 <HAL_GPIO_Init+0xf4>
 8000a36:	4f1f      	ldr	r7, [pc, #124]	; (8000ab4 <HAL_GPIO_Init+0x160>)
 8000a38:	3201      	adds	r2, #1
 8000a3a:	42b8      	cmp	r0, r7
 8000a3c:	d004      	beq.n	8000a48 <HAL_GPIO_Init+0xf4>
 8000a3e:	4f1e      	ldr	r7, [pc, #120]	; (8000ab8 <HAL_GPIO_Init+0x164>)
 8000a40:	0032      	movs	r2, r6
 8000a42:	42b8      	cmp	r0, r7
 8000a44:	d000      	beq.n	8000a48 <HAL_GPIO_Init+0xf4>
 8000a46:	9a03      	ldr	r2, [sp, #12]
 8000a48:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a4a:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000a4c:	9d02      	ldr	r5, [sp, #8]
 8000a4e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a50:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000a52:	4a1a      	ldr	r2, [pc, #104]	; (8000abc <HAL_GPIO_Init+0x168>)
        temp &= ~((uint32_t)iocurrent);
 8000a54:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8000a56:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000a58:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a5a:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000a5c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a5e:	03ff      	lsls	r7, r7, #15
 8000a60:	d401      	bmi.n	8000a66 <HAL_GPIO_Init+0x112>
        temp &= ~((uint32_t)iocurrent);
 8000a62:	0035      	movs	r5, r6
 8000a64:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a66:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8000a68:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000a6a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000a6c:	9d00      	ldr	r5, [sp, #0]
 8000a6e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a70:	03bf      	lsls	r7, r7, #14
 8000a72:	d401      	bmi.n	8000a78 <HAL_GPIO_Init+0x124>
        temp &= ~((uint32_t)iocurrent);
 8000a74:	0035      	movs	r5, r6
 8000a76:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a78:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000a7a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000a7c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000a7e:	9d00      	ldr	r5, [sp, #0]
 8000a80:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a82:	02ff      	lsls	r7, r7, #11
 8000a84:	d401      	bmi.n	8000a8a <HAL_GPIO_Init+0x136>
        temp &= ~((uint32_t)iocurrent);
 8000a86:	0035      	movs	r5, r6
 8000a88:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a8a:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000a8c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000a8e:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000a90:	9e00      	ldr	r6, [sp, #0]
 8000a92:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a94:	02bf      	lsls	r7, r7, #10
 8000a96:	d401      	bmi.n	8000a9c <HAL_GPIO_Init+0x148>
        temp &= ~((uint32_t)iocurrent);
 8000a98:	4025      	ands	r5, r4
 8000a9a:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000a9c:	60d6      	str	r6, [r2, #12]
    position++;
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	e763      	b.n	800096a <HAL_GPIO_Init+0x16>
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	afffe400 	.word	0xafffe400
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010000 	.word	0x40010000
 8000ab0:	50000400 	.word	0x50000400
 8000ab4:	50000800 	.word	0x50000800
 8000ab8:	50000c00 	.word	0x50000c00
 8000abc:	40010400 	.word	0x40010400

08000ac0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	d001      	beq.n	8000ac8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ac4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000ac6:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000ac8:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000aca:	e7fc      	b.n	8000ac6 <HAL_GPIO_WritePin+0x6>

08000acc <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8000ace:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000ad0:	695a      	ldr	r2, [r3, #20]
 8000ad2:	4210      	tst	r0, r2
 8000ad4:	d002      	beq.n	8000adc <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ad6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ad8:	f002 fcf8 	bl	80034cc <HAL_GPIO_EXTI_Callback>
  }
}
 8000adc:	bd10      	pop	{r4, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	40010400 	.word	0x40010400

08000ae4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000ae4:	6803      	ldr	r3, [r0, #0]
 8000ae6:	699a      	ldr	r2, [r3, #24]
 8000ae8:	0792      	lsls	r2, r2, #30
 8000aea:	d501      	bpl.n	8000af0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000aec:	2200      	movs	r2, #0
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000af0:	2201      	movs	r2, #1
 8000af2:	6999      	ldr	r1, [r3, #24]
 8000af4:	4211      	tst	r1, r2
 8000af6:	d102      	bne.n	8000afe <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000af8:	6999      	ldr	r1, [r3, #24]
 8000afa:	430a      	orrs	r2, r1
 8000afc:	619a      	str	r2, [r3, #24]
  }
}
 8000afe:	4770      	bx	lr

08000b00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000b00:	b570      	push	{r4, r5, r6, lr}
 8000b02:	9e04      	ldr	r6, [sp, #16]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000b04:	0589      	lsls	r1, r1, #22
 8000b06:	4333      	orrs	r3, r6
 8000b08:	0d89      	lsrs	r1, r1, #22
 8000b0a:	4319      	orrs	r1, r3
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	6804      	ldr	r4, [r0, #0]
 8000b10:	00db      	lsls	r3, r3, #3
 8000b12:	0d70      	lsrs	r0, r6, #21
 8000b14:	4018      	ands	r0, r3
 8000b16:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <I2C_TransferConfig+0x28>)
 8000b18:	6865      	ldr	r5, [r4, #4]
 8000b1a:	0412      	lsls	r2, r2, #16
 8000b1c:	4318      	orrs	r0, r3
 8000b1e:	4385      	bics	r5, r0
 8000b20:	4311      	orrs	r1, r2
 8000b22:	4329      	orrs	r1, r5
 8000b24:	6061      	str	r1, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8000b26:	bd70      	pop	{r4, r5, r6, pc}
 8000b28:	03ff63ff 	.word	0x03ff63ff

08000b2c <I2C_WaitOnFlagUntilTimeout>:
{
 8000b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b2e:	0004      	movs	r4, r0
 8000b30:	000e      	movs	r6, r1
 8000b32:	0017      	movs	r7, r2
 8000b34:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000b36:	6822      	ldr	r2, [r4, #0]
 8000b38:	6993      	ldr	r3, [r2, #24]
 8000b3a:	4033      	ands	r3, r6
 8000b3c:	1b9b      	subs	r3, r3, r6
 8000b3e:	4259      	negs	r1, r3
 8000b40:	414b      	adcs	r3, r1
 8000b42:	42bb      	cmp	r3, r7
 8000b44:	d001      	beq.n	8000b4a <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8000b46:	2000      	movs	r0, #0
 8000b48:	e017      	b.n	8000b7a <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8000b4a:	1c6b      	adds	r3, r5, #1
 8000b4c:	d0f4      	beq.n	8000b38 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000b4e:	f7ff fda3 	bl	8000698 <HAL_GetTick>
 8000b52:	9b06      	ldr	r3, [sp, #24]
 8000b54:	1ac0      	subs	r0, r0, r3
 8000b56:	4285      	cmp	r5, r0
 8000b58:	d301      	bcc.n	8000b5e <I2C_WaitOnFlagUntilTimeout+0x32>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d1eb      	bne.n	8000b36 <I2C_WaitOnFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000b5e:	2220      	movs	r2, #32
 8000b60:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000b62:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000b64:	4313      	orrs	r3, r2
 8000b66:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000b68:	0023      	movs	r3, r4
 8000b6a:	3341      	adds	r3, #65	; 0x41
 8000b6c:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b6e:	0022      	movs	r2, r4
 8000b70:	2300      	movs	r3, #0
 8000b72:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000b74:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b76:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000b78:	7023      	strb	r3, [r4, #0]
}
 8000b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000b7c <I2C_IsAcknowledgeFailed>:
{
 8000b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000b7e:	6803      	ldr	r3, [r0, #0]
{
 8000b80:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000b82:	6998      	ldr	r0, [r3, #24]
 8000b84:	2310      	movs	r3, #16
{
 8000b86:	000e      	movs	r6, r1
 8000b88:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000b8a:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000b8c:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	d118      	bne.n	8000bc4 <I2C_IsAcknowledgeFailed+0x48>
}
 8000b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000b94:	1c72      	adds	r2, r6, #1
 8000b96:	d016      	beq.n	8000bc6 <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000b98:	f7ff fd7e 	bl	8000698 <HAL_GetTick>
 8000b9c:	1bc0      	subs	r0, r0, r7
 8000b9e:	4286      	cmp	r6, r0
 8000ba0:	d301      	bcc.n	8000ba6 <I2C_IsAcknowledgeFailed+0x2a>
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d10e      	bne.n	8000bc4 <I2C_IsAcknowledgeFailed+0x48>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ba6:	2220      	movs	r2, #32
 8000ba8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000baa:	4313      	orrs	r3, r2
 8000bac:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000bae:	0023      	movs	r3, r4
 8000bb0:	3341      	adds	r3, #65	; 0x41
 8000bb2:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bb4:	0022      	movs	r2, r4
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8000bba:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bbc:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 8000bbe:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 8000bc0:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8000bc2:	e7e6      	b.n	8000b92 <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000bc4:	6823      	ldr	r3, [r4, #0]
 8000bc6:	699a      	ldr	r2, [r3, #24]
 8000bc8:	422a      	tst	r2, r5
 8000bca:	d0e3      	beq.n	8000b94 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000bcc:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 8000bce:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000bd0:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000bd2:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000bd4:	f7ff ff86 	bl	8000ae4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000bd8:	6822      	ldr	r2, [r4, #0]
 8000bda:	4906      	ldr	r1, [pc, #24]	; (8000bf4 <I2C_IsAcknowledgeFailed+0x78>)
 8000bdc:	6853      	ldr	r3, [r2, #4]
 8000bde:	400b      	ands	r3, r1
 8000be0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000be2:	2304      	movs	r3, #4
 8000be4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000be6:	4313      	orrs	r3, r2
 8000be8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000bea:	0023      	movs	r3, r4
 8000bec:	3341      	adds	r3, #65	; 0x41
 8000bee:	701d      	strb	r5, [r3, #0]
 8000bf0:	e7e0      	b.n	8000bb4 <I2C_IsAcknowledgeFailed+0x38>
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	fe00e800 	.word	0xfe00e800

08000bf8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfa:	0004      	movs	r4, r0
 8000bfc:	000d      	movs	r5, r1
 8000bfe:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000c00:	2702      	movs	r7, #2
 8000c02:	6823      	ldr	r3, [r4, #0]
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	423b      	tst	r3, r7
 8000c08:	d001      	beq.n	8000c0e <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8000c0a:	2000      	movs	r0, #0
}
 8000c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c0e:	0032      	movs	r2, r6
 8000c10:	0029      	movs	r1, r5
 8000c12:	0020      	movs	r0, r4
 8000c14:	f7ff ffb2 	bl	8000b7c <I2C_IsAcknowledgeFailed>
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d115      	bne.n	8000c48 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000c1c:	1c6b      	adds	r3, r5, #1
 8000c1e:	d0f0      	beq.n	8000c02 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c20:	f7ff fd3a 	bl	8000698 <HAL_GetTick>
 8000c24:	1b80      	subs	r0, r0, r6
 8000c26:	4285      	cmp	r5, r0
 8000c28:	d301      	bcc.n	8000c2e <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	d1e9      	bne.n	8000c02 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c2e:	2220      	movs	r2, #32
 8000c30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c32:	4313      	orrs	r3, r2
 8000c34:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000c36:	0023      	movs	r3, r4
 8000c38:	3341      	adds	r3, #65	; 0x41
 8000c3a:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c3c:	0022      	movs	r2, r4
 8000c3e:	2300      	movs	r3, #0
 8000c40:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000c42:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c44:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000c46:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8000c48:	2001      	movs	r0, #1
 8000c4a:	e7df      	b.n	8000c0c <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08000c4c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c4e:	0004      	movs	r4, r0
 8000c50:	000d      	movs	r5, r1
 8000c52:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000c54:	2720      	movs	r7, #32
 8000c56:	6823      	ldr	r3, [r4, #0]
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	423b      	tst	r3, r7
 8000c5c:	d001      	beq.n	8000c62 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8000c5e:	2000      	movs	r0, #0
}
 8000c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c62:	0032      	movs	r2, r6
 8000c64:	0029      	movs	r1, r5
 8000c66:	0020      	movs	r0, r4
 8000c68:	f7ff ff88 	bl	8000b7c <I2C_IsAcknowledgeFailed>
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	d113      	bne.n	8000c98 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c70:	f7ff fd12 	bl	8000698 <HAL_GetTick>
 8000c74:	1b80      	subs	r0, r0, r6
 8000c76:	4285      	cmp	r5, r0
 8000c78:	d301      	bcc.n	8000c7e <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d1eb      	bne.n	8000c56 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c7e:	2220      	movs	r2, #32
 8000c80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c82:	4313      	orrs	r3, r2
 8000c84:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000c86:	0023      	movs	r3, r4
 8000c88:	3341      	adds	r3, #65	; 0x41
 8000c8a:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c8c:	0022      	movs	r2, r4
 8000c8e:	2300      	movs	r3, #0
 8000c90:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000c92:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c94:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000c96:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8000c98:	2001      	movs	r0, #1
 8000c9a:	e7e1      	b.n	8000c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08000c9c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9e:	0004      	movs	r4, r0
 8000ca0:	000d      	movs	r5, r1
 8000ca2:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000ca4:	2604      	movs	r6, #4
 8000ca6:	6823      	ldr	r3, [r4, #0]
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	4233      	tst	r3, r6
 8000cac:	d111      	bne.n	8000cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000cae:	003a      	movs	r2, r7
 8000cb0:	0029      	movs	r1, r5
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	f7ff ff62 	bl	8000b7c <I2C_IsAcknowledgeFailed>
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	d11a      	bne.n	8000cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000cbc:	2120      	movs	r1, #32
 8000cbe:	6823      	ldr	r3, [r4, #0]
 8000cc0:	699a      	ldr	r2, [r3, #24]
 8000cc2:	420a      	tst	r2, r1
 8000cc4:	d017      	beq.n	8000cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8000cc6:	699a      	ldr	r2, [r3, #24]
 8000cc8:	4232      	tst	r2, r6
 8000cca:	d004      	beq.n	8000cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8000ccc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000cce:	2a00      	cmp	r2, #0
 8000cd0:	d001      	beq.n	8000cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 8000cd2:	2000      	movs	r0, #0
}
 8000cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cd6:	2120      	movs	r1, #32
 8000cd8:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	480e      	ldr	r0, [pc, #56]	; (8000d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 8000cde:	4002      	ands	r2, r0
 8000ce0:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8000ce2:	0022      	movs	r2, r4
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ce4:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8000ce6:	3241      	adds	r2, #65	; 0x41
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ce8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000cea:	7011      	strb	r1, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8000cec:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cee:	7053      	strb	r3, [r2, #1]
      __HAL_UNLOCK(hi2c);
 8000cf0:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	e7ee      	b.n	8000cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000cf6:	f7ff fccf 	bl	8000698 <HAL_GetTick>
 8000cfa:	1bc0      	subs	r0, r0, r7
 8000cfc:	4285      	cmp	r5, r0
 8000cfe:	d301      	bcc.n	8000d04 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 8000d00:	2d00      	cmp	r5, #0
 8000d02:	d1d0      	bne.n	8000ca6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d04:	2220      	movs	r2, #32
 8000d06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000d0c:	0023      	movs	r3, r4
 8000d0e:	3341      	adds	r3, #65	; 0x41
 8000d10:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 8000d12:	3440      	adds	r4, #64	; 0x40
 8000d14:	2300      	movs	r3, #0
 8000d16:	e7eb      	b.n	8000cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8000d18:	fe00e800 	.word	0xfe00e800

08000d1c <HAL_I2C_Init>:
{
 8000d1c:	b570      	push	{r4, r5, r6, lr}
 8000d1e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000d20:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8000d22:	2c00      	cmp	r4, #0
 8000d24:	d03f      	beq.n	8000da6 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d26:	0025      	movs	r5, r4
 8000d28:	3541      	adds	r5, #65	; 0x41
 8000d2a:	782b      	ldrb	r3, [r5, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d105      	bne.n	8000d3e <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8000d32:	0022      	movs	r2, r4
 8000d34:	3240      	adds	r2, #64	; 0x40
 8000d36:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8000d38:	0020      	movs	r0, r4
 8000d3a:	f002 fe7d 	bl	8003a38 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d3e:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000d40:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d42:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8000d44:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d46:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	68a6      	ldr	r6, [r4, #8]
 8000d4c:	438a      	bics	r2, r1
 8000d4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d50:	6861      	ldr	r1, [r4, #4]
 8000d52:	4a1a      	ldr	r2, [pc, #104]	; (8000dbc <HAL_I2C_Init+0xa0>)
 8000d54:	400a      	ands	r2, r1
 8000d56:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d58:	6899      	ldr	r1, [r3, #8]
 8000d5a:	4a19      	ldr	r2, [pc, #100]	; (8000dc0 <HAL_I2C_Init+0xa4>)
 8000d5c:	4011      	ands	r1, r2
 8000d5e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d60:	2801      	cmp	r0, #1
 8000d62:	d121      	bne.n	8000da8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d64:	2180      	movs	r1, #128	; 0x80
 8000d66:	0209      	lsls	r1, r1, #8
 8000d68:	4331      	orrs	r1, r6
 8000d6a:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d6c:	6858      	ldr	r0, [r3, #4]
 8000d6e:	4915      	ldr	r1, [pc, #84]	; (8000dc4 <HAL_I2C_Init+0xa8>)
 8000d70:	4301      	orrs	r1, r0
 8000d72:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d74:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d76:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d78:	400a      	ands	r2, r1
 8000d7a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000d7c:	6961      	ldr	r1, [r4, #20]
 8000d7e:	6922      	ldr	r2, [r4, #16]
 8000d80:	430a      	orrs	r2, r1
 8000d82:	69a1      	ldr	r1, [r4, #24]
 8000d84:	0209      	lsls	r1, r1, #8
 8000d86:	430a      	orrs	r2, r1
 8000d88:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d8a:	6a21      	ldr	r1, [r4, #32]
 8000d8c:	69e2      	ldr	r2, [r4, #28]
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000d92:	2201      	movs	r2, #1
 8000d94:	6819      	ldr	r1, [r3, #0]
 8000d96:	430a      	orrs	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000d9a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d9c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d9e:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000da0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000da2:	3442      	adds	r4, #66	; 0x42
 8000da4:	7020      	strb	r0, [r4, #0]
}
 8000da6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000da8:	2184      	movs	r1, #132	; 0x84
 8000daa:	0209      	lsls	r1, r1, #8
 8000dac:	4331      	orrs	r1, r6
 8000dae:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000db0:	2802      	cmp	r0, #2
 8000db2:	d1db      	bne.n	8000d6c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000db4:	2180      	movs	r1, #128	; 0x80
 8000db6:	0109      	lsls	r1, r1, #4
 8000db8:	6059      	str	r1, [r3, #4]
 8000dba:	e7d7      	b.n	8000d6c <HAL_I2C_Init+0x50>
 8000dbc:	f0ffffff 	.word	0xf0ffffff
 8000dc0:	ffff7fff 	.word	0xffff7fff
 8000dc4:	02008000 	.word	0x02008000

08000dc8 <HAL_I2C_Master_Transmit>:
{
 8000dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dca:	0005      	movs	r5, r0
{
 8000dcc:	b087      	sub	sp, #28
 8000dce:	9103      	str	r1, [sp, #12]
 8000dd0:	9204      	str	r2, [sp, #16]
 8000dd2:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dd4:	3541      	adds	r5, #65	; 0x41
 8000dd6:	782b      	ldrb	r3, [r5, #0]
{
 8000dd8:	0004      	movs	r4, r0
    return HAL_BUSY;
 8000dda:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ddc:	2b20      	cmp	r3, #32
 8000dde:	d114      	bne.n	8000e0a <HAL_I2C_Master_Transmit+0x42>
    __HAL_LOCK(hi2c);
 8000de0:	0023      	movs	r3, r4
 8000de2:	3340      	adds	r3, #64	; 0x40
 8000de4:	781a      	ldrb	r2, [r3, #0]
 8000de6:	2a01      	cmp	r2, #1
 8000de8:	d00f      	beq.n	8000e0a <HAL_I2C_Master_Transmit+0x42>
 8000dea:	2601      	movs	r6, #1
 8000dec:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8000dee:	f7ff fc53 	bl	8000698 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000df2:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000df4:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000df6:	9000      	str	r0, [sp, #0]
 8000df8:	2319      	movs	r3, #25
 8000dfa:	0032      	movs	r2, r6
 8000dfc:	0209      	lsls	r1, r1, #8
 8000dfe:	0020      	movs	r0, r4
 8000e00:	f7ff fe94 	bl	8000b2c <I2C_WaitOnFlagUntilTimeout>
 8000e04:	2800      	cmp	r0, #0
 8000e06:	d002      	beq.n	8000e0e <HAL_I2C_Master_Transmit+0x46>
      return HAL_ERROR;
 8000e08:	2001      	movs	r0, #1
}
 8000e0a:	b007      	add	sp, #28
 8000e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e0e:	2321      	movs	r3, #33	; 0x21
 8000e10:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000e12:	0025      	movs	r5, r4
 8000e14:	3b11      	subs	r3, #17
 8000e16:	3542      	adds	r5, #66	; 0x42
 8000e18:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8000e1a:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e1c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000e1e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000e20:	466b      	mov	r3, sp
 8000e22:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8000e24:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000e26:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e28:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000e2a:	4b30      	ldr	r3, [pc, #192]	; (8000eec <HAL_I2C_Master_Transmit+0x124>)
 8000e2c:	2aff      	cmp	r2, #255	; 0xff
 8000e2e:	d921      	bls.n	8000e74 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e30:	22ff      	movs	r2, #255	; 0xff
 8000e32:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	2380      	movs	r3, #128	; 0x80
 8000e38:	045b      	lsls	r3, r3, #17
 8000e3a:	9903      	ldr	r1, [sp, #12]
 8000e3c:	0020      	movs	r0, r4
 8000e3e:	f7ff fe5f 	bl	8000b00 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e42:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8000e44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e46:	003a      	movs	r2, r7
 8000e48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000e4a:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d119      	bne.n	8000e84 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e50:	f7ff fefc 	bl	8000c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8000e54:	2800      	cmp	r0, #0
 8000e56:	d1d7      	bne.n	8000e08 <HAL_I2C_Master_Transmit+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e58:	2120      	movs	r1, #32
 8000e5a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8000e5c:	4e24      	ldr	r6, [pc, #144]	; (8000ef0 <HAL_I2C_Master_Transmit+0x128>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e5e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	4032      	ands	r2, r6
 8000e64:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000e66:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8000e68:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000e6a:	3341      	adds	r3, #65	; 0x41
 8000e6c:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000e6e:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000e70:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8000e72:	e7ca      	b.n	8000e0a <HAL_I2C_Master_Transmit+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8000e74:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000e76:	b292      	uxth	r2, r2
 8000e78:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	049b      	lsls	r3, r3, #18
 8000e82:	e7da      	b.n	8000e3a <HAL_I2C_Master_Transmit+0x72>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e84:	f7ff feb8 	bl	8000bf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	d1bd      	bne.n	8000e08 <HAL_I2C_Master_Transmit+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000e8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e8e:	6822      	ldr	r2, [r4, #0]
 8000e90:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8000e92:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000e94:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000e96:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000e98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000e9a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000ea2:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000ea4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000ea6:	b292      	uxth	r2, r2
 8000ea8:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0ca      	beq.n	8000e44 <HAL_I2C_Master_Transmit+0x7c>
 8000eae:	2a00      	cmp	r2, #0
 8000eb0:	d1c8      	bne.n	8000e44 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000eb2:	9700      	str	r7, [sp, #0]
 8000eb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000eb6:	2180      	movs	r1, #128	; 0x80
 8000eb8:	0020      	movs	r0, r4
 8000eba:	f7ff fe37 	bl	8000b2c <I2C_WaitOnFlagUntilTimeout>
 8000ebe:	2800      	cmp	r0, #0
 8000ec0:	d1a2      	bne.n	8000e08 <HAL_I2C_Master_Transmit+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ec2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000ec4:	2bff      	cmp	r3, #255	; 0xff
 8000ec6:	d909      	bls.n	8000edc <HAL_I2C_Master_Transmit+0x114>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ecc:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ece:	045b      	lsls	r3, r3, #17
 8000ed0:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ed2:	9903      	ldr	r1, [sp, #12]
 8000ed4:	0020      	movs	r0, r4
 8000ed6:	f7ff fe13 	bl	8000b00 <I2C_TransferConfig>
 8000eda:	e7b3      	b.n	8000e44 <HAL_I2C_Master_Transmit+0x7c>
 8000edc:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8000ede:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ee0:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	9000      	str	r0, [sp, #0]
 8000eea:	e7f2      	b.n	8000ed2 <HAL_I2C_Master_Transmit+0x10a>
 8000eec:	80002000 	.word	0x80002000
 8000ef0:	fe00e800 	.word	0xfe00e800

08000ef4 <HAL_I2C_Master_Receive>:
{
 8000ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ef6:	0005      	movs	r5, r0
{
 8000ef8:	b087      	sub	sp, #28
 8000efa:	9103      	str	r1, [sp, #12]
 8000efc:	9204      	str	r2, [sp, #16]
 8000efe:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f00:	3541      	adds	r5, #65	; 0x41
 8000f02:	782b      	ldrb	r3, [r5, #0]
{
 8000f04:	0004      	movs	r4, r0
    return HAL_BUSY;
 8000f06:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f08:	2b20      	cmp	r3, #32
 8000f0a:	d114      	bne.n	8000f36 <HAL_I2C_Master_Receive+0x42>
    __HAL_LOCK(hi2c);
 8000f0c:	0023      	movs	r3, r4
 8000f0e:	3340      	adds	r3, #64	; 0x40
 8000f10:	781a      	ldrb	r2, [r3, #0]
 8000f12:	2a01      	cmp	r2, #1
 8000f14:	d00f      	beq.n	8000f36 <HAL_I2C_Master_Receive+0x42>
 8000f16:	2601      	movs	r6, #1
 8000f18:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8000f1a:	f7ff fbbd 	bl	8000698 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f1e:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000f20:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f22:	9000      	str	r0, [sp, #0]
 8000f24:	2319      	movs	r3, #25
 8000f26:	0032      	movs	r2, r6
 8000f28:	0209      	lsls	r1, r1, #8
 8000f2a:	0020      	movs	r0, r4
 8000f2c:	f7ff fdfe 	bl	8000b2c <I2C_WaitOnFlagUntilTimeout>
 8000f30:	2800      	cmp	r0, #0
 8000f32:	d002      	beq.n	8000f3a <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 8000f34:	2001      	movs	r0, #1
}
 8000f36:	b007      	add	sp, #28
 8000f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000f3a:	2322      	movs	r3, #34	; 0x22
 8000f3c:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000f3e:	0025      	movs	r5, r4
 8000f40:	3b12      	subs	r3, #18
 8000f42:	3542      	adds	r5, #66	; 0x42
 8000f44:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8000f46:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f48:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000f4a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000f4c:	466b      	mov	r3, sp
 8000f4e:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8000f50:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000f52:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f54:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000f56:	4b31      	ldr	r3, [pc, #196]	; (800101c <HAL_I2C_Master_Receive+0x128>)
 8000f58:	2aff      	cmp	r2, #255	; 0xff
 8000f5a:	d921      	bls.n	8000fa0 <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f5c:	22ff      	movs	r2, #255	; 0xff
 8000f5e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	045b      	lsls	r3, r3, #17
 8000f66:	9903      	ldr	r1, [sp, #12]
 8000f68:	0020      	movs	r0, r4
 8000f6a:	f7ff fdc9 	bl	8000b00 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f6e:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8000f70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f72:	003a      	movs	r2, r7
 8000f74:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000f76:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d119      	bne.n	8000fb0 <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f7c:	f7ff fe66 	bl	8000c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d1d7      	bne.n	8000f34 <HAL_I2C_Master_Receive+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f84:	2120      	movs	r1, #32
 8000f86:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8000f88:	4e25      	ldr	r6, [pc, #148]	; (8001020 <HAL_I2C_Master_Receive+0x12c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f8a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	4032      	ands	r2, r6
 8000f90:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000f92:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8000f94:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000f96:	3341      	adds	r3, #65	; 0x41
 8000f98:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000f9a:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000f9c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8000f9e:	e7ca      	b.n	8000f36 <HAL_I2C_Master_Receive+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8000fa0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000fa2:	b292      	uxth	r2, r2
 8000fa4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	049b      	lsls	r3, r3, #18
 8000fae:	e7da      	b.n	8000f66 <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fb0:	f7ff fe74 	bl	8000c9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8000fb4:	2800      	cmp	r0, #0
 8000fb6:	d1bd      	bne.n	8000f34 <HAL_I2C_Master_Receive+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000fb8:	6823      	ldr	r3, [r4, #0]
 8000fba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbe:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8000fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000fc2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000fc8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000fca:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000fd2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000fd4:	b292      	uxth	r2, r2
 8000fd6:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0c9      	beq.n	8000f70 <HAL_I2C_Master_Receive+0x7c>
 8000fdc:	2a00      	cmp	r2, #0
 8000fde:	d1c7      	bne.n	8000f70 <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000fe0:	9700      	str	r7, [sp, #0]
 8000fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000fe4:	2180      	movs	r1, #128	; 0x80
 8000fe6:	0020      	movs	r0, r4
 8000fe8:	f7ff fda0 	bl	8000b2c <I2C_WaitOnFlagUntilTimeout>
 8000fec:	2800      	cmp	r0, #0
 8000fee:	d1a1      	bne.n	8000f34 <HAL_I2C_Master_Receive+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ff0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000ff2:	2bff      	cmp	r3, #255	; 0xff
 8000ff4:	d909      	bls.n	800100a <HAL_I2C_Master_Receive+0x116>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ffa:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ffc:	045b      	lsls	r3, r3, #17
 8000ffe:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001000:	9903      	ldr	r1, [sp, #12]
 8001002:	0020      	movs	r0, r4
 8001004:	f7ff fd7c 	bl	8000b00 <I2C_TransferConfig>
 8001008:	e7b2      	b.n	8000f70 <HAL_I2C_Master_Receive+0x7c>
 800100a:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 800100c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800100e:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8001010:	b292      	uxth	r2, r2
 8001012:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	9000      	str	r0, [sp, #0]
 8001018:	e7f2      	b.n	8001000 <HAL_I2C_Master_Receive+0x10c>
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	80002400 	.word	0x80002400
 8001020:	fe00e800 	.word	0xfe00e800

08001024 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001024:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001026:	0004      	movs	r4, r0
 8001028:	3441      	adds	r4, #65	; 0x41
 800102a:	7822      	ldrb	r2, [r4, #0]
{
 800102c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800102e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001030:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001032:	2a20      	cmp	r2, #32
 8001034:	d118      	bne.n	8001068 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8001036:	001d      	movs	r5, r3
 8001038:	3540      	adds	r5, #64	; 0x40
 800103a:	782e      	ldrb	r6, [r5, #0]
 800103c:	2e01      	cmp	r6, #1
 800103e:	d013      	beq.n	8001068 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8001040:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001042:	3022      	adds	r0, #34	; 0x22
 8001044:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001046:	681e      	ldr	r6, [r3, #0]
 8001048:	3823      	subs	r0, #35	; 0x23
 800104a:	4386      	bics	r6, r0
 800104c:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800104e:	681e      	ldr	r6, [r3, #0]
 8001050:	4f06      	ldr	r7, [pc, #24]	; (800106c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8001052:	403e      	ands	r6, r7
 8001054:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001056:	681e      	ldr	r6, [r3, #0]
 8001058:	4331      	orrs	r1, r6
 800105a:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800105c:	6819      	ldr	r1, [r3, #0]
 800105e:	4308      	orrs	r0, r1
 8001060:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001062:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001064:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8001066:	7028      	strb	r0, [r5, #0]
  }
}
 8001068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	ffffefff 	.word	0xffffefff

08001070 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001070:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001072:	0005      	movs	r5, r0
 8001074:	3541      	adds	r5, #65	; 0x41
 8001076:	782a      	ldrb	r2, [r5, #0]
{
 8001078:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800107a:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800107c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800107e:	2a20      	cmp	r2, #32
 8001080:	d117      	bne.n	80010b2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8001082:	001c      	movs	r4, r3
 8001084:	3440      	adds	r4, #64	; 0x40
 8001086:	7826      	ldrb	r6, [r4, #0]
 8001088:	2e01      	cmp	r6, #1
 800108a:	d012      	beq.n	80010b2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 800108c:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800108e:	3022      	adds	r0, #34	; 0x22
 8001090:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001092:	681e      	ldr	r6, [r3, #0]
 8001094:	3823      	subs	r0, #35	; 0x23
 8001096:	4386      	bics	r6, r0
 8001098:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800109a:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800109c:	4f05      	ldr	r7, [pc, #20]	; (80010b4 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 800109e:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80010a0:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80010a2:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80010a4:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80010a6:	6819      	ldr	r1, [r3, #0]
 80010a8:	4308      	orrs	r0, r1
 80010aa:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80010ac:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80010ae:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80010b0:	7020      	strb	r0, [r4, #0]
  }
}
 80010b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b4:	fffff0ff 	.word	0xfffff0ff

080010b8 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010b8:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <HAL_RCC_GetSysClockFreq+0x64>)
{
 80010bc:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80010be:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80010c0:	400a      	ands	r2, r1
 80010c2:	2a08      	cmp	r2, #8
 80010c4:	d026      	beq.n	8001114 <HAL_RCC_GetSysClockFreq+0x5c>
 80010c6:	2a0c      	cmp	r2, #12
 80010c8:	d006      	beq.n	80010d8 <HAL_RCC_GetSysClockFreq+0x20>
 80010ca:	2a04      	cmp	r2, #4
 80010cc:	d11a      	bne.n	8001104 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	06db      	lsls	r3, r3, #27
 80010d2:	d421      	bmi.n	8001118 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80010d4:	4812      	ldr	r0, [pc, #72]	; (8001120 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80010d6:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80010d8:	028a      	lsls	r2, r1, #10
 80010da:	4812      	ldr	r0, [pc, #72]	; (8001124 <HAL_RCC_GetSysClockFreq+0x6c>)
 80010dc:	0f12      	lsrs	r2, r2, #28
 80010de:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80010e0:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010e2:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80010e4:	0f89      	lsrs	r1, r1, #30
 80010e6:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010e8:	03c0      	lsls	r0, r0, #15
 80010ea:	d504      	bpl.n	80010f6 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 80010ec:	480e      	ldr	r0, [pc, #56]	; (8001128 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80010ee:	4350      	muls	r0, r2
 80010f0:	f7ff f81e 	bl	8000130 <__udivsi3>
 80010f4:	e7ef      	b.n	80010d6 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	06db      	lsls	r3, r3, #27
 80010fa:	d501      	bpl.n	8001100 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80010fc:	480b      	ldr	r0, [pc, #44]	; (800112c <HAL_RCC_GetSysClockFreq+0x74>)
 80010fe:	e7f6      	b.n	80010ee <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8001100:	4807      	ldr	r0, [pc, #28]	; (8001120 <HAL_RCC_GetSysClockFreq+0x68>)
 8001102:	e7f4      	b.n	80010ee <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001104:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001106:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001108:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800110a:	041b      	lsls	r3, r3, #16
 800110c:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800110e:	3301      	adds	r3, #1
 8001110:	4098      	lsls	r0, r3
 8001112:	e7e0      	b.n	80010d6 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <HAL_RCC_GetSysClockFreq+0x70>)
 8001116:	e7de      	b.n	80010d6 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 800111a:	e7dc      	b.n	80010d6 <HAL_RCC_GetSysClockFreq+0x1e>
 800111c:	40021000 	.word	0x40021000
 8001120:	00f42400 	.word	0x00f42400
 8001124:	08003e30 	.word	0x08003e30
 8001128:	007a1200 	.word	0x007a1200
 800112c:	003d0900 	.word	0x003d0900

08001130 <HAL_RCC_OscConfig>:
{
 8001130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001132:	0005      	movs	r5, r0
 8001134:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8001136:	2800      	cmp	r0, #0
 8001138:	d102      	bne.n	8001140 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800113a:	2001      	movs	r0, #1
}
 800113c:	b007      	add	sp, #28
 800113e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001140:	230c      	movs	r3, #12
 8001142:	4cbe      	ldr	r4, [pc, #760]	; (800143c <HAL_RCC_OscConfig+0x30c>)
 8001144:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001146:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001148:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800114a:	2380      	movs	r3, #128	; 0x80
 800114c:	025b      	lsls	r3, r3, #9
 800114e:	401a      	ands	r2, r3
 8001150:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001152:	6802      	ldr	r2, [r0, #0]
 8001154:	07d2      	lsls	r2, r2, #31
 8001156:	d441      	bmi.n	80011dc <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001158:	682b      	ldr	r3, [r5, #0]
 800115a:	079b      	lsls	r3, r3, #30
 800115c:	d500      	bpl.n	8001160 <HAL_RCC_OscConfig+0x30>
 800115e:	e087      	b.n	8001270 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001160:	682b      	ldr	r3, [r5, #0]
 8001162:	06db      	lsls	r3, r3, #27
 8001164:	d528      	bpl.n	80011b8 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001166:	2e00      	cmp	r6, #0
 8001168:	d000      	beq.n	800116c <HAL_RCC_OscConfig+0x3c>
 800116a:	e0d9      	b.n	8001320 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	059b      	lsls	r3, r3, #22
 8001170:	d502      	bpl.n	8001178 <HAL_RCC_OscConfig+0x48>
 8001172:	69eb      	ldr	r3, [r5, #28]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0e0      	beq.n	800113a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001178:	6862      	ldr	r2, [r4, #4]
 800117a:	49b1      	ldr	r1, [pc, #708]	; (8001440 <HAL_RCC_OscConfig+0x310>)
 800117c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800117e:	400a      	ands	r2, r1
 8001180:	431a      	orrs	r2, r3
 8001182:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001184:	6861      	ldr	r1, [r4, #4]
 8001186:	6a2a      	ldr	r2, [r5, #32]
 8001188:	0209      	lsls	r1, r1, #8
 800118a:	0a09      	lsrs	r1, r1, #8
 800118c:	0612      	lsls	r2, r2, #24
 800118e:	430a      	orrs	r2, r1
 8001190:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	0b5b      	lsrs	r3, r3, #13
 8001196:	3301      	adds	r3, #1
 8001198:	0212      	lsls	r2, r2, #8
 800119a:	409a      	lsls	r2, r3
 800119c:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800119e:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80011a0:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80011a2:	060a      	lsls	r2, r1, #24
 80011a4:	49a7      	ldr	r1, [pc, #668]	; (8001444 <HAL_RCC_OscConfig+0x314>)
 80011a6:	0f12      	lsrs	r2, r2, #28
 80011a8:	5c8a      	ldrb	r2, [r1, r2]
 80011aa:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011ac:	4aa6      	ldr	r2, [pc, #664]	; (8001448 <HAL_RCC_OscConfig+0x318>)
 80011ae:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80011b0:	f7ff fa3e 	bl	8000630 <HAL_InitTick>
        if(status != HAL_OK)
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d1c1      	bne.n	800113c <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b8:	682b      	ldr	r3, [r5, #0]
 80011ba:	071b      	lsls	r3, r3, #28
 80011bc:	d500      	bpl.n	80011c0 <HAL_RCC_OscConfig+0x90>
 80011be:	e0e6      	b.n	800138e <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c0:	682b      	ldr	r3, [r5, #0]
 80011c2:	075b      	lsls	r3, r3, #29
 80011c4:	d500      	bpl.n	80011c8 <HAL_RCC_OscConfig+0x98>
 80011c6:	e108      	b.n	80013da <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011c8:	682b      	ldr	r3, [r5, #0]
 80011ca:	069b      	lsls	r3, r3, #26
 80011cc:	d500      	bpl.n	80011d0 <HAL_RCC_OscConfig+0xa0>
 80011ce:	e18d      	b.n	80014ec <HAL_RCC_OscConfig+0x3bc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d000      	beq.n	80011d8 <HAL_RCC_OscConfig+0xa8>
 80011d6:	e1bc      	b.n	8001552 <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 80011d8:	2000      	movs	r0, #0
 80011da:	e7af      	b.n	800113c <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011dc:	2e08      	cmp	r6, #8
 80011de:	d004      	beq.n	80011ea <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011e0:	2e0c      	cmp	r6, #12
 80011e2:	d109      	bne.n	80011f8 <HAL_RCC_OscConfig+0xc8>
 80011e4:	9a01      	ldr	r2, [sp, #4]
 80011e6:	2a00      	cmp	r2, #0
 80011e8:	d006      	beq.n	80011f8 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ea:	6823      	ldr	r3, [r4, #0]
 80011ec:	039b      	lsls	r3, r3, #14
 80011ee:	d5b3      	bpl.n	8001158 <HAL_RCC_OscConfig+0x28>
 80011f0:	686b      	ldr	r3, [r5, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1b0      	bne.n	8001158 <HAL_RCC_OscConfig+0x28>
 80011f6:	e7a0      	b.n	800113a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f8:	686a      	ldr	r2, [r5, #4]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d111      	bne.n	8001222 <HAL_RCC_OscConfig+0xf2>
 80011fe:	6822      	ldr	r2, [r4, #0]
 8001200:	4313      	orrs	r3, r2
 8001202:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001204:	f7ff fa48 	bl	8000698 <HAL_GetTick>
 8001208:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800120a:	2280      	movs	r2, #128	; 0x80
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	0292      	lsls	r2, r2, #10
 8001210:	4213      	tst	r3, r2
 8001212:	d1a1      	bne.n	8001158 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001214:	f7ff fa40 	bl	8000698 <HAL_GetTick>
 8001218:	1bc0      	subs	r0, r0, r7
 800121a:	2864      	cmp	r0, #100	; 0x64
 800121c:	d9f5      	bls.n	800120a <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 800121e:	2003      	movs	r0, #3
 8001220:	e78c      	b.n	800113c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001222:	21a0      	movs	r1, #160	; 0xa0
 8001224:	02c9      	lsls	r1, r1, #11
 8001226:	428a      	cmp	r2, r1
 8001228:	d105      	bne.n	8001236 <HAL_RCC_OscConfig+0x106>
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	6821      	ldr	r1, [r4, #0]
 800122e:	02d2      	lsls	r2, r2, #11
 8001230:	430a      	orrs	r2, r1
 8001232:	6022      	str	r2, [r4, #0]
 8001234:	e7e3      	b.n	80011fe <HAL_RCC_OscConfig+0xce>
 8001236:	6821      	ldr	r1, [r4, #0]
 8001238:	4884      	ldr	r0, [pc, #528]	; (800144c <HAL_RCC_OscConfig+0x31c>)
 800123a:	4001      	ands	r1, r0
 800123c:	6021      	str	r1, [r4, #0]
 800123e:	6821      	ldr	r1, [r4, #0]
 8001240:	400b      	ands	r3, r1
 8001242:	9305      	str	r3, [sp, #20]
 8001244:	9b05      	ldr	r3, [sp, #20]
 8001246:	4982      	ldr	r1, [pc, #520]	; (8001450 <HAL_RCC_OscConfig+0x320>)
 8001248:	6823      	ldr	r3, [r4, #0]
 800124a:	400b      	ands	r3, r1
 800124c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800124e:	2a00      	cmp	r2, #0
 8001250:	d1d8      	bne.n	8001204 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8001252:	f7ff fa21 	bl	8000698 <HAL_GetTick>
 8001256:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001258:	2280      	movs	r2, #128	; 0x80
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	0292      	lsls	r2, r2, #10
 800125e:	4213      	tst	r3, r2
 8001260:	d100      	bne.n	8001264 <HAL_RCC_OscConfig+0x134>
 8001262:	e779      	b.n	8001158 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001264:	f7ff fa18 	bl	8000698 <HAL_GetTick>
 8001268:	1bc0      	subs	r0, r0, r7
 800126a:	2864      	cmp	r0, #100	; 0x64
 800126c:	d9f4      	bls.n	8001258 <HAL_RCC_OscConfig+0x128>
 800126e:	e7d6      	b.n	800121e <HAL_RCC_OscConfig+0xee>
    hsi_state = RCC_OscInitStruct->HSIState;
 8001270:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001272:	2e04      	cmp	r6, #4
 8001274:	d004      	beq.n	8001280 <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001276:	2e0c      	cmp	r6, #12
 8001278:	d125      	bne.n	80012c6 <HAL_RCC_OscConfig+0x196>
 800127a:	9b01      	ldr	r3, [sp, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d122      	bne.n	80012c6 <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	075b      	lsls	r3, r3, #29
 8001284:	d502      	bpl.n	800128c <HAL_RCC_OscConfig+0x15c>
 8001286:	2a00      	cmp	r2, #0
 8001288:	d100      	bne.n	800128c <HAL_RCC_OscConfig+0x15c>
 800128a:	e756      	b.n	800113a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128c:	6861      	ldr	r1, [r4, #4]
 800128e:	692b      	ldr	r3, [r5, #16]
 8001290:	4870      	ldr	r0, [pc, #448]	; (8001454 <HAL_RCC_OscConfig+0x324>)
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	4001      	ands	r1, r0
 8001296:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001298:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129a:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	438b      	bics	r3, r1
 80012a0:	4313      	orrs	r3, r2
 80012a2:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012a4:	f7ff ff08 	bl	80010b8 <HAL_RCC_GetSysClockFreq>
 80012a8:	68e3      	ldr	r3, [r4, #12]
 80012aa:	4a66      	ldr	r2, [pc, #408]	; (8001444 <HAL_RCC_OscConfig+0x314>)
 80012ac:	061b      	lsls	r3, r3, #24
 80012ae:	0f1b      	lsrs	r3, r3, #28
 80012b0:	5cd3      	ldrb	r3, [r2, r3]
 80012b2:	40d8      	lsrs	r0, r3
 80012b4:	4b64      	ldr	r3, [pc, #400]	; (8001448 <HAL_RCC_OscConfig+0x318>)
 80012b6:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff f9b9 	bl	8000630 <HAL_InitTick>
      if(status != HAL_OK)
 80012be:	2800      	cmp	r0, #0
 80012c0:	d100      	bne.n	80012c4 <HAL_RCC_OscConfig+0x194>
 80012c2:	e74d      	b.n	8001160 <HAL_RCC_OscConfig+0x30>
 80012c4:	e73a      	b.n	800113c <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012c6:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 80012c8:	2a00      	cmp	r2, #0
 80012ca:	d018      	beq.n	80012fe <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012cc:	2109      	movs	r1, #9
 80012ce:	438b      	bics	r3, r1
 80012d0:	4313      	orrs	r3, r2
 80012d2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80012d4:	f7ff f9e0 	bl	8000698 <HAL_GetTick>
 80012d8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012da:	2204      	movs	r2, #4
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	4213      	tst	r3, r2
 80012e0:	d007      	beq.n	80012f2 <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e2:	6862      	ldr	r2, [r4, #4]
 80012e4:	692b      	ldr	r3, [r5, #16]
 80012e6:	495b      	ldr	r1, [pc, #364]	; (8001454 <HAL_RCC_OscConfig+0x324>)
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	400a      	ands	r2, r1
 80012ec:	4313      	orrs	r3, r2
 80012ee:	6063      	str	r3, [r4, #4]
 80012f0:	e736      	b.n	8001160 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f2:	f7ff f9d1 	bl	8000698 <HAL_GetTick>
 80012f6:	1bc0      	subs	r0, r0, r7
 80012f8:	2802      	cmp	r0, #2
 80012fa:	d9ee      	bls.n	80012da <HAL_RCC_OscConfig+0x1aa>
 80012fc:	e78f      	b.n	800121e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 80012fe:	2201      	movs	r2, #1
 8001300:	4393      	bics	r3, r2
 8001302:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001304:	f7ff f9c8 	bl	8000698 <HAL_GetTick>
 8001308:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800130a:	2204      	movs	r2, #4
 800130c:	6823      	ldr	r3, [r4, #0]
 800130e:	4213      	tst	r3, r2
 8001310:	d100      	bne.n	8001314 <HAL_RCC_OscConfig+0x1e4>
 8001312:	e725      	b.n	8001160 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001314:	f7ff f9c0 	bl	8000698 <HAL_GetTick>
 8001318:	1bc0      	subs	r0, r0, r7
 800131a:	2802      	cmp	r0, #2
 800131c:	d9f5      	bls.n	800130a <HAL_RCC_OscConfig+0x1da>
 800131e:	e77e      	b.n	800121e <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001320:	69eb      	ldr	r3, [r5, #28]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d020      	beq.n	8001368 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	6822      	ldr	r2, [r4, #0]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4313      	orrs	r3, r2
 800132e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001330:	f7ff f9b2 	bl	8000698 <HAL_GetTick>
 8001334:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001336:	2280      	movs	r2, #128	; 0x80
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	0092      	lsls	r2, r2, #2
 800133c:	4213      	tst	r3, r2
 800133e:	d00d      	beq.n	800135c <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001340:	6863      	ldr	r3, [r4, #4]
 8001342:	4a3f      	ldr	r2, [pc, #252]	; (8001440 <HAL_RCC_OscConfig+0x310>)
 8001344:	4013      	ands	r3, r2
 8001346:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001348:	4313      	orrs	r3, r2
 800134a:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800134c:	6862      	ldr	r2, [r4, #4]
 800134e:	6a2b      	ldr	r3, [r5, #32]
 8001350:	0212      	lsls	r2, r2, #8
 8001352:	061b      	lsls	r3, r3, #24
 8001354:	0a12      	lsrs	r2, r2, #8
 8001356:	4313      	orrs	r3, r2
 8001358:	6063      	str	r3, [r4, #4]
 800135a:	e72d      	b.n	80011b8 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800135c:	f7ff f99c 	bl	8000698 <HAL_GetTick>
 8001360:	1bc0      	subs	r0, r0, r7
 8001362:	2802      	cmp	r0, #2
 8001364:	d9e7      	bls.n	8001336 <HAL_RCC_OscConfig+0x206>
 8001366:	e75a      	b.n	800121e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	4a3b      	ldr	r2, [pc, #236]	; (8001458 <HAL_RCC_OscConfig+0x328>)
 800136c:	4013      	ands	r3, r2
 800136e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001370:	f7ff f992 	bl	8000698 <HAL_GetTick>
 8001374:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001376:	2280      	movs	r2, #128	; 0x80
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	0092      	lsls	r2, r2, #2
 800137c:	4213      	tst	r3, r2
 800137e:	d100      	bne.n	8001382 <HAL_RCC_OscConfig+0x252>
 8001380:	e71a      	b.n	80011b8 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001382:	f7ff f989 	bl	8000698 <HAL_GetTick>
 8001386:	1bc0      	subs	r0, r0, r7
 8001388:	2802      	cmp	r0, #2
 800138a:	d9f4      	bls.n	8001376 <HAL_RCC_OscConfig+0x246>
 800138c:	e747      	b.n	800121e <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800138e:	696a      	ldr	r2, [r5, #20]
 8001390:	2301      	movs	r3, #1
 8001392:	2a00      	cmp	r2, #0
 8001394:	d010      	beq.n	80013b8 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8001396:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001398:	4313      	orrs	r3, r2
 800139a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800139c:	f7ff f97c 	bl	8000698 <HAL_GetTick>
 80013a0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013a2:	2202      	movs	r2, #2
 80013a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80013a6:	4213      	tst	r3, r2
 80013a8:	d000      	beq.n	80013ac <HAL_RCC_OscConfig+0x27c>
 80013aa:	e709      	b.n	80011c0 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ac:	f7ff f974 	bl	8000698 <HAL_GetTick>
 80013b0:	1bc0      	subs	r0, r0, r7
 80013b2:	2802      	cmp	r0, #2
 80013b4:	d9f5      	bls.n	80013a2 <HAL_RCC_OscConfig+0x272>
 80013b6:	e732      	b.n	800121e <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 80013b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80013ba:	439a      	bics	r2, r3
 80013bc:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80013be:	f7ff f96b 	bl	8000698 <HAL_GetTick>
 80013c2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013c4:	2202      	movs	r2, #2
 80013c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80013c8:	4213      	tst	r3, r2
 80013ca:	d100      	bne.n	80013ce <HAL_RCC_OscConfig+0x29e>
 80013cc:	e6f8      	b.n	80011c0 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ce:	f7ff f963 	bl	8000698 <HAL_GetTick>
 80013d2:	1bc0      	subs	r0, r0, r7
 80013d4:	2802      	cmp	r0, #2
 80013d6:	d9f5      	bls.n	80013c4 <HAL_RCC_OscConfig+0x294>
 80013d8:	e721      	b.n	800121e <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013da:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80013dc:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80013e0:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80013e2:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e4:	421a      	tst	r2, r3
 80013e6:	d104      	bne.n	80013f2 <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80013ea:	4313      	orrs	r3, r2
 80013ec:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80013ee:	2301      	movs	r3, #1
 80013f0:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	4f19      	ldr	r7, [pc, #100]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80013f6:	0052      	lsls	r2, r2, #1
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	4213      	tst	r3, r2
 80013fc:	d008      	beq.n	8001410 <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	68ab      	ldr	r3, [r5, #8]
 8001402:	0052      	lsls	r2, r2, #1
 8001404:	4293      	cmp	r3, r2
 8001406:	d12b      	bne.n	8001460 <HAL_RCC_OscConfig+0x330>
 8001408:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800140a:	4313      	orrs	r3, r2
 800140c:	6523      	str	r3, [r4, #80]	; 0x50
 800140e:	e04c      	b.n	80014aa <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001410:	2280      	movs	r2, #128	; 0x80
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	0052      	lsls	r2, r2, #1
 8001416:	4313      	orrs	r3, r2
 8001418:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800141a:	f7ff f93d 	bl	8000698 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8001422:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001424:	9303      	str	r3, [sp, #12]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	9a03      	ldr	r2, [sp, #12]
 800142a:	4213      	tst	r3, r2
 800142c:	d1e7      	bne.n	80013fe <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800142e:	f7ff f933 	bl	8000698 <HAL_GetTick>
 8001432:	9b02      	ldr	r3, [sp, #8]
 8001434:	1ac0      	subs	r0, r0, r3
 8001436:	2864      	cmp	r0, #100	; 0x64
 8001438:	d9f5      	bls.n	8001426 <HAL_RCC_OscConfig+0x2f6>
 800143a:	e6f0      	b.n	800121e <HAL_RCC_OscConfig+0xee>
 800143c:	40021000 	.word	0x40021000
 8001440:	ffff1fff 	.word	0xffff1fff
 8001444:	08003e18 	.word	0x08003e18
 8001448:	20000558 	.word	0x20000558
 800144c:	fffeffff 	.word	0xfffeffff
 8001450:	fffbffff 	.word	0xfffbffff
 8001454:	ffffe0ff 	.word	0xffffe0ff
 8001458:	fffffeff 	.word	0xfffffeff
 800145c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001460:	2b00      	cmp	r3, #0
 8001462:	d116      	bne.n	8001492 <HAL_RCC_OscConfig+0x362>
 8001464:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001466:	4a6c      	ldr	r2, [pc, #432]	; (8001618 <HAL_RCC_OscConfig+0x4e8>)
 8001468:	4013      	ands	r3, r2
 800146a:	6523      	str	r3, [r4, #80]	; 0x50
 800146c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800146e:	4a6b      	ldr	r2, [pc, #428]	; (800161c <HAL_RCC_OscConfig+0x4ec>)
 8001470:	4013      	ands	r3, r2
 8001472:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001474:	f7ff f910 	bl	8000698 <HAL_GetTick>
 8001478:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800147e:	0092      	lsls	r2, r2, #2
 8001480:	4213      	tst	r3, r2
 8001482:	d02a      	beq.n	80014da <HAL_RCC_OscConfig+0x3aa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001484:	f7ff f908 	bl	8000698 <HAL_GetTick>
 8001488:	4b65      	ldr	r3, [pc, #404]	; (8001620 <HAL_RCC_OscConfig+0x4f0>)
 800148a:	1bc0      	subs	r0, r0, r7
 800148c:	4298      	cmp	r0, r3
 800148e:	d9f4      	bls.n	800147a <HAL_RCC_OscConfig+0x34a>
 8001490:	e6c5      	b.n	800121e <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001492:	21a0      	movs	r1, #160	; 0xa0
 8001494:	00c9      	lsls	r1, r1, #3
 8001496:	428b      	cmp	r3, r1
 8001498:	d10b      	bne.n	80014b2 <HAL_RCC_OscConfig+0x382>
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	430b      	orrs	r3, r1
 80014a2:	6523      	str	r3, [r4, #80]	; 0x50
 80014a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80014a6:	431a      	orrs	r2, r3
 80014a8:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80014aa:	f7ff f8f5 	bl	8000698 <HAL_GetTick>
 80014ae:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014b0:	e00e      	b.n	80014d0 <HAL_RCC_OscConfig+0x3a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80014b4:	4a58      	ldr	r2, [pc, #352]	; (8001618 <HAL_RCC_OscConfig+0x4e8>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	6523      	str	r3, [r4, #80]	; 0x50
 80014ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80014bc:	4a57      	ldr	r2, [pc, #348]	; (800161c <HAL_RCC_OscConfig+0x4ec>)
 80014be:	4013      	ands	r3, r2
 80014c0:	e7a4      	b.n	800140c <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c2:	f7ff f8e9 	bl	8000698 <HAL_GetTick>
 80014c6:	4b56      	ldr	r3, [pc, #344]	; (8001620 <HAL_RCC_OscConfig+0x4f0>)
 80014c8:	1bc0      	subs	r0, r0, r7
 80014ca:	4298      	cmp	r0, r3
 80014cc:	d900      	bls.n	80014d0 <HAL_RCC_OscConfig+0x3a0>
 80014ce:	e6a6      	b.n	800121e <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014d0:	2280      	movs	r2, #128	; 0x80
 80014d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80014d4:	0092      	lsls	r2, r2, #2
 80014d6:	4213      	tst	r3, r2
 80014d8:	d0f3      	beq.n	80014c2 <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 80014da:	9b01      	ldr	r3, [sp, #4]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d000      	beq.n	80014e2 <HAL_RCC_OscConfig+0x3b2>
 80014e0:	e672      	b.n	80011c8 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80014e4:	4a4f      	ldr	r2, [pc, #316]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80014ea:	e66d      	b.n	80011c8 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014ec:	69a9      	ldr	r1, [r5, #24]
 80014ee:	2301      	movs	r3, #1
 80014f0:	4a4d      	ldr	r2, [pc, #308]	; (8001628 <HAL_RCC_OscConfig+0x4f8>)
 80014f2:	2900      	cmp	r1, #0
 80014f4:	d018      	beq.n	8001528 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_HSI48_ENABLE();
 80014f6:	68a1      	ldr	r1, [r4, #8]
 80014f8:	4319      	orrs	r1, r3
 80014fa:	60a1      	str	r1, [r4, #8]
 80014fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014fe:	430b      	orrs	r3, r1
 8001500:	6363      	str	r3, [r4, #52]	; 0x34
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	6a11      	ldr	r1, [r2, #32]
 8001506:	019b      	lsls	r3, r3, #6
 8001508:	430b      	orrs	r3, r1
 800150a:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800150c:	f7ff f8c4 	bl	8000698 <HAL_GetTick>
 8001510:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001512:	2202      	movs	r2, #2
 8001514:	68a3      	ldr	r3, [r4, #8]
 8001516:	4213      	tst	r3, r2
 8001518:	d000      	beq.n	800151c <HAL_RCC_OscConfig+0x3ec>
 800151a:	e659      	b.n	80011d0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800151c:	f7ff f8bc 	bl	8000698 <HAL_GetTick>
 8001520:	1bc0      	subs	r0, r0, r7
 8001522:	2802      	cmp	r0, #2
 8001524:	d9f5      	bls.n	8001512 <HAL_RCC_OscConfig+0x3e2>
 8001526:	e67a      	b.n	800121e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 8001528:	68a1      	ldr	r1, [r4, #8]
 800152a:	4399      	bics	r1, r3
 800152c:	60a1      	str	r1, [r4, #8]
 800152e:	6a13      	ldr	r3, [r2, #32]
 8001530:	493e      	ldr	r1, [pc, #248]	; (800162c <HAL_RCC_OscConfig+0x4fc>)
 8001532:	400b      	ands	r3, r1
 8001534:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8001536:	f7ff f8af 	bl	8000698 <HAL_GetTick>
 800153a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800153c:	2202      	movs	r2, #2
 800153e:	68a3      	ldr	r3, [r4, #8]
 8001540:	4213      	tst	r3, r2
 8001542:	d100      	bne.n	8001546 <HAL_RCC_OscConfig+0x416>
 8001544:	e644      	b.n	80011d0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001546:	f7ff f8a7 	bl	8000698 <HAL_GetTick>
 800154a:	1bc0      	subs	r0, r0, r7
 800154c:	2802      	cmp	r0, #2
 800154e:	d9f5      	bls.n	800153c <HAL_RCC_OscConfig+0x40c>
 8001550:	e665      	b.n	800121e <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001552:	2e0c      	cmp	r6, #12
 8001554:	d043      	beq.n	80015de <HAL_RCC_OscConfig+0x4ae>
 8001556:	4a36      	ldr	r2, [pc, #216]	; (8001630 <HAL_RCC_OscConfig+0x500>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001558:	2b02      	cmp	r3, #2
 800155a:	d12e      	bne.n	80015ba <HAL_RCC_OscConfig+0x48a>
        __HAL_RCC_PLL_DISABLE();
 800155c:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800155e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001560:	4013      	ands	r3, r2
 8001562:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001564:	f7ff f898 	bl	8000698 <HAL_GetTick>
 8001568:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800156a:	04b6      	lsls	r6, r6, #18
 800156c:	6823      	ldr	r3, [r4, #0]
 800156e:	4233      	tst	r3, r6
 8001570:	d11d      	bne.n	80015ae <HAL_RCC_OscConfig+0x47e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001572:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001574:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001576:	68e2      	ldr	r2, [r4, #12]
 8001578:	430b      	orrs	r3, r1
 800157a:	492e      	ldr	r1, [pc, #184]	; (8001634 <HAL_RCC_OscConfig+0x504>)
 800157c:	400a      	ands	r2, r1
 800157e:	4313      	orrs	r3, r2
 8001580:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001582:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001584:	4313      	orrs	r3, r2
 8001586:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	6822      	ldr	r2, [r4, #0]
 800158c:	045b      	lsls	r3, r3, #17
 800158e:	4313      	orrs	r3, r2
 8001590:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001592:	f7ff f881 	bl	8000698 <HAL_GetTick>
 8001596:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001598:	04ad      	lsls	r5, r5, #18
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	422b      	tst	r3, r5
 800159e:	d000      	beq.n	80015a2 <HAL_RCC_OscConfig+0x472>
 80015a0:	e61a      	b.n	80011d8 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a2:	f7ff f879 	bl	8000698 <HAL_GetTick>
 80015a6:	1b80      	subs	r0, r0, r6
 80015a8:	2802      	cmp	r0, #2
 80015aa:	d9f6      	bls.n	800159a <HAL_RCC_OscConfig+0x46a>
 80015ac:	e637      	b.n	800121e <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ae:	f7ff f873 	bl	8000698 <HAL_GetTick>
 80015b2:	1bc0      	subs	r0, r0, r7
 80015b4:	2802      	cmp	r0, #2
 80015b6:	d9d9      	bls.n	800156c <HAL_RCC_OscConfig+0x43c>
 80015b8:	e631      	b.n	800121e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 80015ba:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015bc:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80015be:	4013      	ands	r3, r2
 80015c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80015c2:	f7ff f869 	bl	8000698 <HAL_GetTick>
 80015c6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015c8:	04ad      	lsls	r5, r5, #18
 80015ca:	6823      	ldr	r3, [r4, #0]
 80015cc:	422b      	tst	r3, r5
 80015ce:	d100      	bne.n	80015d2 <HAL_RCC_OscConfig+0x4a2>
 80015d0:	e602      	b.n	80011d8 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d2:	f7ff f861 	bl	8000698 <HAL_GetTick>
 80015d6:	1b80      	subs	r0, r0, r6
 80015d8:	2802      	cmp	r0, #2
 80015da:	d9f6      	bls.n	80015ca <HAL_RCC_OscConfig+0x49a>
 80015dc:	e61f      	b.n	800121e <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 80015de:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d100      	bne.n	80015e6 <HAL_RCC_OscConfig+0x4b6>
 80015e4:	e5aa      	b.n	800113c <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e6:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80015e8:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ea:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80015ec:	0252      	lsls	r2, r2, #9
 80015ee:	401a      	ands	r2, r3
        return HAL_ERROR;
 80015f0:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f2:	428a      	cmp	r2, r1
 80015f4:	d000      	beq.n	80015f8 <HAL_RCC_OscConfig+0x4c8>
 80015f6:	e5a1      	b.n	800113c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015f8:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fa:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015fc:	0392      	lsls	r2, r2, #14
 80015fe:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001600:	428a      	cmp	r2, r1
 8001602:	d000      	beq.n	8001606 <HAL_RCC_OscConfig+0x4d6>
 8001604:	e59a      	b.n	800113c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001606:	20c0      	movs	r0, #192	; 0xc0
 8001608:	0400      	lsls	r0, r0, #16
 800160a:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800160c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800160e:	1a18      	subs	r0, r3, r0
 8001610:	1e43      	subs	r3, r0, #1
 8001612:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8001614:	b2c0      	uxtb	r0, r0
 8001616:	e591      	b.n	800113c <HAL_RCC_OscConfig+0xc>
 8001618:	fffffeff 	.word	0xfffffeff
 800161c:	fffffbff 	.word	0xfffffbff
 8001620:	00001388 	.word	0x00001388
 8001624:	efffffff 	.word	0xefffffff
 8001628:	40010000 	.word	0x40010000
 800162c:	ffffdfff 	.word	0xffffdfff
 8001630:	feffffff 	.word	0xfeffffff
 8001634:	ff02ffff 	.word	0xff02ffff

08001638 <HAL_RCC_ClockConfig>:
{
 8001638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800163a:	1e06      	subs	r6, r0, #0
 800163c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800163e:	d101      	bne.n	8001644 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8001640:	2001      	movs	r0, #1
}
 8001642:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001644:	2201      	movs	r2, #1
 8001646:	4c51      	ldr	r4, [pc, #324]	; (800178c <HAL_RCC_ClockConfig+0x154>)
 8001648:	9901      	ldr	r1, [sp, #4]
 800164a:	6823      	ldr	r3, [r4, #0]
 800164c:	4013      	ands	r3, r2
 800164e:	428b      	cmp	r3, r1
 8001650:	d327      	bcc.n	80016a2 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001652:	6832      	ldr	r2, [r6, #0]
 8001654:	0793      	lsls	r3, r2, #30
 8001656:	d42f      	bmi.n	80016b8 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001658:	07d3      	lsls	r3, r2, #31
 800165a:	d435      	bmi.n	80016c8 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800165c:	2301      	movs	r3, #1
 800165e:	6822      	ldr	r2, [r4, #0]
 8001660:	9901      	ldr	r1, [sp, #4]
 8001662:	401a      	ands	r2, r3
 8001664:	4291      	cmp	r1, r2
 8001666:	d200      	bcs.n	800166a <HAL_RCC_ClockConfig+0x32>
 8001668:	e081      	b.n	800176e <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166a:	6832      	ldr	r2, [r6, #0]
 800166c:	4c48      	ldr	r4, [pc, #288]	; (8001790 <HAL_RCC_ClockConfig+0x158>)
 800166e:	0753      	lsls	r3, r2, #29
 8001670:	d500      	bpl.n	8001674 <HAL_RCC_ClockConfig+0x3c>
 8001672:	e084      	b.n	800177e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001674:	0713      	lsls	r3, r2, #28
 8001676:	d506      	bpl.n	8001686 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001678:	68e2      	ldr	r2, [r4, #12]
 800167a:	6933      	ldr	r3, [r6, #16]
 800167c:	4945      	ldr	r1, [pc, #276]	; (8001794 <HAL_RCC_ClockConfig+0x15c>)
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	400a      	ands	r2, r1
 8001682:	4313      	orrs	r3, r2
 8001684:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001686:	f7ff fd17 	bl	80010b8 <HAL_RCC_GetSysClockFreq>
 800168a:	68e3      	ldr	r3, [r4, #12]
 800168c:	4a42      	ldr	r2, [pc, #264]	; (8001798 <HAL_RCC_ClockConfig+0x160>)
 800168e:	061b      	lsls	r3, r3, #24
 8001690:	0f1b      	lsrs	r3, r3, #28
 8001692:	5cd3      	ldrb	r3, [r2, r3]
 8001694:	40d8      	lsrs	r0, r3
 8001696:	4b41      	ldr	r3, [pc, #260]	; (800179c <HAL_RCC_ClockConfig+0x164>)
 8001698:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800169a:	2000      	movs	r0, #0
 800169c:	f7fe ffc8 	bl	8000630 <HAL_InitTick>
 80016a0:	e7cf      	b.n	8001642 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	9901      	ldr	r1, [sp, #4]
 80016a6:	4393      	bics	r3, r2
 80016a8:	430b      	orrs	r3, r1
 80016aa:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ac:	6823      	ldr	r3, [r4, #0]
 80016ae:	4013      	ands	r3, r2
 80016b0:	9a01      	ldr	r2, [sp, #4]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d1c4      	bne.n	8001640 <HAL_RCC_ClockConfig+0x8>
 80016b6:	e7cc      	b.n	8001652 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b8:	20f0      	movs	r0, #240	; 0xf0
 80016ba:	4935      	ldr	r1, [pc, #212]	; (8001790 <HAL_RCC_ClockConfig+0x158>)
 80016bc:	68cb      	ldr	r3, [r1, #12]
 80016be:	4383      	bics	r3, r0
 80016c0:	68b0      	ldr	r0, [r6, #8]
 80016c2:	4303      	orrs	r3, r0
 80016c4:	60cb      	str	r3, [r1, #12]
 80016c6:	e7c7      	b.n	8001658 <HAL_RCC_ClockConfig+0x20>
 80016c8:	4d31      	ldr	r5, [pc, #196]	; (8001790 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ca:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016cc:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ce:	2a02      	cmp	r2, #2
 80016d0:	d119      	bne.n	8001706 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016d2:	039b      	lsls	r3, r3, #14
 80016d4:	d5b4      	bpl.n	8001640 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016d6:	2103      	movs	r1, #3
 80016d8:	68eb      	ldr	r3, [r5, #12]
 80016da:	438b      	bics	r3, r1
 80016dc:	4313      	orrs	r3, r2
 80016de:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80016e0:	f7fe ffda 	bl	8000698 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e4:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80016e6:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d119      	bne.n	8001720 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016ec:	220c      	movs	r2, #12
 80016ee:	68eb      	ldr	r3, [r5, #12]
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d0b2      	beq.n	800165c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f6:	f7fe ffcf 	bl	8000698 <HAL_GetTick>
 80016fa:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <HAL_RCC_ClockConfig+0x168>)
 80016fc:	1bc0      	subs	r0, r0, r7
 80016fe:	4298      	cmp	r0, r3
 8001700:	d9f4      	bls.n	80016ec <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8001702:	2003      	movs	r0, #3
 8001704:	e79d      	b.n	8001642 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001706:	2a03      	cmp	r2, #3
 8001708:	d102      	bne.n	8001710 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800170a:	019b      	lsls	r3, r3, #6
 800170c:	d4e3      	bmi.n	80016d6 <HAL_RCC_ClockConfig+0x9e>
 800170e:	e797      	b.n	8001640 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001710:	2a01      	cmp	r2, #1
 8001712:	d102      	bne.n	800171a <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001714:	075b      	lsls	r3, r3, #29
 8001716:	d4de      	bmi.n	80016d6 <HAL_RCC_ClockConfig+0x9e>
 8001718:	e792      	b.n	8001640 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800171a:	059b      	lsls	r3, r3, #22
 800171c:	d4db      	bmi.n	80016d6 <HAL_RCC_ClockConfig+0x9e>
 800171e:	e78f      	b.n	8001640 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001720:	2b03      	cmp	r3, #3
 8001722:	d10b      	bne.n	800173c <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001724:	220c      	movs	r2, #12
 8001726:	68eb      	ldr	r3, [r5, #12]
 8001728:	4013      	ands	r3, r2
 800172a:	4293      	cmp	r3, r2
 800172c:	d096      	beq.n	800165c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172e:	f7fe ffb3 	bl	8000698 <HAL_GetTick>
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <HAL_RCC_ClockConfig+0x168>)
 8001734:	1bc0      	subs	r0, r0, r7
 8001736:	4298      	cmp	r0, r3
 8001738:	d9f4      	bls.n	8001724 <HAL_RCC_ClockConfig+0xec>
 800173a:	e7e2      	b.n	8001702 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800173c:	2b01      	cmp	r3, #1
 800173e:	d010      	beq.n	8001762 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001740:	220c      	movs	r2, #12
 8001742:	68eb      	ldr	r3, [r5, #12]
 8001744:	4213      	tst	r3, r2
 8001746:	d089      	beq.n	800165c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001748:	f7fe ffa6 	bl	8000698 <HAL_GetTick>
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <HAL_RCC_ClockConfig+0x168>)
 800174e:	1bc0      	subs	r0, r0, r7
 8001750:	4298      	cmp	r0, r3
 8001752:	d9f5      	bls.n	8001740 <HAL_RCC_ClockConfig+0x108>
 8001754:	e7d5      	b.n	8001702 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001756:	f7fe ff9f 	bl	8000698 <HAL_GetTick>
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_RCC_ClockConfig+0x168>)
 800175c:	1bc0      	subs	r0, r0, r7
 800175e:	4298      	cmp	r0, r3
 8001760:	d8cf      	bhi.n	8001702 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001762:	220c      	movs	r2, #12
 8001764:	68eb      	ldr	r3, [r5, #12]
 8001766:	4013      	ands	r3, r2
 8001768:	2b04      	cmp	r3, #4
 800176a:	d1f4      	bne.n	8001756 <HAL_RCC_ClockConfig+0x11e>
 800176c:	e776      	b.n	800165c <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	6822      	ldr	r2, [r4, #0]
 8001770:	439a      	bics	r2, r3
 8001772:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001774:	6822      	ldr	r2, [r4, #0]
 8001776:	421a      	tst	r2, r3
 8001778:	d000      	beq.n	800177c <HAL_RCC_ClockConfig+0x144>
 800177a:	e761      	b.n	8001640 <HAL_RCC_ClockConfig+0x8>
 800177c:	e775      	b.n	800166a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800177e:	68e3      	ldr	r3, [r4, #12]
 8001780:	4908      	ldr	r1, [pc, #32]	; (80017a4 <HAL_RCC_ClockConfig+0x16c>)
 8001782:	400b      	ands	r3, r1
 8001784:	68f1      	ldr	r1, [r6, #12]
 8001786:	430b      	orrs	r3, r1
 8001788:	60e3      	str	r3, [r4, #12]
 800178a:	e773      	b.n	8001674 <HAL_RCC_ClockConfig+0x3c>
 800178c:	40022000 	.word	0x40022000
 8001790:	40021000 	.word	0x40021000
 8001794:	ffffc7ff 	.word	0xffffc7ff
 8001798:	08003e18 	.word	0x08003e18
 800179c:	20000558 	.word	0x20000558
 80017a0:	00001388 	.word	0x00001388
 80017a4:	fffff8ff 	.word	0xfffff8ff

080017a8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <HAL_RCC_GetPCLK1Freq+0x14>)
 80017aa:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	055b      	lsls	r3, r3, #21
 80017b0:	0f5b      	lsrs	r3, r3, #29
 80017b2:	5cd3      	ldrb	r3, [r2, r3]
 80017b4:	4a03      	ldr	r2, [pc, #12]	; (80017c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80017b6:	6810      	ldr	r0, [r2, #0]
 80017b8:	40d8      	lsrs	r0, r3
}
 80017ba:	4770      	bx	lr
 80017bc:	40021000 	.word	0x40021000
 80017c0:	08003e28 	.word	0x08003e28
 80017c4:	20000558 	.word	0x20000558

080017c8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <HAL_RCC_GetPCLK2Freq+0x14>)
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	049b      	lsls	r3, r3, #18
 80017d0:	0f5b      	lsrs	r3, r3, #29
 80017d2:	5cd3      	ldrb	r3, [r2, r3]
 80017d4:	4a03      	ldr	r2, [pc, #12]	; (80017e4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80017d6:	6810      	ldr	r0, [r2, #0]
 80017d8:	40d8      	lsrs	r0, r3
}
 80017da:	4770      	bx	lr
 80017dc:	40021000 	.word	0x40021000
 80017e0:	08003e28 	.word	0x08003e28
 80017e4:	20000558 	.word	0x20000558

080017e8 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80017e8:	2382      	movs	r3, #130	; 0x82
{
 80017ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80017ec:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80017ee:	011b      	lsls	r3, r3, #4
{
 80017f0:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80017f2:	421a      	tst	r2, r3
 80017f4:	d047      	beq.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f6:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80017f8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017fa:	4c5f      	ldr	r4, [pc, #380]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80017fc:	055b      	lsls	r3, r3, #21
 80017fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8001800:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001802:	421a      	tst	r2, r3
 8001804:	d104      	bne.n	8001810 <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001808:	4313      	orrs	r3, r2
 800180a:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800180c:	2301      	movs	r3, #1
 800180e:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001810:	2780      	movs	r7, #128	; 0x80
 8001812:	4e5a      	ldr	r6, [pc, #360]	; (800197c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001814:	007f      	lsls	r7, r7, #1
 8001816:	6833      	ldr	r3, [r6, #0]
 8001818:	423b      	tst	r3, r7
 800181a:	d06d      	beq.n	80018f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800181c:	6869      	ldr	r1, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800181e:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001820:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001822:	6823      	ldr	r3, [r4, #0]
 8001824:	0392      	lsls	r2, r2, #14
 8001826:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001828:	4010      	ands	r0, r2
 800182a:	4283      	cmp	r3, r0
 800182c:	d103      	bne.n	8001836 <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800182e:	68a8      	ldr	r0, [r5, #8]
 8001830:	4002      	ands	r2, r0
 8001832:	4293      	cmp	r3, r2
 8001834:	d009      	beq.n	800184a <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001836:	23c0      	movs	r3, #192	; 0xc0
 8001838:	000a      	movs	r2, r1
 800183a:	029b      	lsls	r3, r3, #10
 800183c:	401a      	ands	r2, r3
 800183e:	429a      	cmp	r2, r3
 8001840:	d103      	bne.n	800184a <HAL_RCCEx_PeriphCLKConfig+0x62>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001842:	6823      	ldr	r3, [r4, #0]
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001844:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001846:	039b      	lsls	r3, r3, #14
 8001848:	d466      	bmi.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x130>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800184a:	22c0      	movs	r2, #192	; 0xc0
 800184c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800184e:	0292      	lsls	r2, r2, #10
 8001850:	4013      	ands	r3, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001852:	d162      	bne.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x132>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001854:	6869      	ldr	r1, [r5, #4]
 8001856:	23c0      	movs	r3, #192	; 0xc0
 8001858:	000a      	movs	r2, r1
 800185a:	029b      	lsls	r3, r3, #10
 800185c:	401a      	ands	r2, r3
 800185e:	429a      	cmp	r2, r3
 8001860:	d107      	bne.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	4846      	ldr	r0, [pc, #280]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001866:	4003      	ands	r3, r0
 8001868:	20c0      	movs	r0, #192	; 0xc0
 800186a:	0380      	lsls	r0, r0, #14
 800186c:	4001      	ands	r1, r0
 800186e:	430b      	orrs	r3, r1
 8001870:	6023      	str	r3, [r4, #0]
 8001872:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001874:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001876:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001878:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 800187a:	2b01      	cmp	r3, #1
 800187c:	d103      	bne.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001880:	4a40      	ldr	r2, [pc, #256]	; (8001984 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8001882:	4013      	ands	r3, r2
 8001884:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001886:	682b      	ldr	r3, [r5, #0]
 8001888:	07da      	lsls	r2, r3, #31
 800188a:	d506      	bpl.n	800189a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800188c:	2003      	movs	r0, #3
 800188e:	493a      	ldr	r1, [pc, #232]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001890:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001892:	4382      	bics	r2, r0
 8001894:	68e8      	ldr	r0, [r5, #12]
 8001896:	4302      	orrs	r2, r0
 8001898:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800189a:	079a      	lsls	r2, r3, #30
 800189c:	d506      	bpl.n	80018ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800189e:	200c      	movs	r0, #12
 80018a0:	4935      	ldr	r1, [pc, #212]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80018a2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80018a4:	4382      	bics	r2, r0
 80018a6:	6928      	ldr	r0, [r5, #16]
 80018a8:	4302      	orrs	r2, r0
 80018aa:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80018ac:	075a      	lsls	r2, r3, #29
 80018ae:	d506      	bpl.n	80018be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80018b0:	4931      	ldr	r1, [pc, #196]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80018b2:	4835      	ldr	r0, [pc, #212]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80018b4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80018b6:	4002      	ands	r2, r0
 80018b8:	6968      	ldr	r0, [r5, #20]
 80018ba:	4302      	orrs	r2, r0
 80018bc:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80018be:	071a      	lsls	r2, r3, #28
 80018c0:	d506      	bpl.n	80018d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80018c2:	492d      	ldr	r1, [pc, #180]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80018c4:	4831      	ldr	r0, [pc, #196]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018c6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80018c8:	4002      	ands	r2, r0
 80018ca:	69a8      	ldr	r0, [r5, #24]
 80018cc:	4302      	orrs	r2, r0
 80018ce:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80018d0:	065a      	lsls	r2, r3, #25
 80018d2:	d506      	bpl.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018d4:	4928      	ldr	r1, [pc, #160]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80018d6:	482e      	ldr	r0, [pc, #184]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80018d8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80018da:	4002      	ands	r2, r0
 80018dc:	6a28      	ldr	r0, [r5, #32]
 80018de:	4302      	orrs	r2, r0
 80018e0:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80018e2:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80018e4:	061b      	lsls	r3, r3, #24
 80018e6:	d517      	bpl.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x130>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80018e8:	4a23      	ldr	r2, [pc, #140]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80018ea:	492a      	ldr	r1, [pc, #168]	; (8001994 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80018ec:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80018ee:	400b      	ands	r3, r1
 80018f0:	69e9      	ldr	r1, [r5, #28]
 80018f2:	430b      	orrs	r3, r1
 80018f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f6:	e00f      	b.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x130>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f8:	6833      	ldr	r3, [r6, #0]
 80018fa:	433b      	orrs	r3, r7
 80018fc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80018fe:	f7fe fecb 	bl	8000698 <HAL_GetTick>
 8001902:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001904:	6833      	ldr	r3, [r6, #0]
 8001906:	423b      	tst	r3, r7
 8001908:	d188      	bne.n	800181c <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190a:	f7fe fec5 	bl	8000698 <HAL_GetTick>
 800190e:	9b01      	ldr	r3, [sp, #4]
 8001910:	1ac0      	subs	r0, r0, r3
 8001912:	2864      	cmp	r0, #100	; 0x64
 8001914:	d9f6      	bls.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x11c>
          return HAL_TIMEOUT;
 8001916:	2003      	movs	r0, #3
}
 8001918:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800191a:	4011      	ands	r1, r2
 800191c:	428b      	cmp	r3, r1
 800191e:	d002      	beq.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001920:	6829      	ldr	r1, [r5, #0]
 8001922:	0689      	lsls	r1, r1, #26
 8001924:	d408      	bmi.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x150>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001926:	68a9      	ldr	r1, [r5, #8]
 8001928:	400a      	ands	r2, r1
 800192a:	4293      	cmp	r3, r2
 800192c:	d100      	bne.n	8001930 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800192e:	e791      	b.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x6c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001930:	682b      	ldr	r3, [r5, #0]
 8001932:	051b      	lsls	r3, r3, #20
 8001934:	d400      	bmi.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8001936:	e78d      	b.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001938:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800193a:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800193c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800193e:	0312      	lsls	r2, r2, #12
 8001940:	4302      	orrs	r2, r0
 8001942:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001944:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001948:	4814      	ldr	r0, [pc, #80]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800194a:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800194c:	4002      	ands	r2, r0
 800194e:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8001950:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001952:	05cb      	lsls	r3, r1, #23
 8001954:	d400      	bmi.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8001956:	e77d      	b.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        tickstart = HAL_GetTick();
 8001958:	f7fe fe9e 	bl	8000698 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800195c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800195e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001960:	00bf      	lsls	r7, r7, #2
 8001962:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001964:	423b      	tst	r3, r7
 8001966:	d000      	beq.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001968:	e774      	b.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800196a:	f7fe fe95 	bl	8000698 <HAL_GetTick>
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001970:	1b80      	subs	r0, r0, r6
 8001972:	4298      	cmp	r0, r3
 8001974:	d9f5      	bls.n	8001962 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8001976:	e7ce      	b.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8001978:	40021000 	.word	0x40021000
 800197c:	40007000 	.word	0x40007000
 8001980:	ffcfffff 	.word	0xffcfffff
 8001984:	efffffff 	.word	0xefffffff
 8001988:	fffff3ff 	.word	0xfffff3ff
 800198c:	ffffcfff 	.word	0xffffcfff
 8001990:	fbffffff 	.word	0xfbffffff
 8001994:	fff3ffff 	.word	0xfff3ffff
 8001998:	fffcffff 	.word	0xfffcffff
 800199c:	fff7ffff 	.word	0xfff7ffff
 80019a0:	00001388 	.word	0x00001388

080019a4 <SPI_WaitFlagStateUntilTimeout.constprop.8>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80019a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a6:	0004      	movs	r4, r0
 80019a8:	000d      	movs	r5, r1
 80019aa:	0016      	movs	r6, r2
 80019ac:	001f      	movs	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80019ae:	6822      	ldr	r2, [r4, #0]
 80019b0:	6893      	ldr	r3, [r2, #8]
 80019b2:	402b      	ands	r3, r5
 80019b4:	429d      	cmp	r5, r3
 80019b6:	d001      	beq.n	80019bc <SPI_WaitFlagStateUntilTimeout.constprop.8+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80019b8:	2000      	movs	r0, #0
 80019ba:	e031      	b.n	8001a20 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 80019bc:	1c73      	adds	r3, r6, #1
 80019be:	d0f7      	beq.n	80019b0 <SPI_WaitFlagStateUntilTimeout.constprop.8+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80019c0:	f7fe fe6a 	bl	8000698 <HAL_GetTick>
 80019c4:	1bc0      	subs	r0, r0, r7
 80019c6:	4286      	cmp	r6, r0
 80019c8:	d8f1      	bhi.n	80019ae <SPI_WaitFlagStateUntilTimeout.constprop.8+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80019ca:	21e0      	movs	r1, #224	; 0xe0
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	438a      	bics	r2, r1
 80019d2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019d4:	2282      	movs	r2, #130	; 0x82
 80019d6:	6861      	ldr	r1, [r4, #4]
 80019d8:	0052      	lsls	r2, r2, #1
 80019da:	4291      	cmp	r1, r2
 80019dc:	d10c      	bne.n	80019f8 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x54>
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	68a2      	ldr	r2, [r4, #8]
 80019e2:	0209      	lsls	r1, r1, #8
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d003      	beq.n	80019f0 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x4c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	00c9      	lsls	r1, r1, #3
 80019ec:	428a      	cmp	r2, r1
 80019ee:	d103      	bne.n	80019f8 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x54>
          __HAL_SPI_DISABLE(hspi);
 80019f0:	2140      	movs	r1, #64	; 0x40
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	438a      	bics	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80019fc:	0189      	lsls	r1, r1, #6
 80019fe:	428a      	cmp	r2, r1
 8001a00:	d106      	bne.n	8001a10 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x6c>
          SPI_RESET_CRC(hspi);
 8001a02:	6819      	ldr	r1, [r3, #0]
 8001a04:	4807      	ldr	r0, [pc, #28]	; (8001a24 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x80>)
 8001a06:	4001      	ands	r1, r0
 8001a08:	6019      	str	r1, [r3, #0]
 8001a0a:	6819      	ldr	r1, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001a10:	0023      	movs	r3, r4
 8001a12:	2201      	movs	r2, #1
 8001a14:	3351      	adds	r3, #81	; 0x51
 8001a16:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8001a18:	2300      	movs	r3, #0
 8001a1a:	2003      	movs	r0, #3
 8001a1c:	3450      	adds	r4, #80	; 0x50
 8001a1e:	7023      	strb	r3, [r4, #0]
}
 8001a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	ffffdfff 	.word	0xffffdfff

08001a28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a2a:	0013      	movs	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a2c:	2282      	movs	r2, #130	; 0x82
{
 8001a2e:	0004      	movs	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a30:	6840      	ldr	r0, [r0, #4]
 8001a32:	0052      	lsls	r2, r2, #1
 8001a34:	4290      	cmp	r0, r2
 8001a36:	d11e      	bne.n	8001a76 <SPI_EndRxTransaction+0x4e>
 8001a38:	2080      	movs	r0, #128	; 0x80
 8001a3a:	2580      	movs	r5, #128	; 0x80
 8001a3c:	68a2      	ldr	r2, [r4, #8]
 8001a3e:	0200      	lsls	r0, r0, #8
 8001a40:	00ed      	lsls	r5, r5, #3
 8001a42:	4282      	cmp	r2, r0
 8001a44:	d001      	beq.n	8001a4a <SPI_EndRxTransaction+0x22>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001a46:	42aa      	cmp	r2, r5
 8001a48:	d106      	bne.n	8001a58 <SPI_EndRxTransaction+0x30>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001a4a:	2740      	movs	r7, #64	; 0x40
 8001a4c:	6826      	ldr	r6, [r4, #0]
 8001a4e:	6830      	ldr	r0, [r6, #0]
 8001a50:	43b8      	bics	r0, r7
 8001a52:	6030      	str	r0, [r6, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8001a54:	42aa      	cmp	r2, r5
 8001a56:	d00e      	beq.n	8001a76 <SPI_EndRxTransaction+0x4e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a58:	000a      	movs	r2, r1
 8001a5a:	2180      	movs	r1, #128	; 0x80
 8001a5c:	0020      	movs	r0, r4
 8001a5e:	f7ff ffa1 	bl	80019a4 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 8001a62:	2800      	cmp	r0, #0
 8001a64:	d101      	bne.n	8001a6a <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8001a66:	2000      	movs	r0, #0
}
 8001a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a6a:	2320      	movs	r3, #32
 8001a6c:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001a6e:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a70:	4313      	orrs	r3, r2
 8001a72:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001a74:	e7f8      	b.n	8001a68 <SPI_EndRxTransaction+0x40>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001a76:	000a      	movs	r2, r1
 8001a78:	2101      	movs	r1, #1
 8001a7a:	e7ef      	b.n	8001a5c <SPI_EndRxTransaction+0x34>

08001a7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001a7c:	0013      	movs	r3, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a7e:	2282      	movs	r2, #130	; 0x82
{
 8001a80:	b510      	push	{r4, lr}
 8001a82:	0004      	movs	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a84:	6840      	ldr	r0, [r0, #4]
 8001a86:	0052      	lsls	r2, r2, #1
 8001a88:	4290      	cmp	r0, r2
 8001a8a:	d108      	bne.n	8001a9e <SPI_EndRxTxTransaction+0x22>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a8c:	000a      	movs	r2, r1
 8001a8e:	2180      	movs	r1, #128	; 0x80
 8001a90:	0020      	movs	r0, r4
 8001a92:	f7ff ff87 	bl	80019a4 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 8001a96:	2800      	cmp	r0, #0
 8001a98:	d109      	bne.n	8001aae <SPI_EndRxTxTransaction+0x32>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001a9a:	2000      	movs	r0, #0
}
 8001a9c:	bd10      	pop	{r4, pc}
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8001a9e:	0022      	movs	r2, r4
 8001aa0:	3251      	adds	r2, #81	; 0x51
 8001aa2:	7812      	ldrb	r2, [r2, #0]
 8001aa4:	2a05      	cmp	r2, #5
 8001aa6:	d1f8      	bne.n	8001a9a <SPI_EndRxTxTransaction+0x1e>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001aa8:	000a      	movs	r2, r1
 8001aaa:	2101      	movs	r1, #1
 8001aac:	e7f0      	b.n	8001a90 <SPI_EndRxTxTransaction+0x14>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001aae:	2320      	movs	r3, #32
 8001ab0:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8001ab2:	2003      	movs	r0, #3
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8001ab8:	e7f0      	b.n	8001a9c <SPI_EndRxTxTransaction+0x20>
	...

08001abc <HAL_SPI_Init>:
{
 8001abc:	b570      	push	{r4, r5, r6, lr}
 8001abe:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001ac0:	2001      	movs	r0, #1
  if (hspi == NULL)
 8001ac2:	2c00      	cmp	r4, #0
 8001ac4:	d037      	beq.n	8001b36 <HAL_SPI_Init+0x7a>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac6:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ac8:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aca:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001acc:	3551      	adds	r5, #81	; 0x51
 8001ace:	782b      	ldrb	r3, [r5, #0]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d105      	bne.n	8001ae2 <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8001ad6:	0022      	movs	r2, r4
 8001ad8:	3250      	adds	r2, #80	; 0x50
 8001ada:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8001adc:	0020      	movs	r0, r4
 8001ade:	f001 ffdb 	bl	8003a98 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001ae2:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001ae4:	2240      	movs	r2, #64	; 0x40
 8001ae6:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001ae8:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8001aea:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001aec:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001aee:	4393      	bics	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001af2:	6863      	ldr	r3, [r4, #4]
 8001af4:	69a2      	ldr	r2, [r4, #24]
 8001af6:	4303      	orrs	r3, r0
 8001af8:	68e0      	ldr	r0, [r4, #12]
 8001afa:	4303      	orrs	r3, r0
 8001afc:	6920      	ldr	r0, [r4, #16]
 8001afe:	4303      	orrs	r3, r0
 8001b00:	6960      	ldr	r0, [r4, #20]
 8001b02:	4303      	orrs	r3, r0
 8001b04:	69e0      	ldr	r0, [r4, #28]
 8001b06:	4303      	orrs	r3, r0
 8001b08:	6a20      	ldr	r0, [r4, #32]
 8001b0a:	4303      	orrs	r3, r0
 8001b0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001b0e:	4303      	orrs	r3, r0
 8001b10:	2080      	movs	r0, #128	; 0x80
 8001b12:	0080      	lsls	r0, r0, #2
 8001b14:	4010      	ands	r0, r2
 8001b16:	4303      	orrs	r3, r0
 8001b18:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	0c12      	lsrs	r2, r2, #16
 8001b1e:	401a      	ands	r2, r3
 8001b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b22:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001b24:	431a      	orrs	r2, r3
 8001b26:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b28:	69cb      	ldr	r3, [r1, #28]
 8001b2a:	4a03      	ldr	r2, [pc, #12]	; (8001b38 <HAL_SPI_Init+0x7c>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001b30:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b32:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b34:	702b      	strb	r3, [r5, #0]
}
 8001b36:	bd70      	pop	{r4, r5, r6, pc}
 8001b38:	fffff7ff 	.word	0xfffff7ff

08001b3c <HAL_SPI_Transmit>:
{
 8001b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hspi);
 8001b42:	0003      	movs	r3, r0
 8001b44:	3350      	adds	r3, #80	; 0x50
 8001b46:	9303      	str	r3, [sp, #12]
 8001b48:	781b      	ldrb	r3, [r3, #0]
{
 8001b4a:	0004      	movs	r4, r0
 8001b4c:	000e      	movs	r6, r1
 8001b4e:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8001b50:	2502      	movs	r5, #2
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d079      	beq.n	8001c4a <HAL_SPI_Transmit+0x10e>
 8001b56:	2301      	movs	r3, #1
 8001b58:	9a03      	ldr	r2, [sp, #12]
 8001b5a:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8001b5c:	f7fe fd9c 	bl	8000698 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001b60:	0022      	movs	r2, r4
  tickstart = HAL_GetTick();
 8001b62:	9002      	str	r0, [sp, #8]
  if (hspi->State != HAL_SPI_STATE_READY)
 8001b64:	3251      	adds	r2, #81	; 0x51
 8001b66:	7813      	ldrb	r3, [r2, #0]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d167      	bne.n	8001c3e <HAL_SPI_Transmit+0x102>
    errorcode = HAL_ERROR;
 8001b6e:	001d      	movs	r5, r3
  if ((pData == NULL) || (Size == 0U))
 8001b70:	2e00      	cmp	r6, #0
 8001b72:	d064      	beq.n	8001c3e <HAL_SPI_Transmit+0x102>
 8001b74:	2f00      	cmp	r7, #0
 8001b76:	d062      	beq.n	8001c3e <HAL_SPI_Transmit+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b78:	3302      	adds	r3, #2
 8001b7a:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b80:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001b82:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001b84:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001b86:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001b88:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001b8a:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b90:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001b92:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d105      	bne.n	8001ba6 <HAL_SPI_Transmit+0x6a>
    SPI_1LINE_TX(hspi);
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	6822      	ldr	r2, [r4, #0]
 8001b9e:	01db      	lsls	r3, r3, #7
 8001ba0:	6811      	ldr	r1, [r2, #0]
 8001ba2:	430b      	orrs	r3, r1
 8001ba4:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ba6:	2240      	movs	r2, #64	; 0x40
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	6819      	ldr	r1, [r3, #0]
 8001bac:	4211      	tst	r1, r2
 8001bae:	d102      	bne.n	8001bb6 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8001bb0:	6819      	ldr	r1, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001bb6:	2180      	movs	r1, #128	; 0x80
 8001bb8:	68e0      	ldr	r0, [r4, #12]
 8001bba:	0109      	lsls	r1, r1, #4
 8001bbc:	6862      	ldr	r2, [r4, #4]
 8001bbe:	4288      	cmp	r0, r1
 8001bc0:	d146      	bne.n	8001c50 <HAL_SPI_Transmit+0x114>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bc2:	2a00      	cmp	r2, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_SPI_Transmit+0x8e>
 8001bc6:	2f01      	cmp	r7, #1
 8001bc8:	d107      	bne.n	8001bda <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bca:	8832      	ldrh	r2, [r6, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bcc:	3602      	adds	r6, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bce:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001bd0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bd2:	6326      	str	r6, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	86e3      	strh	r3, [r4, #54]	; 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bda:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8001bdc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d115      	bne.n	8001c0e <HAL_SPI_Transmit+0xd2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001be2:	9a02      	ldr	r2, [sp, #8]
 8001be4:	9901      	ldr	r1, [sp, #4]
 8001be6:	0020      	movs	r0, r4
 8001be8:	f7ff ff48 	bl	8001a7c <SPI_EndRxTxTransaction>
 8001bec:	2800      	cmp	r0, #0
 8001bee:	d159      	bne.n	8001ca4 <HAL_SPI_Transmit+0x168>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001bf0:	68a3      	ldr	r3, [r4, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d106      	bne.n	8001c04 <HAL_SPI_Transmit+0xc8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bf6:	9305      	str	r3, [sp, #20]
 8001bf8:	6823      	ldr	r3, [r4, #0]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	9205      	str	r2, [sp, #20]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	9305      	str	r3, [sp, #20]
 8001c02:	9b05      	ldr	r3, [sp, #20]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c04:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8001c06:	1e6b      	subs	r3, r5, #1
 8001c08:	419d      	sbcs	r5, r3
    errorcode = HAL_BUSY;
 8001c0a:	b2ed      	uxtb	r5, r5
 8001c0c:	e017      	b.n	8001c3e <HAL_SPI_Transmit+0x102>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c0e:	6822      	ldr	r2, [r4, #0]
 8001c10:	6893      	ldr	r3, [r2, #8]
 8001c12:	422b      	tst	r3, r5
 8001c14:	d009      	beq.n	8001c2a <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c18:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c1a:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c1c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c1e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001c20:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001c28:	e7d8      	b.n	8001bdc <HAL_SPI_Transmit+0xa0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c2a:	f7fe fd35 	bl	8000698 <HAL_GetTick>
 8001c2e:	9b02      	ldr	r3, [sp, #8]
 8001c30:	1ac0      	subs	r0, r0, r3
 8001c32:	9b01      	ldr	r3, [sp, #4]
 8001c34:	4298      	cmp	r0, r3
 8001c36:	d3d1      	bcc.n	8001bdc <HAL_SPI_Transmit+0xa0>
 8001c38:	3301      	adds	r3, #1
 8001c3a:	d0cf      	beq.n	8001bdc <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 8001c3c:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	3451      	adds	r4, #81	; 0x51
 8001c42:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 8001c44:	2300      	movs	r3, #0
 8001c46:	9a03      	ldr	r2, [sp, #12]
 8001c48:	7013      	strb	r3, [r2, #0]
}
 8001c4a:	0028      	movs	r0, r5
 8001c4c:	b007      	add	sp, #28
 8001c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c50:	2a00      	cmp	r2, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_SPI_Transmit+0x11c>
 8001c54:	2f01      	cmp	r7, #1
 8001c56:	d108      	bne.n	8001c6a <HAL_SPI_Transmit+0x12e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c58:	7832      	ldrb	r2, [r6, #0]
 8001c5a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c5e:	3301      	adds	r3, #1
 8001c60:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001c62:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c64:	3b01      	subs	r3, #1
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	86e3      	strh	r3, [r4, #54]	; 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c6a:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8001c6c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0b7      	beq.n	8001be2 <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c72:	6823      	ldr	r3, [r4, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	422a      	tst	r2, r5
 8001c78:	d00a      	beq.n	8001c90 <HAL_SPI_Transmit+0x154>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c7c:	7812      	ldrb	r2, [r2, #0]
 8001c7e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c82:	3301      	adds	r3, #1
 8001c84:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001c86:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001c8e:	e7ed      	b.n	8001c6c <HAL_SPI_Transmit+0x130>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c90:	f7fe fd02 	bl	8000698 <HAL_GetTick>
 8001c94:	9b02      	ldr	r3, [sp, #8]
 8001c96:	1ac0      	subs	r0, r0, r3
 8001c98:	9b01      	ldr	r3, [sp, #4]
 8001c9a:	4283      	cmp	r3, r0
 8001c9c:	d8e6      	bhi.n	8001c6c <HAL_SPI_Transmit+0x130>
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	d0e4      	beq.n	8001c6c <HAL_SPI_Transmit+0x130>
 8001ca2:	e7cb      	b.n	8001c3c <HAL_SPI_Transmit+0x100>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ca4:	2320      	movs	r3, #32
 8001ca6:	6563      	str	r3, [r4, #84]	; 0x54
 8001ca8:	e7a2      	b.n	8001bf0 <HAL_SPI_Transmit+0xb4>

08001caa <HAL_SPI_TransmitReceive>:
{
 8001caa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cac:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8001cae:	0003      	movs	r3, r0
{
 8001cb0:	b085      	sub	sp, #20
 8001cb2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 8001cb4:	3350      	adds	r3, #80	; 0x50
 8001cb6:	781a      	ldrb	r2, [r3, #0]
{
 8001cb8:	0004      	movs	r4, r0
 8001cba:	000e      	movs	r6, r1
  __HAL_LOCK(hspi);
 8001cbc:	2502      	movs	r5, #2
 8001cbe:	2a01      	cmp	r2, #1
 8001cc0:	d100      	bne.n	8001cc4 <HAL_SPI_TransmitReceive+0x1a>
 8001cc2:	e09b      	b.n	8001dfc <HAL_SPI_TransmitReceive+0x152>
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001cc8:	f7fe fce6 	bl	8000698 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001ccc:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8001cce:	9000      	str	r0, [sp, #0]
  tmp_state           = hspi->State;
 8001cd0:	3351      	adds	r3, #81	; 0x51
 8001cd2:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001cd4:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8001cd6:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d00b      	beq.n	8001cf4 <HAL_SPI_TransmitReceive+0x4a>
 8001cdc:	2282      	movs	r2, #130	; 0x82
 8001cde:	0052      	lsls	r2, r2, #1
 8001ce0:	4291      	cmp	r1, r2
 8001ce2:	d000      	beq.n	8001ce6 <HAL_SPI_TransmitReceive+0x3c>
 8001ce4:	e083      	b.n	8001dee <HAL_SPI_TransmitReceive+0x144>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001ce6:	68a2      	ldr	r2, [r4, #8]
 8001ce8:	2a00      	cmp	r2, #0
 8001cea:	d000      	beq.n	8001cee <HAL_SPI_TransmitReceive+0x44>
 8001cec:	e07f      	b.n	8001dee <HAL_SPI_TransmitReceive+0x144>
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d000      	beq.n	8001cf4 <HAL_SPI_TransmitReceive+0x4a>
 8001cf2:	e07c      	b.n	8001dee <HAL_SPI_TransmitReceive+0x144>
    errorcode = HAL_ERROR;
 8001cf4:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001cf6:	2e00      	cmp	r6, #0
 8001cf8:	d100      	bne.n	8001cfc <HAL_SPI_TransmitReceive+0x52>
 8001cfa:	e078      	b.n	8001dee <HAL_SPI_TransmitReceive+0x144>
 8001cfc:	9b01      	ldr	r3, [sp, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d075      	beq.n	8001dee <HAL_SPI_TransmitReceive+0x144>
 8001d02:	2f00      	cmp	r7, #0
 8001d04:	d073      	beq.n	8001dee <HAL_SPI_TransmitReceive+0x144>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d06:	0023      	movs	r3, r4
 8001d08:	3351      	adds	r3, #81	; 0x51
 8001d0a:	781a      	ldrb	r2, [r3, #0]
 8001d0c:	2a04      	cmp	r2, #4
 8001d0e:	d001      	beq.n	8001d14 <HAL_SPI_TransmitReceive+0x6a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d10:	2205      	movs	r2, #5
 8001d12:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d14:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d16:	9a01      	ldr	r2, [sp, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d18:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d1a:	63a2      	str	r2, [r4, #56]	; 0x38
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d1c:	2240      	movs	r2, #64	; 0x40
  hspi->RxISR       = NULL;
 8001d1e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d20:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d22:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001d24:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001d26:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d28:	6818      	ldr	r0, [r3, #0]
  hspi->RxXferSize  = Size;
 8001d2a:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d2c:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001d2e:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d30:	4210      	tst	r0, r2
 8001d32:	d102      	bne.n	8001d3a <HAL_SPI_TransmitReceive+0x90>
    __HAL_SPI_ENABLE(hspi);
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	4302      	orrs	r2, r0
 8001d38:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d3a:	2280      	movs	r2, #128	; 0x80
 8001d3c:	68e0      	ldr	r0, [r4, #12]
 8001d3e:	0112      	lsls	r2, r2, #4
 8001d40:	4290      	cmp	r0, r2
 8001d42:	d15e      	bne.n	8001e02 <HAL_SPI_TransmitReceive+0x158>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d44:	2900      	cmp	r1, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_SPI_TransmitReceive+0xa2>
 8001d48:	2f01      	cmp	r7, #1
 8001d4a:	d107      	bne.n	8001d5c <HAL_SPI_TransmitReceive+0xb2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d4c:	8832      	ldrh	r2, [r6, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d4e:	3602      	adds	r6, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d50:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001d52:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d54:	6326      	str	r6, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001d5c:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d5e:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d60:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d62:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d115      	bne.n	8001d94 <HAL_SPI_TransmitReceive+0xea>
 8001d68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d112      	bne.n	8001d94 <HAL_SPI_TransmitReceive+0xea>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d6e:	9a00      	ldr	r2, [sp, #0]
 8001d70:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001d72:	0020      	movs	r0, r4
 8001d74:	f7ff fe82 	bl	8001a7c <SPI_EndRxTxTransaction>
 8001d78:	1e05      	subs	r5, r0, #0
 8001d7a:	d000      	beq.n	8001d7e <HAL_SPI_TransmitReceive+0xd4>
 8001d7c:	e087      	b.n	8001e8e <HAL_SPI_TransmitReceive+0x1e4>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d7e:	68a3      	ldr	r3, [r4, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d134      	bne.n	8001dee <HAL_SPI_TransmitReceive+0x144>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	9003      	str	r0, [sp, #12]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	9203      	str	r2, [sp, #12]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	9303      	str	r3, [sp, #12]
 8001d90:	9b03      	ldr	r3, [sp, #12]
 8001d92:	e02c      	b.n	8001dee <HAL_SPI_TransmitReceive+0x144>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d94:	6822      	ldr	r2, [r4, #0]
 8001d96:	6893      	ldr	r3, [r2, #8]
 8001d98:	423b      	tst	r3, r7
 8001d9a:	d00e      	beq.n	8001dba <HAL_SPI_TransmitReceive+0x110>
 8001d9c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00b      	beq.n	8001dba <HAL_SPI_TransmitReceive+0x110>
 8001da2:	2d01      	cmp	r5, #1
 8001da4:	d109      	bne.n	8001dba <HAL_SPI_TransmitReceive+0x110>
        txallowed = 0U;
 8001da6:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001da8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001daa:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dac:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dae:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001db0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001db2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001dba:	6893      	ldr	r3, [r2, #8]
 8001dbc:	4233      	tst	r3, r6
 8001dbe:	d00c      	beq.n	8001dda <HAL_SPI_TransmitReceive+0x130>
 8001dc0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d009      	beq.n	8001dda <HAL_SPI_TransmitReceive+0x130>
        txallowed = 1U;
 8001dc6:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001dc8:	68d2      	ldr	r2, [r2, #12]
 8001dca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001dcc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001dce:	3302      	adds	r3, #2
 8001dd0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001dd2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001dda:	f7fe fc5d 	bl	8000698 <HAL_GetTick>
 8001dde:	9b00      	ldr	r3, [sp, #0]
 8001de0:	1ac0      	subs	r0, r0, r3
 8001de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001de4:	4283      	cmp	r3, r0
 8001de6:	d8bc      	bhi.n	8001d62 <HAL_SPI_TransmitReceive+0xb8>
 8001de8:	3301      	adds	r3, #1
 8001dea:	d0ba      	beq.n	8001d62 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8001dec:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001dee:	0023      	movs	r3, r4
 8001df0:	2201      	movs	r2, #1
 8001df2:	3351      	adds	r3, #81	; 0x51
 8001df4:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8001df6:	2300      	movs	r3, #0
 8001df8:	3450      	adds	r4, #80	; 0x50
 8001dfa:	7023      	strb	r3, [r4, #0]
}
 8001dfc:	0028      	movs	r0, r5
 8001dfe:	b005      	add	sp, #20
 8001e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e02:	2900      	cmp	r1, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_SPI_TransmitReceive+0x160>
 8001e06:	2f01      	cmp	r7, #1
 8001e08:	d108      	bne.n	8001e1c <HAL_SPI_TransmitReceive+0x172>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e0a:	7832      	ldrb	r2, [r6, #0]
 8001e0c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e10:	3301      	adds	r3, #1
 8001e12:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001e14:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001e1c:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e1e:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e20:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e22:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d102      	bne.n	8001e2e <HAL_SPI_TransmitReceive+0x184>
 8001e28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d09f      	beq.n	8001d6e <HAL_SPI_TransmitReceive+0xc4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	423a      	tst	r2, r7
 8001e34:	d00f      	beq.n	8001e56 <HAL_SPI_TransmitReceive+0x1ac>
 8001e36:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001e38:	2a00      	cmp	r2, #0
 8001e3a:	d00c      	beq.n	8001e56 <HAL_SPI_TransmitReceive+0x1ac>
 8001e3c:	2d01      	cmp	r5, #1
 8001e3e:	d10a      	bne.n	8001e56 <HAL_SPI_TransmitReceive+0x1ac>
        txallowed = 0U;
 8001e40:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001e42:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e44:	7812      	ldrb	r2, [r2, #0]
 8001e46:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8001e48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001e4e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e56:	6823      	ldr	r3, [r4, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	4232      	tst	r2, r6
 8001e5c:	d00d      	beq.n	8001e7a <HAL_SPI_TransmitReceive+0x1d0>
 8001e5e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001e60:	2a00      	cmp	r2, #0
 8001e62:	d00a      	beq.n	8001e7a <HAL_SPI_TransmitReceive+0x1d0>
        txallowed = 1U;
 8001e64:	0035      	movs	r5, r6
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001e6a:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 8001e6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e6e:	3301      	adds	r3, #1
 8001e70:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001e72:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001e7a:	f7fe fc0d 	bl	8000698 <HAL_GetTick>
 8001e7e:	9b00      	ldr	r3, [sp, #0]
 8001e80:	1ac0      	subs	r0, r0, r3
 8001e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e84:	4283      	cmp	r3, r0
 8001e86:	d8cc      	bhi.n	8001e22 <HAL_SPI_TransmitReceive+0x178>
 8001e88:	3301      	adds	r3, #1
 8001e8a:	d0ca      	beq.n	8001e22 <HAL_SPI_TransmitReceive+0x178>
 8001e8c:	e7ae      	b.n	8001dec <HAL_SPI_TransmitReceive+0x142>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e8e:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8001e90:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e92:	6563      	str	r3, [r4, #84]	; 0x54
 8001e94:	e7ab      	b.n	8001dee <HAL_SPI_TransmitReceive+0x144>
	...

08001e98 <HAL_SPI_Receive>:
{
 8001e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e9a:	001e      	movs	r6, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001e9c:	2382      	movs	r3, #130	; 0x82
{
 8001e9e:	0017      	movs	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001ea0:	6842      	ldr	r2, [r0, #4]
{
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	0004      	movs	r4, r0
 8001ea6:	9102      	str	r1, [sp, #8]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d10f      	bne.n	8001ece <HAL_SPI_Receive+0x36>
 8001eae:	6883      	ldr	r3, [r0, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10c      	bne.n	8001ece <HAL_SPI_Receive+0x36>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	3351      	adds	r3, #81	; 0x51
 8001eba:	701a      	strb	r2, [r3, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001ebc:	9600      	str	r6, [sp, #0]
 8001ebe:	003b      	movs	r3, r7
 8001ec0:	000a      	movs	r2, r1
 8001ec2:	f7ff fef2 	bl	8001caa <HAL_SPI_TransmitReceive>
 8001ec6:	0005      	movs	r5, r0
}
 8001ec8:	0028      	movs	r0, r5
 8001eca:	b007      	add	sp, #28
 8001ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8001ece:	0023      	movs	r3, r4
 8001ed0:	3350      	adds	r3, #80	; 0x50
 8001ed2:	9304      	str	r3, [sp, #16]
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2502      	movs	r5, #2
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d0f5      	beq.n	8001ec8 <HAL_SPI_Receive+0x30>
 8001edc:	2301      	movs	r3, #1
 8001ede:	9a04      	ldr	r2, [sp, #16]
 8001ee0:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8001ee2:	f7fe fbd9 	bl	8000698 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001ee6:	0023      	movs	r3, r4
 8001ee8:	3351      	adds	r3, #81	; 0x51
  tickstart = HAL_GetTick();
 8001eea:	9003      	str	r0, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 8001eec:	9305      	str	r3, [sp, #20]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d14f      	bne.n	8001f96 <HAL_SPI_Receive+0xfe>
  if ((pData == NULL) || (Size == 0U))
 8001ef6:	9a02      	ldr	r2, [sp, #8]
    errorcode = HAL_ERROR;
 8001ef8:	001d      	movs	r5, r3
  if ((pData == NULL) || (Size == 0U))
 8001efa:	2a00      	cmp	r2, #0
 8001efc:	d04b      	beq.n	8001f96 <HAL_SPI_Receive+0xfe>
 8001efe:	2f00      	cmp	r7, #0
 8001f00:	d049      	beq.n	8001f96 <HAL_SPI_Receive+0xfe>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001f02:	9a05      	ldr	r2, [sp, #20]
 8001f04:	3303      	adds	r3, #3
 8001f06:	7013      	strb	r3, [r2, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001f08:	9a02      	ldr	r2, [sp, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f0a:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001f0c:	63a2      	str	r2, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	68a1      	ldr	r1, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f12:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001f14:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8001f16:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8001f18:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001f1a:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001f1c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f1e:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxXferSize  = Size;
 8001f20:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f22:	0212      	lsls	r2, r2, #8
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	4291      	cmp	r1, r2
 8001f28:	d103      	bne.n	8001f32 <HAL_SPI_Receive+0x9a>
    SPI_1LINE_RX(hspi);
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	492c      	ldr	r1, [pc, #176]	; (8001fe0 <HAL_SPI_Receive+0x148>)
 8001f2e:	400a      	ands	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f32:	2240      	movs	r2, #64	; 0x40
 8001f34:	6819      	ldr	r1, [r3, #0]
 8001f36:	4211      	tst	r1, r2
 8001f38:	d102      	bne.n	8001f40 <HAL_SPI_Receive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8001f3a:	6819      	ldr	r1, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001f40:	68e3      	ldr	r3, [r4, #12]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f42:	2501      	movs	r5, #1
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d13a      	bne.n	8001fbe <HAL_SPI_Receive+0x126>
    while (hspi->RxXferCount > 0U)
 8001f48:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10b      	bne.n	8001f66 <HAL_SPI_Receive+0xce>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f4e:	9a03      	ldr	r2, [sp, #12]
 8001f50:	0031      	movs	r1, r6
 8001f52:	0020      	movs	r0, r4
 8001f54:	f7ff fd68 	bl	8001a28 <SPI_EndRxTransaction>
 8001f58:	2800      	cmp	r0, #0
 8001f5a:	d13d      	bne.n	8001fd8 <HAL_SPI_Receive+0x140>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f5c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8001f5e:	1e6b      	subs	r3, r5, #1
 8001f60:	419d      	sbcs	r5, r3
    errorcode = HAL_BUSY;
 8001f62:	b2ed      	uxtb	r5, r5
 8001f64:	e017      	b.n	8001f96 <HAL_SPI_Receive+0xfe>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f66:	6823      	ldr	r3, [r4, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	422a      	tst	r2, r5
 8001f6c:	d00a      	beq.n	8001f84 <HAL_SPI_Receive+0xec>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001f6e:	7b1b      	ldrb	r3, [r3, #12]
 8001f70:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001f72:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001f74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f76:	3301      	adds	r3, #1
 8001f78:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001f7a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001f82:	e7e1      	b.n	8001f48 <HAL_SPI_Receive+0xb0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f84:	f7fe fb88 	bl	8000698 <HAL_GetTick>
 8001f88:	9b03      	ldr	r3, [sp, #12]
 8001f8a:	1ac0      	subs	r0, r0, r3
 8001f8c:	4286      	cmp	r6, r0
 8001f8e:	d8db      	bhi.n	8001f48 <HAL_SPI_Receive+0xb0>
 8001f90:	1c73      	adds	r3, r6, #1
 8001f92:	d0d9      	beq.n	8001f48 <HAL_SPI_Receive+0xb0>
          errorcode = HAL_TIMEOUT;
 8001f94:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001f96:	2301      	movs	r3, #1
 8001f98:	9a05      	ldr	r2, [sp, #20]
 8001f9a:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	9a04      	ldr	r2, [sp, #16]
 8001fa0:	7013      	strb	r3, [r2, #0]
  return errorcode;
 8001fa2:	e791      	b.n	8001ec8 <HAL_SPI_Receive+0x30>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001fa4:	6822      	ldr	r2, [r4, #0]
 8001fa6:	6893      	ldr	r3, [r2, #8]
 8001fa8:	422b      	tst	r3, r5
 8001faa:	d00c      	beq.n	8001fc6 <HAL_SPI_Receive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001fac:	68d2      	ldr	r2, [r2, #12]
 8001fae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fb0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001fb6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8001fbe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1ef      	bne.n	8001fa4 <HAL_SPI_Receive+0x10c>
 8001fc4:	e7c3      	b.n	8001f4e <HAL_SPI_Receive+0xb6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fc6:	f7fe fb67 	bl	8000698 <HAL_GetTick>
 8001fca:	9b03      	ldr	r3, [sp, #12]
 8001fcc:	1ac0      	subs	r0, r0, r3
 8001fce:	4286      	cmp	r6, r0
 8001fd0:	d8f5      	bhi.n	8001fbe <HAL_SPI_Receive+0x126>
 8001fd2:	1c73      	adds	r3, r6, #1
 8001fd4:	d0f3      	beq.n	8001fbe <HAL_SPI_Receive+0x126>
 8001fd6:	e7dd      	b.n	8001f94 <HAL_SPI_Receive+0xfc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fd8:	2320      	movs	r3, #32
 8001fda:	6563      	str	r3, [r4, #84]	; 0x54
 8001fdc:	e7be      	b.n	8001f5c <HAL_SPI_Receive+0xc4>
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	ffffbfff 	.word	0xffffbfff

08001fe4 <HAL_SPI_GetState>:
  return hspi->State;
 8001fe4:	3051      	adds	r0, #81	; 0x51
 8001fe6:	7800      	ldrb	r0, [r0, #0]
 8001fe8:	b2c0      	uxtb	r0, r0
}
 8001fea:	4770      	bx	lr

08001fec <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fec:	6803      	ldr	r3, [r0, #0]
 8001fee:	4907      	ldr	r1, [pc, #28]	; (800200c <UART_EndRxTransfer+0x20>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	400a      	ands	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	3123      	adds	r1, #35	; 0x23
 8001ffa:	31ff      	adds	r1, #255	; 0xff
 8001ffc:	438a      	bics	r2, r1
 8001ffe:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002000:	2320      	movs	r3, #32
 8002002:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002004:	2300      	movs	r3, #0
 8002006:	6603      	str	r3, [r0, #96]	; 0x60
}
 8002008:	4770      	bx	lr
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	fffffedf 	.word	0xfffffedf

08002010 <HAL_UART_Receive_DMA>:
{
 8002010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002012:	0013      	movs	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002014:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8002016:	0005      	movs	r5, r0
    return HAL_BUSY;
 8002018:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 800201a:	2a20      	cmp	r2, #32
 800201c:	d137      	bne.n	800208e <HAL_UART_Receive_DMA+0x7e>
      return HAL_ERROR;
 800201e:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002020:	2900      	cmp	r1, #0
 8002022:	d034      	beq.n	800208e <HAL_UART_Receive_DMA+0x7e>
 8002024:	2b00      	cmp	r3, #0
 8002026:	d032      	beq.n	800208e <HAL_UART_Receive_DMA+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002028:	2280      	movs	r2, #128	; 0x80
 800202a:	68ac      	ldr	r4, [r5, #8]
 800202c:	0152      	lsls	r2, r2, #5
 800202e:	4294      	cmp	r4, r2
 8002030:	d104      	bne.n	800203c <HAL_UART_Receive_DMA+0x2c>
 8002032:	692a      	ldr	r2, [r5, #16]
 8002034:	2a00      	cmp	r2, #0
 8002036:	d101      	bne.n	800203c <HAL_UART_Receive_DMA+0x2c>
      if ((((uint32_t)pData) & 1) != 0)
 8002038:	4201      	tst	r1, r0
 800203a:	d128      	bne.n	800208e <HAL_UART_Receive_DMA+0x7e>
    __HAL_LOCK(huart);
 800203c:	002e      	movs	r6, r5
 800203e:	3670      	adds	r6, #112	; 0x70
 8002040:	7832      	ldrb	r2, [r6, #0]
    return HAL_BUSY;
 8002042:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8002044:	2a01      	cmp	r2, #1
 8002046:	d022      	beq.n	800208e <HAL_UART_Receive_DMA+0x7e>
    huart->RxXferSize = Size;
 8002048:	002a      	movs	r2, r5
    __HAL_LOCK(huart);
 800204a:	2401      	movs	r4, #1
    huart->RxXferSize = Size;
 800204c:	3258      	adds	r2, #88	; 0x58
    __HAL_LOCK(huart);
 800204e:	7034      	strb	r4, [r6, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002050:	2700      	movs	r7, #0
    huart->pRxBuffPtr = pData;
 8002052:	6569      	str	r1, [r5, #84]	; 0x54
    huart->RxXferSize = Size;
 8002054:	8013      	strh	r3, [r2, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002056:	2222      	movs	r2, #34	; 0x22
    if (huart->hdmarx != NULL)
 8002058:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800205a:	67ef      	str	r7, [r5, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800205c:	67aa      	str	r2, [r5, #120]	; 0x78
    if (huart->hdmarx != NULL)
 800205e:	42b8      	cmp	r0, r7
 8002060:	d016      	beq.n	8002090 <HAL_UART_Receive_DMA+0x80>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002062:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <HAL_UART_Receive_DMA+0xa4>)
      huart->hdmarx->XferAbortCallback = NULL;
 8002064:	6387      	str	r7, [r0, #56]	; 0x38
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002066:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002068:	4a13      	ldr	r2, [pc, #76]	; (80020b8 <HAL_UART_Receive_DMA+0xa8>)
 800206a:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800206c:	4a13      	ldr	r2, [pc, #76]	; (80020bc <HAL_UART_Receive_DMA+0xac>)
 800206e:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002070:	682a      	ldr	r2, [r5, #0]
 8002072:	3224      	adds	r2, #36	; 0x24
 8002074:	4694      	mov	ip, r2
 8002076:	000a      	movs	r2, r1
 8002078:	4661      	mov	r1, ip
 800207a:	f7fe fbbb 	bl	80007f4 <HAL_DMA_Start_IT>
 800207e:	42b8      	cmp	r0, r7
 8002080:	d006      	beq.n	8002090 <HAL_UART_Receive_DMA+0x80>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002082:	2310      	movs	r3, #16
        return HAL_ERROR;
 8002084:	0020      	movs	r0, r4
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002086:	67eb      	str	r3, [r5, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8002088:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 800208a:	7037      	strb	r7, [r6, #0]
        huart->gState = HAL_UART_STATE_READY;
 800208c:	676b      	str	r3, [r5, #116]	; 0x74
}
 800208e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002090:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(huart);
 8002092:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002094:	682b      	ldr	r3, [r5, #0]
 8002096:	0052      	lsls	r2, r2, #1
 8002098:	6819      	ldr	r1, [r3, #0]
    __HAL_UNLOCK(huart);
 800209a:	7030      	strb	r0, [r6, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800209c:	430a      	orrs	r2, r1
 800209e:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020a0:	2201      	movs	r2, #1
 80020a2:	6899      	ldr	r1, [r3, #8]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020a8:	2240      	movs	r2, #64	; 0x40
 80020aa:	6899      	ldr	r1, [r3, #8]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 80020b0:	e7ed      	b.n	800208e <HAL_UART_Receive_DMA+0x7e>
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	080020c5 	.word	0x080020c5
 80020b8:	08002107 	.word	0x08002107
 80020bc:	08002113 	.word	0x08002113

080020c0 <HAL_UART_TxCpltCallback>:
 80020c0:	4770      	bx	lr
	...

080020c4 <UART_DMAReceiveCplt>:
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80020c4:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80020c6:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80020c8:	2020      	movs	r0, #32
 80020ca:	681b      	ldr	r3, [r3, #0]
{
 80020cc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80020ce:	4003      	ands	r3, r0
 80020d0:	d111      	bne.n	80020f6 <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;
 80020d2:	0011      	movs	r1, r2
 80020d4:	315a      	adds	r1, #90	; 0x5a
 80020d6:	800b      	strh	r3, [r1, #0]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020d8:	6813      	ldr	r3, [r2, #0]
 80020da:	4c09      	ldr	r4, [pc, #36]	; (8002100 <UART_DMAReceiveCplt+0x3c>)
 80020dc:	6819      	ldr	r1, [r3, #0]
 80020de:	4021      	ands	r1, r4
 80020e0:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020e2:	6899      	ldr	r1, [r3, #8]
 80020e4:	3403      	adds	r4, #3
 80020e6:	34ff      	adds	r4, #255	; 0xff
 80020e8:	43a1      	bics	r1, r4
 80020ea:	6099      	str	r1, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020ec:	6899      	ldr	r1, [r3, #8]
 80020ee:	343f      	adds	r4, #63	; 0x3f
 80020f0:	43a1      	bics	r1, r4
 80020f2:	6099      	str	r1, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80020f4:	6790      	str	r0, [r2, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80020f6:	0010      	movs	r0, r2
 80020f8:	f001 f9c2 	bl	8003480 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80020fc:	bd10      	pop	{r4, pc}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	fffffeff 	.word	0xfffffeff

08002104 <HAL_UART_RxHalfCpltCallback>:
 8002104:	4770      	bx	lr

08002106 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002106:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002108:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800210a:	f7ff fffb 	bl	8002104 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800210e:	bd10      	pop	{r4, pc}

08002110 <HAL_UART_ErrorCallback>:
 8002110:	4770      	bx	lr

08002112 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002112:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002114:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002116:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002118:	6f62      	ldr	r2, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800211a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800211c:	6898      	ldr	r0, [r3, #8]
 800211e:	0600      	lsls	r0, r0, #24
 8002120:	d50b      	bpl.n	800213a <UART_DMAError+0x28>
 8002122:	2a21      	cmp	r2, #33	; 0x21
 8002124:	d109      	bne.n	800213a <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002126:	0022      	movs	r2, r4
 8002128:	2000      	movs	r0, #0
 800212a:	3252      	adds	r2, #82	; 0x52
 800212c:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	30c0      	adds	r0, #192	; 0xc0
 8002132:	4382      	bics	r2, r0
 8002134:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002136:	2220      	movs	r2, #32
 8002138:	6762      	str	r2, [r4, #116]	; 0x74
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	065b      	lsls	r3, r3, #25
 800213e:	d508      	bpl.n	8002152 <UART_DMAError+0x40>
 8002140:	2922      	cmp	r1, #34	; 0x22
 8002142:	d106      	bne.n	8002152 <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002144:	0023      	movs	r3, r4
 8002146:	2200      	movs	r2, #0
 8002148:	335a      	adds	r3, #90	; 0x5a
 800214a:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 800214c:	0020      	movs	r0, r4
 800214e:	f7ff ff4d 	bl	8001fec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002152:	2310      	movs	r3, #16
 8002154:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002156:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002158:	4313      	orrs	r3, r2
 800215a:	67e3      	str	r3, [r4, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 800215c:	f7ff ffd8 	bl	8002110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002160:	bd10      	pop	{r4, pc}
	...

08002164 <HAL_UART_IRQHandler>:
{
 8002164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002166:	6803      	ldr	r3, [r0, #0]
{
 8002168:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800216a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800216c:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800216e:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8002170:	0711      	lsls	r1, r2, #28
 8002172:	d10a      	bne.n	800218a <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002174:	2120      	movs	r1, #32
 8002176:	420a      	tst	r2, r1
 8002178:	d100      	bne.n	800217c <HAL_UART_IRQHandler+0x18>
 800217a:	e06a      	b.n	8002252 <HAL_UART_IRQHandler+0xee>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800217c:	4208      	tst	r0, r1
 800217e:	d068      	beq.n	8002252 <HAL_UART_IRQHandler+0xee>
      if (huart->RxISR != NULL)
 8002180:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 8002182:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8002184:	2b00      	cmp	r3, #0
 8002186:	d15a      	bne.n	800223e <HAL_UART_IRQHandler+0xda>
 8002188:	e05a      	b.n	8002240 <HAL_UART_IRQHandler+0xdc>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800218a:	2101      	movs	r1, #1
 800218c:	0035      	movs	r5, r6
 800218e:	400d      	ands	r5, r1
 8002190:	d103      	bne.n	800219a <HAL_UART_IRQHandler+0x36>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002192:	2790      	movs	r7, #144	; 0x90
 8002194:	007f      	lsls	r7, r7, #1
 8002196:	4238      	tst	r0, r7
 8002198:	d05b      	beq.n	8002252 <HAL_UART_IRQHandler+0xee>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800219a:	420a      	tst	r2, r1
 800219c:	d005      	beq.n	80021aa <HAL_UART_IRQHandler+0x46>
 800219e:	05c6      	lsls	r6, r0, #23
 80021a0:	d503      	bpl.n	80021aa <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80021a2:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021a4:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 80021a6:	4331      	orrs	r1, r6
 80021a8:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80021aa:	2102      	movs	r1, #2
 80021ac:	420a      	tst	r2, r1
 80021ae:	d006      	beq.n	80021be <HAL_UART_IRQHandler+0x5a>
 80021b0:	2d00      	cmp	r5, #0
 80021b2:	d004      	beq.n	80021be <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80021b4:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021b6:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 80021b8:	1849      	adds	r1, r1, r1
 80021ba:	4331      	orrs	r1, r6
 80021bc:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80021be:	2104      	movs	r1, #4
 80021c0:	420a      	tst	r2, r1
 80021c2:	d006      	beq.n	80021d2 <HAL_UART_IRQHandler+0x6e>
 80021c4:	2d00      	cmp	r5, #0
 80021c6:	d004      	beq.n	80021d2 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80021c8:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021ca:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 80021cc:	3902      	subs	r1, #2
 80021ce:	4331      	orrs	r1, r6
 80021d0:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80021d2:	0711      	lsls	r1, r2, #28
 80021d4:	d508      	bpl.n	80021e8 <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80021d6:	0681      	lsls	r1, r0, #26
 80021d8:	d401      	bmi.n	80021de <HAL_UART_IRQHandler+0x7a>
 80021da:	2d00      	cmp	r5, #0
 80021dc:	d004      	beq.n	80021e8 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80021de:	2108      	movs	r1, #8
 80021e0:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021e2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80021e4:	4319      	orrs	r1, r3
 80021e6:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021e8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d028      	beq.n	8002240 <HAL_UART_IRQHandler+0xdc>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80021ee:	2320      	movs	r3, #32
 80021f0:	421a      	tst	r2, r3
 80021f2:	d006      	beq.n	8002202 <HAL_UART_IRQHandler+0x9e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80021f4:	4218      	tst	r0, r3
 80021f6:	d004      	beq.n	8002202 <HAL_UART_IRQHandler+0x9e>
        if (huart->RxISR != NULL)
 80021f8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_UART_IRQHandler+0x9e>
          huart->RxISR(huart);
 80021fe:	0020      	movs	r0, r4
 8002200:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002202:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8002204:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002206:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8002208:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800220a:	065b      	lsls	r3, r3, #25
 800220c:	d402      	bmi.n	8002214 <HAL_UART_IRQHandler+0xb0>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800220e:	2308      	movs	r3, #8
 8002210:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002212:	d01a      	beq.n	800224a <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8002214:	f7ff feea 	bl	8001fec <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002218:	2140      	movs	r1, #64	; 0x40
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	420a      	tst	r2, r1
 8002220:	d00f      	beq.n	8002242 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002222:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002224:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002226:	438a      	bics	r2, r1
 8002228:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800222a:	2800      	cmp	r0, #0
 800222c:	d009      	beq.n	8002242 <HAL_UART_IRQHandler+0xde>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800222e:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <HAL_UART_IRQHandler+0x134>)
 8002230:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002232:	f7fe fb1e 	bl	8000872 <HAL_DMA_Abort_IT>
 8002236:	2800      	cmp	r0, #0
 8002238:	d002      	beq.n	8002240 <HAL_UART_IRQHandler+0xdc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800223a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800223c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800223e:	4798      	blx	r3
}
 8002240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8002242:	0020      	movs	r0, r4
 8002244:	f7ff ff64 	bl	8002110 <HAL_UART_ErrorCallback>
 8002248:	e7fa      	b.n	8002240 <HAL_UART_IRQHandler+0xdc>
        HAL_UART_ErrorCallback(huart);
 800224a:	f7ff ff61 	bl	8002110 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800224e:	67e5      	str	r5, [r4, #124]	; 0x7c
 8002250:	e7f6      	b.n	8002240 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002252:	2180      	movs	r1, #128	; 0x80
 8002254:	0349      	lsls	r1, r1, #13
 8002256:	420a      	tst	r2, r1
 8002258:	d006      	beq.n	8002268 <HAL_UART_IRQHandler+0x104>
 800225a:	0275      	lsls	r5, r6, #9
 800225c:	d504      	bpl.n	8002268 <HAL_UART_IRQHandler+0x104>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800225e:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8002260:	0020      	movs	r0, r4
 8002262:	f000 faa7 	bl	80027b4 <HAL_UARTEx_WakeupCallback>
    return;
 8002266:	e7eb      	b.n	8002240 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002268:	2180      	movs	r1, #128	; 0x80
 800226a:	420a      	tst	r2, r1
 800226c:	d003      	beq.n	8002276 <HAL_UART_IRQHandler+0x112>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800226e:	4208      	tst	r0, r1
 8002270:	d001      	beq.n	8002276 <HAL_UART_IRQHandler+0x112>
    if (huart->TxISR != NULL)
 8002272:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002274:	e785      	b.n	8002182 <HAL_UART_IRQHandler+0x1e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002276:	2140      	movs	r1, #64	; 0x40
 8002278:	420a      	tst	r2, r1
 800227a:	d0e1      	beq.n	8002240 <HAL_UART_IRQHandler+0xdc>
 800227c:	4208      	tst	r0, r1
 800227e:	d0df      	beq.n	8002240 <HAL_UART_IRQHandler+0xdc>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002280:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002282:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002284:	438a      	bics	r2, r1
 8002286:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002288:	2320      	movs	r3, #32
 800228a:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800228c:	2300      	movs	r3, #0
 800228e:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8002290:	f7ff ff16 	bl	80020c0 <HAL_UART_TxCpltCallback>
 8002294:	e7d4      	b.n	8002240 <HAL_UART_IRQHandler+0xdc>
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	0800229d 	.word	0x0800229d

0800229c <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800229c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	0002      	movs	r2, r0
{
 80022a2:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 80022a4:	325a      	adds	r2, #90	; 0x5a
 80022a6:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 80022a8:	3a08      	subs	r2, #8
 80022aa:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 80022ac:	f7ff ff30 	bl	8002110 <HAL_UART_ErrorCallback>
}
 80022b0:	bd10      	pop	{r4, pc}
	...

080022b4 <UART_SetConfig>:
{
 80022b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b6:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022b8:	6925      	ldr	r5, [r4, #16]
 80022ba:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80022bc:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022be:	432a      	orrs	r2, r5
 80022c0:	6965      	ldr	r5, [r4, #20]
 80022c2:	69c1      	ldr	r1, [r0, #28]
 80022c4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022c6:	6818      	ldr	r0, [r3, #0]
 80022c8:	4d79      	ldr	r5, [pc, #484]	; (80024b0 <UART_SetConfig+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022ca:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022cc:	4028      	ands	r0, r5
 80022ce:	4302      	orrs	r2, r0
 80022d0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	4877      	ldr	r0, [pc, #476]	; (80024b4 <UART_SetConfig+0x200>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80022d6:	4d78      	ldr	r5, [pc, #480]	; (80024b8 <UART_SetConfig+0x204>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022d8:	4002      	ands	r2, r0
 80022da:	68e0      	ldr	r0, [r4, #12]
 80022dc:	4302      	orrs	r2, r0
 80022de:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022e0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80022e2:	42ab      	cmp	r3, r5
 80022e4:	d001      	beq.n	80022ea <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 80022e6:	6a22      	ldr	r2, [r4, #32]
 80022e8:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	4e73      	ldr	r6, [pc, #460]	; (80024bc <UART_SetConfig+0x208>)
 80022ee:	4032      	ands	r2, r6
 80022f0:	4302      	orrs	r2, r0
 80022f2:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022f4:	4a72      	ldr	r2, [pc, #456]	; (80024c0 <UART_SetConfig+0x20c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d113      	bne.n	8002322 <UART_SetConfig+0x6e>
 80022fa:	2203      	movs	r2, #3
 80022fc:	4b71      	ldr	r3, [pc, #452]	; (80024c4 <UART_SetConfig+0x210>)
 80022fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002300:	4013      	ands	r3, r2
 8002302:	4a71      	ldr	r2, [pc, #452]	; (80024c8 <UART_SetConfig+0x214>)
 8002304:	5cd0      	ldrb	r0, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	4299      	cmp	r1, r3
 800230c:	d000      	beq.n	8002310 <UART_SetConfig+0x5c>
 800230e:	e092      	b.n	8002436 <UART_SetConfig+0x182>
    switch (clocksource)
 8002310:	2808      	cmp	r0, #8
 8002312:	d81e      	bhi.n	8002352 <UART_SetConfig+0x9e>
 8002314:	f7fd ff02 	bl	800011c <__gnu_thumb1_case_uqi>
 8002318:	1d636058 	.word	0x1d636058
 800231c:	1d1d1d84 	.word	0x1d1d1d84
 8002320:	87          	.byte	0x87
 8002321:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002322:	4a6a      	ldr	r2, [pc, #424]	; (80024cc <UART_SetConfig+0x218>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d105      	bne.n	8002334 <UART_SetConfig+0x80>
 8002328:	220c      	movs	r2, #12
 800232a:	4b66      	ldr	r3, [pc, #408]	; (80024c4 <UART_SetConfig+0x210>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232e:	4013      	ands	r3, r2
 8002330:	4a67      	ldr	r2, [pc, #412]	; (80024d0 <UART_SetConfig+0x21c>)
 8002332:	e7e7      	b.n	8002304 <UART_SetConfig+0x50>
 8002334:	42ab      	cmp	r3, r5
 8002336:	d000      	beq.n	800233a <UART_SetConfig+0x86>
 8002338:	e0b3      	b.n	80024a2 <UART_SetConfig+0x1ee>
 800233a:	21c0      	movs	r1, #192	; 0xc0
 800233c:	2080      	movs	r0, #128	; 0x80
 800233e:	4a61      	ldr	r2, [pc, #388]	; (80024c4 <UART_SetConfig+0x210>)
 8002340:	0109      	lsls	r1, r1, #4
 8002342:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002344:	00c0      	lsls	r0, r0, #3
 8002346:	400b      	ands	r3, r1
 8002348:	4283      	cmp	r3, r0
 800234a:	d038      	beq.n	80023be <UART_SetConfig+0x10a>
 800234c:	d803      	bhi.n	8002356 <UART_SetConfig+0xa2>
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <UART_SetConfig+0xb4>
        ret = HAL_ERROR;
 8002352:	2501      	movs	r5, #1
 8002354:	e00d      	b.n	8002372 <UART_SetConfig+0xbe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002356:	2080      	movs	r0, #128	; 0x80
 8002358:	0100      	lsls	r0, r0, #4
 800235a:	4283      	cmp	r3, r0
 800235c:	d00e      	beq.n	800237c <UART_SetConfig+0xc8>
 800235e:	428b      	cmp	r3, r1
 8002360:	d1f7      	bne.n	8002352 <UART_SetConfig+0x9e>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002362:	2080      	movs	r0, #128	; 0x80
 8002364:	0200      	lsls	r0, r0, #8
 8002366:	e00d      	b.n	8002384 <UART_SetConfig+0xd0>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002368:	f7ff fa1e 	bl	80017a8 <HAL_RCC_GetPCLK1Freq>
 800236c:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 800236e:	42a8      	cmp	r0, r5
 8002370:	d108      	bne.n	8002384 <UART_SetConfig+0xd0>
  huart->RxISR = NULL;
 8002372:	2300      	movs	r3, #0
}
 8002374:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 8002376:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002378:	6663      	str	r3, [r4, #100]	; 0x64
}
 800237a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800237c:	6813      	ldr	r3, [r2, #0]
 800237e:	06db      	lsls	r3, r3, #27
 8002380:	d520      	bpl.n	80023c4 <UART_SetConfig+0x110>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8002382:	4854      	ldr	r0, [pc, #336]	; (80024d4 <UART_SetConfig+0x220>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002384:	2203      	movs	r2, #3
 8002386:	6863      	ldr	r3, [r4, #4]
 8002388:	435a      	muls	r2, r3
 800238a:	4282      	cmp	r2, r0
 800238c:	d8e1      	bhi.n	8002352 <UART_SetConfig+0x9e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800238e:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002390:	4282      	cmp	r2, r0
 8002392:	d3de      	bcc.n	8002352 <UART_SetConfig+0x9e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8002394:	2700      	movs	r7, #0
 8002396:	0e02      	lsrs	r2, r0, #24
 8002398:	0201      	lsls	r1, r0, #8
 800239a:	085e      	lsrs	r6, r3, #1
 800239c:	1989      	adds	r1, r1, r6
 800239e:	417a      	adcs	r2, r7
 80023a0:	0008      	movs	r0, r1
 80023a2:	0011      	movs	r1, r2
 80023a4:	001a      	movs	r2, r3
 80023a6:	003b      	movs	r3, r7
 80023a8:	f7fe f838 	bl	800041c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80023ac:	4b4a      	ldr	r3, [pc, #296]	; (80024d8 <UART_SetConfig+0x224>)
 80023ae:	18c2      	adds	r2, r0, r3
 80023b0:	4b4a      	ldr	r3, [pc, #296]	; (80024dc <UART_SetConfig+0x228>)
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d8cd      	bhi.n	8002352 <UART_SetConfig+0x9e>
          huart->Instance->BRR = usartdiv;
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	003d      	movs	r5, r7
 80023ba:	60d8      	str	r0, [r3, #12]
 80023bc:	e7d9      	b.n	8002372 <UART_SetConfig+0xbe>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80023be:	f7fe fe7b 	bl	80010b8 <HAL_RCC_GetSysClockFreq>
        break;
 80023c2:	e7d3      	b.n	800236c <UART_SetConfig+0xb8>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80023c4:	4846      	ldr	r0, [pc, #280]	; (80024e0 <UART_SetConfig+0x22c>)
 80023c6:	e7dd      	b.n	8002384 <UART_SetConfig+0xd0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80023c8:	f7ff f9ee 	bl	80017a8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80023cc:	6863      	ldr	r3, [r4, #4]
 80023ce:	0040      	lsls	r0, r0, #1
 80023d0:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80023d2:	18c0      	adds	r0, r0, r3
 80023d4:	6861      	ldr	r1, [r4, #4]
 80023d6:	e00b      	b.n	80023f0 <UART_SetConfig+0x13c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80023d8:	f7ff f9f6 	bl	80017c8 <HAL_RCC_GetPCLK2Freq>
 80023dc:	e7f6      	b.n	80023cc <UART_SetConfig+0x118>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023de:	2510      	movs	r5, #16
 80023e0:	4b38      	ldr	r3, [pc, #224]	; (80024c4 <UART_SetConfig+0x210>)
 80023e2:	6861      	ldr	r1, [r4, #4]
 80023e4:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80023e6:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023e8:	4015      	ands	r5, r2
 80023ea:	d006      	beq.n	80023fa <UART_SetConfig+0x146>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80023ec:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <UART_SetConfig+0x230>)
 80023ee:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80023f0:	f7fd fe9e 	bl	8000130 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 80023f4:	2500      	movs	r5, #0
 80023f6:	b283      	uxth	r3, r0
        break;
 80023f8:	e004      	b.n	8002404 <UART_SetConfig+0x150>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80023fa:	4b3b      	ldr	r3, [pc, #236]	; (80024e8 <UART_SetConfig+0x234>)
 80023fc:	18c0      	adds	r0, r0, r3
 80023fe:	f7fd fe97 	bl	8000130 <__udivsi3>
 8002402:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002404:	0019      	movs	r1, r3
 8002406:	4839      	ldr	r0, [pc, #228]	; (80024ec <UART_SetConfig+0x238>)
 8002408:	3910      	subs	r1, #16
 800240a:	4281      	cmp	r1, r0
 800240c:	d8a1      	bhi.n	8002352 <UART_SetConfig+0x9e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800240e:	210f      	movs	r1, #15
 8002410:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002412:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002414:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002416:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8002418:	6821      	ldr	r1, [r4, #0]
 800241a:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 800241c:	60cb      	str	r3, [r1, #12]
 800241e:	e7a8      	b.n	8002372 <UART_SetConfig+0xbe>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002420:	f7fe fe4a 	bl	80010b8 <HAL_RCC_GetSysClockFreq>
 8002424:	e7d2      	b.n	80023cc <UART_SetConfig+0x118>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002426:	6863      	ldr	r3, [r4, #4]
 8002428:	0858      	lsrs	r0, r3, #1
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	025b      	lsls	r3, r3, #9
 800242e:	e7d0      	b.n	80023d2 <UART_SetConfig+0x11e>
        ret = HAL_ERROR;
 8002430:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002432:	2300      	movs	r3, #0
 8002434:	e7e6      	b.n	8002404 <UART_SetConfig+0x150>
    switch (clocksource)
 8002436:	2808      	cmp	r0, #8
 8002438:	d837      	bhi.n	80024aa <UART_SetConfig+0x1f6>
 800243a:	f7fd fe6f 	bl	800011c <__gnu_thumb1_case_uqi>
 800243e:	0c05      	.short	0x0c05
 8002440:	362a360f 	.word	0x362a360f
 8002444:	3636      	.short	0x3636
 8002446:	2d          	.byte	0x2d
 8002447:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002448:	f7ff f9ae 	bl	80017a8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800244c:	6863      	ldr	r3, [r4, #4]
 800244e:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002450:	18c0      	adds	r0, r0, r3
 8002452:	6861      	ldr	r1, [r4, #4]
 8002454:	e00b      	b.n	800246e <UART_SetConfig+0x1ba>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002456:	f7ff f9b7 	bl	80017c8 <HAL_RCC_GetPCLK2Freq>
 800245a:	e7f7      	b.n	800244c <UART_SetConfig+0x198>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800245c:	2510      	movs	r5, #16
 800245e:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <UART_SetConfig+0x210>)
 8002460:	6861      	ldr	r1, [r4, #4]
 8002462:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002464:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002466:	4015      	ands	r5, r2
 8002468:	d00d      	beq.n	8002486 <UART_SetConfig+0x1d2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800246a:	4b1a      	ldr	r3, [pc, #104]	; (80024d4 <UART_SetConfig+0x220>)
 800246c:	18c0      	adds	r0, r0, r3
 800246e:	f7fd fe5f 	bl	8000130 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8002472:	2500      	movs	r5, #0
 8002474:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002476:	0019      	movs	r1, r3
 8002478:	481c      	ldr	r0, [pc, #112]	; (80024ec <UART_SetConfig+0x238>)
 800247a:	3910      	subs	r1, #16
 800247c:	4281      	cmp	r1, r0
 800247e:	d900      	bls.n	8002482 <UART_SetConfig+0x1ce>
 8002480:	e767      	b.n	8002352 <UART_SetConfig+0x9e>
      huart->Instance->BRR = usartdiv;
 8002482:	6821      	ldr	r1, [r4, #0]
 8002484:	e7ca      	b.n	800241c <UART_SetConfig+0x168>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002486:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <UART_SetConfig+0x22c>)
 8002488:	18c0      	adds	r0, r0, r3
 800248a:	f7fd fe51 	bl	8000130 <__udivsi3>
 800248e:	b283      	uxth	r3, r0
 8002490:	e7f1      	b.n	8002476 <UART_SetConfig+0x1c2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002492:	f7fe fe11 	bl	80010b8 <HAL_RCC_GetSysClockFreq>
 8002496:	e7d9      	b.n	800244c <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002498:	6863      	ldr	r3, [r4, #4]
 800249a:	0858      	lsrs	r0, r3, #1
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	e7d6      	b.n	8002450 <UART_SetConfig+0x19c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	4299      	cmp	r1, r3
 80024a8:	d0c2      	beq.n	8002430 <UART_SetConfig+0x17c>
        ret = HAL_ERROR;
 80024aa:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	e7e2      	b.n	8002476 <UART_SetConfig+0x1c2>
 80024b0:	efff69f3 	.word	0xefff69f3
 80024b4:	ffffcfff 	.word	0xffffcfff
 80024b8:	40004800 	.word	0x40004800
 80024bc:	fffff4ff 	.word	0xfffff4ff
 80024c0:	40013800 	.word	0x40013800
 80024c4:	40021000 	.word	0x40021000
 80024c8:	08003dae 	.word	0x08003dae
 80024cc:	40004400 	.word	0x40004400
 80024d0:	08003db2 	.word	0x08003db2
 80024d4:	003d0900 	.word	0x003d0900
 80024d8:	fffffd00 	.word	0xfffffd00
 80024dc:	000ffcff 	.word	0x000ffcff
 80024e0:	00f42400 	.word	0x00f42400
 80024e4:	007a1200 	.word	0x007a1200
 80024e8:	01e84800 	.word	0x01e84800
 80024ec:	0000ffef 	.word	0x0000ffef

080024f0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80024f2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024f4:	07da      	lsls	r2, r3, #31
 80024f6:	d506      	bpl.n	8002506 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80024f8:	6801      	ldr	r1, [r0, #0]
 80024fa:	4c28      	ldr	r4, [pc, #160]	; (800259c <UART_AdvFeatureConfig+0xac>)
 80024fc:	684a      	ldr	r2, [r1, #4]
 80024fe:	4022      	ands	r2, r4
 8002500:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002502:	4322      	orrs	r2, r4
 8002504:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002506:	079a      	lsls	r2, r3, #30
 8002508:	d506      	bpl.n	8002518 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800250a:	6801      	ldr	r1, [r0, #0]
 800250c:	4c24      	ldr	r4, [pc, #144]	; (80025a0 <UART_AdvFeatureConfig+0xb0>)
 800250e:	684a      	ldr	r2, [r1, #4]
 8002510:	4022      	ands	r2, r4
 8002512:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002514:	4322      	orrs	r2, r4
 8002516:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002518:	075a      	lsls	r2, r3, #29
 800251a:	d506      	bpl.n	800252a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800251c:	6801      	ldr	r1, [r0, #0]
 800251e:	4c21      	ldr	r4, [pc, #132]	; (80025a4 <UART_AdvFeatureConfig+0xb4>)
 8002520:	684a      	ldr	r2, [r1, #4]
 8002522:	4022      	ands	r2, r4
 8002524:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002526:	4322      	orrs	r2, r4
 8002528:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800252a:	071a      	lsls	r2, r3, #28
 800252c:	d506      	bpl.n	800253c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800252e:	6801      	ldr	r1, [r0, #0]
 8002530:	4c1d      	ldr	r4, [pc, #116]	; (80025a8 <UART_AdvFeatureConfig+0xb8>)
 8002532:	684a      	ldr	r2, [r1, #4]
 8002534:	4022      	ands	r2, r4
 8002536:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002538:	4322      	orrs	r2, r4
 800253a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800253c:	06da      	lsls	r2, r3, #27
 800253e:	d506      	bpl.n	800254e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002540:	6801      	ldr	r1, [r0, #0]
 8002542:	4c1a      	ldr	r4, [pc, #104]	; (80025ac <UART_AdvFeatureConfig+0xbc>)
 8002544:	688a      	ldr	r2, [r1, #8]
 8002546:	4022      	ands	r2, r4
 8002548:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800254a:	4322      	orrs	r2, r4
 800254c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800254e:	069a      	lsls	r2, r3, #26
 8002550:	d506      	bpl.n	8002560 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002552:	6801      	ldr	r1, [r0, #0]
 8002554:	4c16      	ldr	r4, [pc, #88]	; (80025b0 <UART_AdvFeatureConfig+0xc0>)
 8002556:	688a      	ldr	r2, [r1, #8]
 8002558:	4022      	ands	r2, r4
 800255a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800255c:	4322      	orrs	r2, r4
 800255e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002560:	065a      	lsls	r2, r3, #25
 8002562:	d510      	bpl.n	8002586 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002564:	6801      	ldr	r1, [r0, #0]
 8002566:	4d13      	ldr	r5, [pc, #76]	; (80025b4 <UART_AdvFeatureConfig+0xc4>)
 8002568:	684a      	ldr	r2, [r1, #4]
 800256a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800256c:	402a      	ands	r2, r5
 800256e:	4322      	orrs	r2, r4
 8002570:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002572:	2280      	movs	r2, #128	; 0x80
 8002574:	0352      	lsls	r2, r2, #13
 8002576:	4294      	cmp	r4, r2
 8002578:	d105      	bne.n	8002586 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800257a:	684a      	ldr	r2, [r1, #4]
 800257c:	4c0e      	ldr	r4, [pc, #56]	; (80025b8 <UART_AdvFeatureConfig+0xc8>)
 800257e:	4022      	ands	r2, r4
 8002580:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002582:	4322      	orrs	r2, r4
 8002584:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002586:	061b      	lsls	r3, r3, #24
 8002588:	d506      	bpl.n	8002598 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800258a:	6802      	ldr	r2, [r0, #0]
 800258c:	490b      	ldr	r1, [pc, #44]	; (80025bc <UART_AdvFeatureConfig+0xcc>)
 800258e:	6853      	ldr	r3, [r2, #4]
 8002590:	400b      	ands	r3, r1
 8002592:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002594:	430b      	orrs	r3, r1
 8002596:	6053      	str	r3, [r2, #4]
}
 8002598:	bd30      	pop	{r4, r5, pc}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	fffdffff 	.word	0xfffdffff
 80025a0:	fffeffff 	.word	0xfffeffff
 80025a4:	fffbffff 	.word	0xfffbffff
 80025a8:	ffff7fff 	.word	0xffff7fff
 80025ac:	ffffefff 	.word	0xffffefff
 80025b0:	ffffdfff 	.word	0xffffdfff
 80025b4:	ffefffff 	.word	0xffefffff
 80025b8:	ff9fffff 	.word	0xff9fffff
 80025bc:	fff7ffff 	.word	0xfff7ffff

080025c0 <UART_WaitOnFlagUntilTimeout>:
{
 80025c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c2:	0004      	movs	r4, r0
 80025c4:	000e      	movs	r6, r1
 80025c6:	0015      	movs	r5, r2
 80025c8:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ca:	6822      	ldr	r2, [r4, #0]
 80025cc:	69d3      	ldr	r3, [r2, #28]
 80025ce:	4033      	ands	r3, r6
 80025d0:	1b9b      	subs	r3, r3, r6
 80025d2:	4259      	negs	r1, r3
 80025d4:	414b      	adcs	r3, r1
 80025d6:	42ab      	cmp	r3, r5
 80025d8:	d001      	beq.n	80025de <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80025da:	2000      	movs	r0, #0
 80025dc:	e01b      	b.n	8002616 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 80025de:	9b06      	ldr	r3, [sp, #24]
 80025e0:	3301      	adds	r3, #1
 80025e2:	d0f3      	beq.n	80025cc <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e4:	f7fe f858 	bl	8000698 <HAL_GetTick>
 80025e8:	9b06      	ldr	r3, [sp, #24]
 80025ea:	1bc0      	subs	r0, r0, r7
 80025ec:	4283      	cmp	r3, r0
 80025ee:	d301      	bcc.n	80025f4 <UART_WaitOnFlagUntilTimeout+0x34>
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1ea      	bne.n	80025ca <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025f4:	6823      	ldr	r3, [r4, #0]
 80025f6:	4908      	ldr	r1, [pc, #32]	; (8002618 <UART_WaitOnFlagUntilTimeout+0x58>)
 80025f8:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 80025fa:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025fc:	400a      	ands	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	31a3      	adds	r1, #163	; 0xa3
 8002604:	31ff      	adds	r1, #255	; 0xff
 8002606:	438a      	bics	r2, r1
 8002608:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800260a:	2320      	movs	r3, #32
 800260c:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800260e:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8002610:	2300      	movs	r3, #0
 8002612:	3470      	adds	r4, #112	; 0x70
 8002614:	7023      	strb	r3, [r4, #0]
}
 8002616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002618:	fffffe5f 	.word	0xfffffe5f

0800261c <HAL_UART_Transmit>:
{
 800261c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800261e:	b087      	sub	sp, #28
 8002620:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8002622:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8002624:	0004      	movs	r4, r0
 8002626:	000d      	movs	r5, r1
 8002628:	0017      	movs	r7, r2
    return HAL_BUSY;
 800262a:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800262c:	2b20      	cmp	r3, #32
 800262e:	d149      	bne.n	80026c4 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8002630:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002632:	2900      	cmp	r1, #0
 8002634:	d046      	beq.n	80026c4 <HAL_UART_Transmit+0xa8>
 8002636:	2a00      	cmp	r2, #0
 8002638:	d044      	beq.n	80026c4 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	68a2      	ldr	r2, [r4, #8]
 800263e:	015b      	lsls	r3, r3, #5
 8002640:	429a      	cmp	r2, r3
 8002642:	d104      	bne.n	800264e <HAL_UART_Transmit+0x32>
 8002644:	6923      	ldr	r3, [r4, #16]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 800264a:	4201      	tst	r1, r0
 800264c:	d13a      	bne.n	80026c4 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 800264e:	0023      	movs	r3, r4
 8002650:	3370      	adds	r3, #112	; 0x70
 8002652:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8002654:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8002656:	2a01      	cmp	r2, #1
 8002658:	d034      	beq.n	80026c4 <HAL_UART_Transmit+0xa8>
 800265a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265c:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 800265e:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002660:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002662:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002664:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 8002666:	f7fe f817 	bl	8000698 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800266a:	0023      	movs	r3, r4
 800266c:	3350      	adds	r3, #80	; 0x50
 800266e:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8002670:	3302      	adds	r3, #2
 8002672:	9303      	str	r3, [sp, #12]
 8002674:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800267a:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800267c:	015b      	lsls	r3, r3, #5
 800267e:	429a      	cmp	r2, r3
 8002680:	d104      	bne.n	800268c <HAL_UART_Transmit+0x70>
 8002682:	6923      	ldr	r3, [r4, #16]
 8002684:	42b3      	cmp	r3, r6
 8002686:	d101      	bne.n	800268c <HAL_UART_Transmit+0x70>
 8002688:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800268a:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 800268c:	0023      	movs	r3, r4
 800268e:	3352      	adds	r3, #82	; 0x52
 8002690:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002692:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8002694:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 800269a:	2a00      	cmp	r2, #0
 800269c:	d10a      	bne.n	80026b4 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800269e:	2140      	movs	r1, #64	; 0x40
 80026a0:	0020      	movs	r0, r4
 80026a2:	f7ff ff8d 	bl	80025c0 <UART_WaitOnFlagUntilTimeout>
 80026a6:	2800      	cmp	r0, #0
 80026a8:	d10b      	bne.n	80026c2 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 80026aa:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80026ac:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 80026ae:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 80026b0:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80026b2:	e007      	b.n	80026c4 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026b4:	2200      	movs	r2, #0
 80026b6:	2180      	movs	r1, #128	; 0x80
 80026b8:	0020      	movs	r0, r4
 80026ba:	f7ff ff81 	bl	80025c0 <UART_WaitOnFlagUntilTimeout>
 80026be:	2800      	cmp	r0, #0
 80026c0:	d002      	beq.n	80026c8 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 80026c2:	2003      	movs	r0, #3
}
 80026c4:	b007      	add	sp, #28
 80026c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026c8:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80026ca:	2d00      	cmp	r5, #0
 80026cc:	d10b      	bne.n	80026e6 <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026ce:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80026d0:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026d2:	05db      	lsls	r3, r3, #23
 80026d4:	0ddb      	lsrs	r3, r3, #23
 80026d6:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80026d8:	9b03      	ldr	r3, [sp, #12]
 80026da:	9a03      	ldr	r2, [sp, #12]
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	8013      	strh	r3, [r2, #0]
 80026e4:	e7d2      	b.n	800268c <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026e6:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80026e8:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026ea:	6293      	str	r3, [r2, #40]	; 0x28
 80026ec:	e7f4      	b.n	80026d8 <HAL_UART_Transmit+0xbc>
	...

080026f0 <UART_CheckIdleState>:
{
 80026f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f2:	2600      	movs	r6, #0
{
 80026f4:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f6:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80026f8:	f7fd ffce 	bl	8000698 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026fc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80026fe:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	071b      	lsls	r3, r3, #28
 8002704:	d415      	bmi.n	8002732 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002706:	6823      	ldr	r3, [r4, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	075b      	lsls	r3, r3, #29
 800270c:	d50a      	bpl.n	8002724 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800270e:	2180      	movs	r1, #128	; 0x80
 8002710:	4b0e      	ldr	r3, [pc, #56]	; (800274c <UART_CheckIdleState+0x5c>)
 8002712:	2200      	movs	r2, #0
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	03c9      	lsls	r1, r1, #15
 8002718:	002b      	movs	r3, r5
 800271a:	0020      	movs	r0, r4
 800271c:	f7ff ff50 	bl	80025c0 <UART_WaitOnFlagUntilTimeout>
 8002720:	2800      	cmp	r0, #0
 8002722:	d111      	bne.n	8002748 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8002724:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002726:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002728:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800272a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800272c:	3470      	adds	r4, #112	; 0x70
 800272e:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8002730:	e00b      	b.n	800274a <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002732:	2180      	movs	r1, #128	; 0x80
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <UART_CheckIdleState+0x5c>)
 8002736:	0032      	movs	r2, r6
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	0389      	lsls	r1, r1, #14
 800273c:	0003      	movs	r3, r0
 800273e:	0020      	movs	r0, r4
 8002740:	f7ff ff3e 	bl	80025c0 <UART_WaitOnFlagUntilTimeout>
 8002744:	2800      	cmp	r0, #0
 8002746:	d0de      	beq.n	8002706 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002748:	2003      	movs	r0, #3
}
 800274a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800274c:	01ffffff 	.word	0x01ffffff

08002750 <HAL_UART_Init>:
{
 8002750:	b510      	push	{r4, lr}
 8002752:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002754:	d101      	bne.n	800275a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002756:	2001      	movs	r0, #1
}
 8002758:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800275a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800275c:	2b00      	cmp	r3, #0
 800275e:	d104      	bne.n	800276a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002760:	0002      	movs	r2, r0
 8002762:	3270      	adds	r2, #112	; 0x70
 8002764:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002766:	f001 f9e1 	bl	8003b2c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800276a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800276c:	2101      	movs	r1, #1
 800276e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002770:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002772:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002774:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002776:	438b      	bics	r3, r1
 8002778:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800277a:	f7ff fd9b 	bl	80022b4 <UART_SetConfig>
 800277e:	2801      	cmp	r0, #1
 8002780:	d0e9      	beq.n	8002756 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8002788:	0020      	movs	r0, r4
 800278a:	f7ff feb1 	bl	80024f0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	4907      	ldr	r1, [pc, #28]	; (80027b0 <HAL_UART_Init+0x60>)
 8002792:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002794:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002796:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002798:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800279a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	438a      	bics	r2, r1
 80027a0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80027a2:	2201      	movs	r2, #1
 80027a4:	6819      	ldr	r1, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80027aa:	f7ff ffa1 	bl	80026f0 <UART_CheckIdleState>
 80027ae:	e7d3      	b.n	8002758 <HAL_UART_Init+0x8>
 80027b0:	ffffb7ff 	.word	0xffffb7ff

080027b4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80027b4:	4770      	bx	lr
	...

080027b8 <GPS_INIT>:
uint8_t GPS_10HZ[] = "$PMTK220,100*2F\r\n";
uint8_t GPS_01HZ[] = "$PMTK220,10000*2F\r\n";
uint8_t GPS_STANDBY[] = "$PMTK161,0*28\r\n";

void GPS_INIT(void)
{
 80027b8:	b570      	push	{r4, r5, r6, lr}
	  HAL_UART_Transmit(&huart1, GPS_BAUDRATE, sizeof(GPS_BAUDRATE), 1000); //set baud rate
 80027ba:	25fa      	movs	r5, #250	; 0xfa
 80027bc:	4c0a      	ldr	r4, [pc, #40]	; (80027e8 <GPS_INIT+0x30>)
 80027be:	00ad      	lsls	r5, r5, #2
 80027c0:	002b      	movs	r3, r5
 80027c2:	2213      	movs	r2, #19
 80027c4:	4909      	ldr	r1, [pc, #36]	; (80027ec <GPS_INIT+0x34>)
 80027c6:	0020      	movs	r0, r4
 80027c8:	f7ff ff28 	bl	800261c <HAL_UART_Transmit>
	  //HAL_UART_Transmit(&huart1, GPS_FIXRATE, sizeof(GPS_FIXRATE), 1000); //set fix rate
	  HAL_UART_Transmit(&huart1, GPS_01HZ, sizeof(GPS_01HZ), 1000); //set frequency
 80027cc:	002b      	movs	r3, r5
 80027ce:	2214      	movs	r2, #20
 80027d0:	4907      	ldr	r1, [pc, #28]	; (80027f0 <GPS_INIT+0x38>)
 80027d2:	0020      	movs	r0, r4
 80027d4:	f7ff ff22 	bl	800261c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, GPS_GGA, sizeof(GPS_GGA), 1000); //set sentence format
 80027d8:	002b      	movs	r3, r5
 80027da:	2234      	movs	r2, #52	; 0x34
 80027dc:	4905      	ldr	r1, [pc, #20]	; (80027f4 <GPS_INIT+0x3c>)
 80027de:	0020      	movs	r0, r4
 80027e0:	f7ff ff1c 	bl	800261c <HAL_UART_Transmit>
}
 80027e4:	bd70      	pop	{r4, r5, r6, pc}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	2000075c 	.word	0x2000075c
 80027ec:	20000014 	.word	0x20000014
 80027f0:	20000000 	.word	0x20000000
 80027f4:	20000027 	.word	0x20000027

080027f8 <parseData>:

uint8_t parseData(void)
{
 80027f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char string[7];
	int commaCnt = 0;
	int i = 0;
	int j = 0;

	memcpy(string, data, 6);
 80027fa:	4933      	ldr	r1, [pc, #204]	; (80028c8 <parseData+0xd0>)
 80027fc:	2206      	movs	r2, #6
 80027fe:	4668      	mov	r0, sp
 8002800:	f001 fa86 	bl	8003d10 <memcpy>

	if(!strcmp(string, "$GPGGA"))
 8002804:	4931      	ldr	r1, [pc, #196]	; (80028cc <parseData+0xd4>)
 8002806:	4668      	mov	r0, sp
 8002808:	f7fd fc7e 	bl	8000108 <strcmp>
 800280c:	2800      	cmp	r0, #0
 800280e:	d001      	beq.n	8002814 <parseData+0x1c>
		}

	}
	else
	{
		return 0;
 8002810:	2000      	movs	r0, #0
	strcat(sendMeasurements, longDir);
	strcat(sendMeasurements, ",");
	strcat(sendMeasurements, fix);

	return 1;
}
 8002812:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if(!strcmp(string, "$GPGGA"))
 8002814:	0003      	movs	r3, r0
 8002816:	492e      	ldr	r1, [pc, #184]	; (80028d0 <parseData+0xd8>)
					longDir[j] = data[i];
 8002818:	4d2e      	ldr	r5, [pc, #184]	; (80028d4 <parseData+0xdc>)
					longitude[j] = data[i];
 800281a:	4e2f      	ldr	r6, [pc, #188]	; (80028d8 <parseData+0xe0>)
					latDir[j] = data[i];
 800281c:	4f2f      	ldr	r7, [pc, #188]	; (80028dc <parseData+0xe4>)
		while(data[i] != '\n')
 800281e:	780a      	ldrb	r2, [r1, #0]
 8002820:	2a0a      	cmp	r2, #10
 8002822:	d01c      	beq.n	800285e <parseData+0x66>
			if (data[i] == ',')
 8002824:	2a2c      	cmp	r2, #44	; 0x2c
 8002826:	d103      	bne.n	8002830 <parseData+0x38>
				j = 0; //reset counter for parsing
 8002828:	2000      	movs	r0, #0
				commaCnt++; //increase number of commas found
 800282a:	3301      	adds	r3, #1
 800282c:	3101      	adds	r1, #1
 800282e:	e7f6      	b.n	800281e <parseData+0x26>
					latitude[j] = data[i];
 8002830:	4c2b      	ldr	r4, [pc, #172]	; (80028e0 <parseData+0xe8>)
				if(commaCnt == 2) //latitude
 8002832:	2b02      	cmp	r3, #2
 8002834:	d00f      	beq.n	8002856 <parseData+0x5e>
				else if(commaCnt == 3) //latitude direction
 8002836:	2b03      	cmp	r3, #3
 8002838:	d102      	bne.n	8002840 <parseData+0x48>
					latDir[j] = data[i];
 800283a:	543a      	strb	r2, [r7, r0]
					j++;
 800283c:	3001      	adds	r0, #1
 800283e:	e7f5      	b.n	800282c <parseData+0x34>
				else if(commaCnt == 4) //longitude
 8002840:	2b04      	cmp	r3, #4
 8002842:	d101      	bne.n	8002848 <parseData+0x50>
					longitude[j] = data[i];
 8002844:	5432      	strb	r2, [r6, r0]
 8002846:	e7f9      	b.n	800283c <parseData+0x44>
				else if(commaCnt == 5) //longitude direction
 8002848:	2b05      	cmp	r3, #5
 800284a:	d101      	bne.n	8002850 <parseData+0x58>
					longDir[j] = data[i];
 800284c:	542a      	strb	r2, [r5, r0]
 800284e:	e7f5      	b.n	800283c <parseData+0x44>
				else if(commaCnt == 6)
 8002850:	2b06      	cmp	r3, #6
 8002852:	d102      	bne.n	800285a <parseData+0x62>
					fix[j] = data[i];
 8002854:	4c23      	ldr	r4, [pc, #140]	; (80028e4 <parseData+0xec>)
 8002856:	5422      	strb	r2, [r4, r0]
 8002858:	e7f0      	b.n	800283c <parseData+0x44>
				else if (commaCnt >= 7)
 800285a:	2b06      	cmp	r3, #6
 800285c:	dde6      	ble.n	800282c <parseData+0x34>
		if(fix[0] == '0') //no fix
 800285e:	4e21      	ldr	r6, [pc, #132]	; (80028e4 <parseData+0xec>)
 8002860:	7833      	ldrb	r3, [r6, #0]
 8002862:	2b30      	cmp	r3, #48	; 0x30
 8002864:	d0d4      	beq.n	8002810 <parseData+0x18>
	latitude[9] = '\0';
 8002866:	2300      	movs	r3, #0
	longitude[10] = '\0';
 8002868:	4a1b      	ldr	r2, [pc, #108]	; (80028d8 <parseData+0xe0>)
	strcpy(sendMeasurements, latitude);
 800286a:	4c1f      	ldr	r4, [pc, #124]	; (80028e8 <parseData+0xf0>)
	longitude[10] = '\0';
 800286c:	7293      	strb	r3, [r2, #10]
	latitude[9] = '\0';
 800286e:	491c      	ldr	r1, [pc, #112]	; (80028e0 <parseData+0xe8>)
	longDir[1] = '\0';
 8002870:	4a18      	ldr	r2, [pc, #96]	; (80028d4 <parseData+0xdc>)
	latDir[1] = '\0';
 8002872:	4f1a      	ldr	r7, [pc, #104]	; (80028dc <parseData+0xe4>)
	strcpy(sendMeasurements, latitude);
 8002874:	0020      	movs	r0, r4
	latitude[9] = '\0';
 8002876:	724b      	strb	r3, [r1, #9]
	latDir[1] = '\0';
 8002878:	707b      	strb	r3, [r7, #1]
	longDir[1] = '\0';
 800287a:	7053      	strb	r3, [r2, #1]
	fix[1] = '\0';
 800287c:	7073      	strb	r3, [r6, #1]
	strcpy(sendMeasurements, latitude);
 800287e:	f001 fa65 	bl	8003d4c <strcpy>
	strcat(sendMeasurements, ",");
 8002882:	4d1a      	ldr	r5, [pc, #104]	; (80028ec <parseData+0xf4>)
 8002884:	0020      	movs	r0, r4
 8002886:	0029      	movs	r1, r5
 8002888:	f001 fa53 	bl	8003d32 <strcat>
	strcat(sendMeasurements, latDir);
 800288c:	0039      	movs	r1, r7
 800288e:	0020      	movs	r0, r4
 8002890:	f001 fa4f 	bl	8003d32 <strcat>
	strcat(sendMeasurements, ",");
 8002894:	0029      	movs	r1, r5
 8002896:	0020      	movs	r0, r4
 8002898:	f001 fa4b 	bl	8003d32 <strcat>
	strcat(sendMeasurements, longitude);
 800289c:	490e      	ldr	r1, [pc, #56]	; (80028d8 <parseData+0xe0>)
 800289e:	0020      	movs	r0, r4
 80028a0:	f001 fa47 	bl	8003d32 <strcat>
	strcat(sendMeasurements, ",");
 80028a4:	0029      	movs	r1, r5
 80028a6:	0020      	movs	r0, r4
 80028a8:	f001 fa43 	bl	8003d32 <strcat>
	strcat(sendMeasurements, longDir);
 80028ac:	4909      	ldr	r1, [pc, #36]	; (80028d4 <parseData+0xdc>)
 80028ae:	0020      	movs	r0, r4
 80028b0:	f001 fa3f 	bl	8003d32 <strcat>
	strcat(sendMeasurements, ",");
 80028b4:	0029      	movs	r1, r5
 80028b6:	0020      	movs	r0, r4
 80028b8:	f001 fa3b 	bl	8003d32 <strcat>
	strcat(sendMeasurements, fix);
 80028bc:	0031      	movs	r1, r6
 80028be:	0020      	movs	r0, r4
 80028c0:	f001 fa37 	bl	8003d32 <strcat>
	return 1;
 80028c4:	2001      	movs	r0, #1
 80028c6:	e7a4      	b.n	8002812 <parseData+0x1a>
 80028c8:	20000583 	.word	0x20000583
 80028cc:	08003dbf 	.word	0x08003dbf
 80028d0:	20000589 	.word	0x20000589
 80028d4:	2000089c 	.word	0x2000089c
 80028d8:	20000829 	.word	0x20000829
 80028dc:	2000089e 	.word	0x2000089e
 80028e0:	20000836 	.word	0x20000836
 80028e4:	20000834 	.word	0x20000834
 80028e8:	2000080e 	.word	0x2000080e
 80028ec:	08003dc6 	.word	0x08003dc6

080028f0 <HR_APP_MODE>:

uint8_t sampleCnt = 0;


void HR_APP_MODE()
{
 80028f0:	b570      	push	{r4, r5, r6, lr}
	  //HAL_Delay(10);
	  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET); //set MFIO LOW
 80028f2:	2680      	movs	r6, #128	; 0x80
 80028f4:	4d12      	ldr	r5, [pc, #72]	; (8002940 <HR_APP_MODE+0x50>)
 80028f6:	0236      	lsls	r6, r6, #8
 80028f8:	0031      	movs	r1, r6
 80028fa:	0028      	movs	r0, r5
 80028fc:	2200      	movs	r2, #0
	  HAL_Delay(10);
	  HAL_GPIO_WritePin(HR_RESET_GPIO_Port, HR_RESET_Pin, GPIO_PIN_RESET); //set RSTN low for 10ms
 80028fe:	4c11      	ldr	r4, [pc, #68]	; (8002944 <HR_APP_MODE+0x54>)
	  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET); //set MFIO LOW
 8002900:	f7fe f8de 	bl	8000ac0 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8002904:	200a      	movs	r0, #10
 8002906:	f7fd fecd 	bl	80006a4 <HAL_Delay>
	  HAL_GPIO_WritePin(HR_RESET_GPIO_Port, HR_RESET_Pin, GPIO_PIN_RESET); //set RSTN low for 10ms
 800290a:	2200      	movs	r2, #0
 800290c:	2120      	movs	r1, #32
 800290e:	0020      	movs	r0, r4
 8002910:	f7fe f8d6 	bl	8000ac0 <HAL_GPIO_WritePin>
	  HAL_Delay(3);
 8002914:	2003      	movs	r0, #3
 8002916:	f7fd fec5 	bl	80006a4 <HAL_Delay>
	  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_SET); //set MFIO high while RSTN is low
 800291a:	0031      	movs	r1, r6
 800291c:	0028      	movs	r0, r5
 800291e:	2201      	movs	r2, #1
 8002920:	f7fe f8ce 	bl	8000ac0 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 8002924:	2005      	movs	r0, #5
 8002926:	f7fd febd 	bl	80006a4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, HR_RESET_Pin, GPIO_PIN_SET); //return RSTN to its high state
 800292a:	2201      	movs	r2, #1
 800292c:	2120      	movs	r1, #32
 800292e:	0020      	movs	r0, r4
 8002930:	f7fe f8c6 	bl	8000ac0 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);	//wait 1 second (in app mode after 50ms) - will have to replace with timer later
 8002934:	20fa      	movs	r0, #250	; 0xfa
 8002936:	0080      	lsls	r0, r0, #2
 8002938:	f7fd feb4 	bl	80006a4 <HAL_Delay>
}
 800293c:	bd70      	pop	{r4, r5, r6, pc}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	50000800 	.word	0x50000800
 8002944:	50000400 	.word	0x50000400

08002948 <HR_MFIO_SET>:




void HR_MFIO_SET()
{
 8002948:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294a:	2214      	movs	r2, #20
 800294c:	2100      	movs	r1, #0
 800294e:	a801      	add	r0, sp, #4
 8002950:	f001 f9e7 	bl	8003d22 <memset>

	  //HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_SET);

	  GPIO_InitStruct.Pin = HR_MFIO_Pin;
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	021b      	lsls	r3, r3, #8
 8002958:	9301      	str	r3, [sp, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HR_MFIO_SET+0x38>)
	  //GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	  HAL_GPIO_Init(HR_MFIO_GPIO_Port, &GPIO_InitStruct);
 800295c:	a901      	add	r1, sp, #4
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800295e:	9302      	str	r3, [sp, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002960:	2302      	movs	r3, #2
	  HAL_GPIO_Init(HR_MFIO_GPIO_Port, &GPIO_InitStruct);
 8002962:	4808      	ldr	r0, [pc, #32]	; (8002984 <HR_MFIO_SET+0x3c>)
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002964:	9304      	str	r3, [sp, #16]
	  HAL_GPIO_Init(HR_MFIO_GPIO_Port, &GPIO_InitStruct);
 8002966:	f7fd fff5 	bl	8000954 <HAL_GPIO_Init>

	  //enable the interrupt
	  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2007      	movs	r0, #7
 800296e:	0011      	movs	r1, r2
 8002970:	f7fd fea8 	bl	80006c4 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002974:	2007      	movs	r0, #7
 8002976:	f7fd fed5 	bl	8000724 <HAL_NVIC_EnableIRQ>

}
 800297a:	b007      	add	sp, #28
 800297c:	bd00      	pop	{pc}
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	10210000 	.word	0x10210000
 8002984:	50000800 	.word	0x50000800

08002988 <write_cmd>:
}



uint8_t write_cmd(uint8_t arr[], uint8_t size)
{
 8002988:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t receive_buff = -3;
 800298a:	250f      	movs	r5, #15
 800298c:	23fd      	movs	r3, #253	; 0xfd
{
 800298e:	0002      	movs	r2, r0

	HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr, size, 1000);
 8002990:	20fa      	movs	r0, #250	; 0xfa
	uint8_t receive_buff = -3;
 8002992:	446d      	add	r5, sp
 8002994:	702b      	strb	r3, [r5, #0]
	HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr, size, 1000);
 8002996:	4c18      	ldr	r4, [pc, #96]	; (80029f8 <write_cmd+0x70>)
 8002998:	b28b      	uxth	r3, r1
 800299a:	4918      	ldr	r1, [pc, #96]	; (80029fc <write_cmd+0x74>)
 800299c:	0080      	lsls	r0, r0, #2
 800299e:	8809      	ldrh	r1, [r1, #0]
 80029a0:	9000      	str	r0, [sp, #0]
 80029a2:	0020      	movs	r0, r4
 80029a4:	f7fe fa10 	bl	8000dc8 <HAL_I2C_Master_Transmit>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 80029a8:	0022      	movs	r2, r4
 80029aa:	3241      	adds	r2, #65	; 0x41
 80029ac:	7813      	ldrb	r3, [r2, #0]
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d1fc      	bne.n	80029ac <write_cmd+0x24>
	HAL_I2C_Master_Receive(&hi2c1, readAddr, &receive_buff, sizeof(receive_buff), 1000);
 80029b2:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <write_cmd+0x78>)
 80029b4:	002a      	movs	r2, r5
 80029b6:	8819      	ldrh	r1, [r3, #0]
 80029b8:	23fa      	movs	r3, #250	; 0xfa
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	0020      	movs	r0, r4
 80029c0:	2301      	movs	r3, #1
 80029c2:	f7fe fa97 	bl	8000ef4 <HAL_I2C_Master_Receive>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 80029c6:	0022      	movs	r2, r4
 80029c8:	3241      	adds	r2, #65	; 0x41
 80029ca:	7813      	ldrb	r3, [r2, #0]
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d1fc      	bne.n	80029ca <write_cmd+0x42>
	while(receive_buff == 0xFE)
	{
		HAL_I2C_Master_Receive(&hi2c1, 0xAB, &receive_buff, sizeof(receive_buff), 1000);
 80029d0:	26fa      	movs	r6, #250	; 0xfa
 80029d2:	00b6      	lsls	r6, r6, #2
	while(receive_buff == 0xFE)
 80029d4:	7828      	ldrb	r0, [r5, #0]
 80029d6:	28fe      	cmp	r0, #254	; 0xfe
 80029d8:	d001      	beq.n	80029de <write_cmd+0x56>
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
	}

	return receive_buff;
}
 80029da:	b004      	add	sp, #16
 80029dc:	bd70      	pop	{r4, r5, r6, pc}
		HAL_I2C_Master_Receive(&hi2c1, 0xAB, &receive_buff, sizeof(receive_buff), 1000);
 80029de:	002a      	movs	r2, r5
 80029e0:	9600      	str	r6, [sp, #0]
 80029e2:	2301      	movs	r3, #1
 80029e4:	21ab      	movs	r1, #171	; 0xab
 80029e6:	0020      	movs	r0, r4
 80029e8:	f7fe fa84 	bl	8000ef4 <HAL_I2C_Master_Receive>
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 80029ec:	0022      	movs	r2, r4
 80029ee:	3241      	adds	r2, #65	; 0x41
 80029f0:	7813      	ldrb	r3, [r2, #0]
 80029f2:	2b20      	cmp	r3, #32
 80029f4:	d1fc      	bne.n	80029f0 <write_cmd+0x68>
 80029f6:	e7ed      	b.n	80029d4 <write_cmd+0x4c>
 80029f8:	200006c8 	.word	0x200006c8
 80029fc:	20000060 	.word	0x20000060
 8002a00:	2000005e 	.word	0x2000005e

08002a04 <HR_INIT>:
{
 8002a04:	b510      	push	{r4, lr}
	uint8_t arr_1_2[3] = {0x10, 0x00, 0x02};
 8002a06:	4c26      	ldr	r4, [pc, #152]	; (8002aa0 <HR_INIT+0x9c>)
{
 8002a08:	b086      	sub	sp, #24
	uint8_t arr_1_2[3] = {0x10, 0x00, 0x02};
 8002a0a:	0021      	movs	r1, r4
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	310d      	adds	r1, #13
 8002a10:	a801      	add	r0, sp, #4
 8002a12:	f001 f97d 	bl	8003d10 <memcpy>
	if(write_cmd(arr_1_2, sizeof(arr_1_2)) != 0x00)
 8002a16:	2103      	movs	r1, #3
 8002a18:	a801      	add	r0, sp, #4
 8002a1a:	f7ff ffb5 	bl	8002988 <write_cmd>
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	d003      	beq.n	8002a2a <HR_INIT+0x26>
		return 1;
 8002a22:	2401      	movs	r4, #1
}
 8002a24:	0020      	movs	r0, r4
 8002a26:	b006      	add	sp, #24
 8002a28:	bd10      	pop	{r4, pc}
	uint8_t arr_1_3[3] = {0x10, 0x01, 0x05};
 8002a2a:	0021      	movs	r1, r4
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	3110      	adds	r1, #16
 8002a30:	a802      	add	r0, sp, #8
 8002a32:	f001 f96d 	bl	8003d10 <memcpy>
	if(write_cmd(arr_1_3, sizeof(arr_1_3)) != 0x00)
 8002a36:	2103      	movs	r1, #3
 8002a38:	a802      	add	r0, sp, #8
 8002a3a:	f7ff ffa5 	bl	8002988 <write_cmd>
 8002a3e:	2800      	cmp	r0, #0
 8002a40:	d1ef      	bne.n	8002a22 <HR_INIT+0x1e>
	uint8_t arr_1_4[3] = {0x52, 0x00, 0x01};
 8002a42:	0021      	movs	r1, r4
 8002a44:	2203      	movs	r2, #3
 8002a46:	3113      	adds	r1, #19
 8002a48:	a803      	add	r0, sp, #12
 8002a4a:	f001 f961 	bl	8003d10 <memcpy>
	if(write_cmd(arr_1_4, sizeof(arr_1_4)) != 0x00)
 8002a4e:	2103      	movs	r1, #3
 8002a50:	a803      	add	r0, sp, #12
 8002a52:	f7ff ff99 	bl	8002988 <write_cmd>
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d1e3      	bne.n	8002a22 <HR_INIT+0x1e>
	HAL_Delay(20);
 8002a5a:	3014      	adds	r0, #20
 8002a5c:	f7fd fe22 	bl	80006a4 <HAL_Delay>
	uint8_t arr_1_6[3] = {0x44, 0x03, 0x01};
 8002a60:	0021      	movs	r1, r4
 8002a62:	2203      	movs	r2, #3
 8002a64:	3116      	adds	r1, #22
 8002a66:	a804      	add	r0, sp, #16
 8002a68:	f001 f952 	bl	8003d10 <memcpy>
	if(write_cmd(arr_1_6, sizeof(arr_1_6)) != 0x00)
 8002a6c:	2103      	movs	r1, #3
 8002a6e:	a804      	add	r0, sp, #16
 8002a70:	f7ff ff8a 	bl	8002988 <write_cmd>
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d1d4      	bne.n	8002a22 <HR_INIT+0x1e>
	HAL_Delay(40);
 8002a78:	3028      	adds	r0, #40	; 0x28
 8002a7a:	f7fd fe13 	bl	80006a4 <HAL_Delay>
	uint8_t arr_1_7[3] = {0x52, 0x02, 0x01};
 8002a7e:	0021      	movs	r1, r4
 8002a80:	2203      	movs	r2, #3
 8002a82:	3119      	adds	r1, #25
 8002a84:	a805      	add	r0, sp, #20
 8002a86:	f001 f943 	bl	8003d10 <memcpy>
	if(write_cmd(arr_1_7, sizeof(arr_1_7)) != 0x00)
 8002a8a:	2103      	movs	r1, #3
 8002a8c:	a805      	add	r0, sp, #20
 8002a8e:	f7ff ff7b 	bl	8002988 <write_cmd>
 8002a92:	1e04      	subs	r4, r0, #0
 8002a94:	d1c5      	bne.n	8002a22 <HR_INIT+0x1e>
	HAL_Delay(40);
 8002a96:	2028      	movs	r0, #40	; 0x28
 8002a98:	f7fd fe04 	bl	80006a4 <HAL_Delay>
	return 0;
 8002a9c:	e7c2      	b.n	8002a24 <HR_INIT+0x20>
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	08003d74 	.word	0x08003d74

08002aa4 <read_cmd>:


void read_cmd(uint8_t arr[], uint8_t size, uint8_t * receive_buff)
{
 8002aa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr, size, 1000);
 8002aa6:	25fa      	movs	r5, #250	; 0xfa
 8002aa8:	4c17      	ldr	r4, [pc, #92]	; (8002b08 <read_cmd+0x64>)
{
 8002aaa:	0016      	movs	r6, r2
	HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr, size, 1000);
 8002aac:	4a17      	ldr	r2, [pc, #92]	; (8002b0c <read_cmd+0x68>)
 8002aae:	00ad      	lsls	r5, r5, #2
 8002ab0:	b28b      	uxth	r3, r1
 8002ab2:	8811      	ldrh	r1, [r2, #0]
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	9500      	str	r5, [sp, #0]
 8002ab8:	0020      	movs	r0, r4
 8002aba:	f7fe f985 	bl	8000dc8 <HAL_I2C_Master_Transmit>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8002abe:	0022      	movs	r2, r4
 8002ac0:	3241      	adds	r2, #65	; 0x41
 8002ac2:	7813      	ldrb	r3, [r2, #0]
 8002ac4:	2b20      	cmp	r3, #32
 8002ac6:	d1fc      	bne.n	8002ac2 <read_cmd+0x1e>
	HAL_I2C_Master_Receive(&hi2c1, readAddr, receive_buff, 2, 1000);
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <read_cmd+0x6c>)
 8002aca:	0032      	movs	r2, r6
 8002acc:	8819      	ldrh	r1, [r3, #0]
 8002ace:	0020      	movs	r0, r4
 8002ad0:	9500      	str	r5, [sp, #0]
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	f7fe fa0e 	bl	8000ef4 <HAL_I2C_Master_Receive>
	while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8002ad8:	0022      	movs	r2, r4
 8002ada:	3241      	adds	r2, #65	; 0x41
 8002adc:	7813      	ldrb	r3, [r2, #0]
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	d1fc      	bne.n	8002adc <read_cmd+0x38>
	while(receive_buff[0] == 0xFE)
	{
		HAL_I2C_Master_Receive(&hi2c1, 0xAB, receive_buff, 2, 1000);
 8002ae2:	25fa      	movs	r5, #250	; 0xfa
 8002ae4:	00ad      	lsls	r5, r5, #2
	while(receive_buff[0] == 0xFE)
 8002ae6:	7833      	ldrb	r3, [r6, #0]
 8002ae8:	2bfe      	cmp	r3, #254	; 0xfe
 8002aea:	d000      	beq.n	8002aee <read_cmd+0x4a>
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
	}
}
 8002aec:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
		HAL_I2C_Master_Receive(&hi2c1, 0xAB, receive_buff, 2, 1000);
 8002aee:	0032      	movs	r2, r6
 8002af0:	9500      	str	r5, [sp, #0]
 8002af2:	2302      	movs	r3, #2
 8002af4:	21ab      	movs	r1, #171	; 0xab
 8002af6:	0020      	movs	r0, r4
 8002af8:	f7fe f9fc 	bl	8000ef4 <HAL_I2C_Master_Receive>
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8002afc:	0022      	movs	r2, r4
 8002afe:	3241      	adds	r2, #65	; 0x41
 8002b00:	7813      	ldrb	r3, [r2, #0]
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d1fc      	bne.n	8002b00 <read_cmd+0x5c>
 8002b06:	e7ee      	b.n	8002ae6 <read_cmd+0x42>
 8002b08:	200006c8 	.word	0x200006c8
 8002b0c:	20000060 	.word	0x20000060
 8002b10:	2000005e 	.word	0x2000005e

08002b14 <shut30101>:
{
 8002b14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t arr_shut[3] = {0x41, 0x03, 0x09};
 8002b16:	4e13      	ldr	r6, [pc, #76]	; (8002b64 <shut30101+0x50>)
 8002b18:	2503      	movs	r5, #3
 8002b1a:	0031      	movs	r1, r6
 8002b1c:	002a      	movs	r2, r5
 8002b1e:	3122      	adds	r1, #34	; 0x22
 8002b20:	a802      	add	r0, sp, #8
 8002b22:	f001 f8f5 	bl	8003d10 <memcpy>
	uint8_t received[2] = {-3, -3};
 8002b26:	0031      	movs	r1, r6
 8002b28:	ac01      	add	r4, sp, #4
 8002b2a:	3125      	adds	r1, #37	; 0x25
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	0020      	movs	r0, r4
 8002b30:	f001 f8ee 	bl	8003d10 <memcpy>
	read_cmd(arr_shut, sizeof(arr_shut), received);
 8002b34:	0022      	movs	r2, r4
 8002b36:	0029      	movs	r1, r5
 8002b38:	a802      	add	r0, sp, #8
 8002b3a:	f7ff ffb3 	bl	8002aa4 <read_cmd>
	if(received[0] != 0x00)
 8002b3e:	7823      	ldrb	r3, [r4, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10d      	bne.n	8002b60 <shut30101+0x4c>
	received[1] = received[1]  | (1<<7);
 8002b44:	2280      	movs	r2, #128	; 0x80
 8002b46:	7863      	ldrb	r3, [r4, #1]
	uint8_t arr_shut2[4] = {0x40, 0x03, 0x09, received[1]};
 8002b48:	a803      	add	r0, sp, #12
	received[1] = received[1]  | (1<<7);
 8002b4a:	4313      	orrs	r3, r2
	uint8_t arr_shut2[4] = {0x40, 0x03, 0x09, received[1]};
 8002b4c:	3a40      	subs	r2, #64	; 0x40
 8002b4e:	7002      	strb	r2, [r0, #0]
	if(write_cmd(arr_shut2, sizeof(arr_shut2)) != 0x00)
 8002b50:	2104      	movs	r1, #4
	uint8_t arr_shut2[4] = {0x40, 0x03, 0x09, received[1]};
 8002b52:	3a37      	subs	r2, #55	; 0x37
	received[1] = received[1]  | (1<<7);
 8002b54:	7063      	strb	r3, [r4, #1]
	uint8_t arr_shut2[4] = {0x40, 0x03, 0x09, received[1]};
 8002b56:	7045      	strb	r5, [r0, #1]
 8002b58:	7082      	strb	r2, [r0, #2]
 8002b5a:	70c3      	strb	r3, [r0, #3]
	if(write_cmd(arr_shut2, sizeof(arr_shut2)) != 0x00)
 8002b5c:	f7ff ff14 	bl	8002988 <write_cmd>
}
 8002b60:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	08003d74 	.word	0x08003d74

08002b68 <start30101>:
{
 8002b68:	b530      	push	{r4, r5, lr}
	uint8_t arr_shut[3] = {0x41, 0x03, 0x09};
 8002b6a:	4d1b      	ldr	r5, [pc, #108]	; (8002bd8 <start30101+0x70>)
 8002b6c:	2403      	movs	r4, #3
 8002b6e:	0029      	movs	r1, r5
{
 8002b70:	b085      	sub	sp, #20
	uint8_t arr_shut[3] = {0x41, 0x03, 0x09};
 8002b72:	3122      	adds	r1, #34	; 0x22
 8002b74:	0022      	movs	r2, r4
 8002b76:	a801      	add	r0, sp, #4
 8002b78:	f001 f8ca 	bl	8003d10 <memcpy>
	uint8_t received[2] = {-3, -3};
 8002b7c:	0029      	movs	r1, r5
 8002b7e:	2202      	movs	r2, #2
 8002b80:	3125      	adds	r1, #37	; 0x25
 8002b82:	4668      	mov	r0, sp
 8002b84:	f001 f8c4 	bl	8003d10 <memcpy>
	read_cmd(arr_shut, sizeof(arr_shut), received);
 8002b88:	466a      	mov	r2, sp
 8002b8a:	0021      	movs	r1, r4
 8002b8c:	a801      	add	r0, sp, #4
 8002b8e:	f7ff ff89 	bl	8002aa4 <read_cmd>
	if(received[0] != 0x00)
 8002b92:	466b      	mov	r3, sp
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d11b      	bne.n	8002bd2 <start30101+0x6a>
	received[1] = (received[1]  & (~(1<<7)));
 8002b9a:	466b      	mov	r3, sp
 8002b9c:	227f      	movs	r2, #127	; 0x7f
 8002b9e:	785b      	ldrb	r3, [r3, #1]
	uint8_t arr_shut2[4] = {0x40, 0x03, 0x09, received[1]};
 8002ba0:	a803      	add	r0, sp, #12
	received[1] = (received[1]  & (~(1<<7)));
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	466a      	mov	r2, sp
 8002ba6:	7053      	strb	r3, [r2, #1]
	uint8_t arr_shut2[4] = {0x40, 0x03, 0x09, received[1]};
 8002ba8:	2240      	movs	r2, #64	; 0x40
	if(write_cmd(arr_shut2, sizeof(arr_shut2)) != 0x00)
 8002baa:	2104      	movs	r1, #4
	uint8_t arr_shut2[4] = {0x40, 0x03, 0x09, received[1]};
 8002bac:	7002      	strb	r2, [r0, #0]
 8002bae:	3a37      	subs	r2, #55	; 0x37
 8002bb0:	7044      	strb	r4, [r0, #1]
 8002bb2:	7082      	strb	r2, [r0, #2]
 8002bb4:	70c3      	strb	r3, [r0, #3]
	if(write_cmd(arr_shut2, sizeof(arr_shut2)) != 0x00)
 8002bb6:	f7ff fee7 	bl	8002988 <write_cmd>
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	d109      	bne.n	8002bd2 <start30101+0x6a>
	uint8_t arr_1_7[3] = {0x52, 0x02, 0x01};
 8002bbe:	0029      	movs	r1, r5
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	3119      	adds	r1, #25
 8002bc4:	a802      	add	r0, sp, #8
 8002bc6:	f001 f8a3 	bl	8003d10 <memcpy>
	if(write_cmd(arr_1_7, sizeof(arr_1_7)) != 0x00)
 8002bca:	0021      	movs	r1, r4
 8002bcc:	a802      	add	r0, sp, #8
 8002bce:	f7ff fedb 	bl	8002988 <write_cmd>
}
 8002bd2:	b005      	add	sp, #20
 8002bd4:	bd30      	pop	{r4, r5, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	08003d74 	.word	0x08003d74

08002bdc <fill_buff>:


uint8_t fill_buff(uint8_t arr[], uint8_t size, uint8_t * receive_buff)
{
 8002bdc:	b573      	push	{r0, r1, r4, r5, r6, lr}

	//for(int i = 0; i < num_samp; i++)
	//{
		HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr, size, 1000);
 8002bde:	25fa      	movs	r5, #250	; 0xfa
 8002be0:	4c10      	ldr	r4, [pc, #64]	; (8002c24 <fill_buff+0x48>)
{
 8002be2:	0016      	movs	r6, r2
		HAL_I2C_Master_Transmit(&hi2c1, writeAddr, arr, size, 1000);
 8002be4:	4a10      	ldr	r2, [pc, #64]	; (8002c28 <fill_buff+0x4c>)
 8002be6:	00ad      	lsls	r5, r5, #2
 8002be8:	b28b      	uxth	r3, r1
 8002bea:	8811      	ldrh	r1, [r2, #0]
 8002bec:	0002      	movs	r2, r0
 8002bee:	9500      	str	r5, [sp, #0]
 8002bf0:	0020      	movs	r0, r4
 8002bf2:	f7fe f8e9 	bl	8000dc8 <HAL_I2C_Master_Transmit>
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8002bf6:	0022      	movs	r2, r4
 8002bf8:	3241      	adds	r2, #65	; 0x41
 8002bfa:	7813      	ldrb	r3, [r2, #0]
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	d1fc      	bne.n	8002bfa <fill_buff+0x1e>

		HAL_I2C_Master_Receive(&hi2c1, readAddr, receive_buff, 31, 1000);
 8002c00:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <fill_buff+0x50>)
 8002c02:	0020      	movs	r0, r4
 8002c04:	8819      	ldrh	r1, [r3, #0]
 8002c06:	0032      	movs	r2, r6
 8002c08:	9500      	str	r5, [sp, #0]
 8002c0a:	231f      	movs	r3, #31
 8002c0c:	f7fe f972 	bl	8000ef4 <HAL_I2C_Master_Receive>
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
 8002c10:	3441      	adds	r4, #65	; 0x41
 8002c12:	7823      	ldrb	r3, [r4, #0]
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d1fc      	bne.n	8002c12 <fill_buff+0x36>
		if(receive_buff[0] != 0)
 8002c18:	7830      	ldrb	r0, [r6, #0]
 8002c1a:	4243      	negs	r3, r0
 8002c1c:	4158      	adcs	r0, r3
 8002c1e:	b2c0      	uxtb	r0, r0
	{
		HAL_I2C_Master_Receive(&hi2c1, readAddr, &receive_buff[i], 1, 1000);
		while(((&hi2c1) -> State) != HAL_I2C_STATE_READY);
	}
	*/
}
 8002c20:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	200006c8 	.word	0x200006c8
 8002c28:	20000060 	.word	0x20000060
 8002c2c:	2000005e 	.word	0x2000005e

08002c30 <HR_READ>:
	uint8_t arr_2_1[2] = {0x00, 0x00};
 8002c30:	2300      	movs	r3, #0
{
 8002c32:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t received[2] = {-3, -3};
 8002c34:	4e30      	ldr	r6, [pc, #192]	; (8002cf8 <HR_READ+0xc8>)
{
 8002c36:	b087      	sub	sp, #28
	uint8_t received[2] = {-3, -3};
 8002c38:	ad02      	add	r5, sp, #8
 8002c3a:	3625      	adds	r6, #37	; 0x25
	uint8_t arr_2_1[2] = {0x00, 0x00};
 8002c3c:	af01      	add	r7, sp, #4
	uint8_t received[2] = {-3, -3};
 8002c3e:	2202      	movs	r2, #2
 8002c40:	0031      	movs	r1, r6
{
 8002c42:	0004      	movs	r4, r0
	uint8_t received[2] = {-3, -3};
 8002c44:	0028      	movs	r0, r5
	uint8_t arr_2_1[2] = {0x00, 0x00};
 8002c46:	703b      	strb	r3, [r7, #0]
 8002c48:	707b      	strb	r3, [r7, #1]
	uint8_t received[2] = {-3, -3};
 8002c4a:	f001 f861 	bl	8003d10 <memcpy>
	read_cmd(arr_2_1, sizeof(arr_2_1), received);
 8002c4e:	002a      	movs	r2, r5
 8002c50:	2102      	movs	r1, #2
 8002c52:	0038      	movs	r0, r7
 8002c54:	f7ff ff26 	bl	8002aa4 <read_cmd>
	if(received[0] != 0x00)
 8002c58:	782b      	ldrb	r3, [r5, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d149      	bne.n	8002cf2 <HR_READ+0xc2>
	if(received[1] == 0x08)
 8002c5e:	786a      	ldrb	r2, [r5, #1]
 8002c60:	2a08      	cmp	r2, #8
 8002c62:	d146      	bne.n	8002cf2 <HR_READ+0xc2>
		uint8_t arr_2_2[2] = {0x12, 0x00};
 8002c64:	af03      	add	r7, sp, #12
		uint8_t received[2] = {-3, -3};
 8002c66:	ad04      	add	r5, sp, #16
		uint8_t arr_2_2[2] = {0x12, 0x00};
 8002c68:	320a      	adds	r2, #10
 8002c6a:	703a      	strb	r2, [r7, #0]
		uint8_t received[2] = {-3, -3};
 8002c6c:	0031      	movs	r1, r6
 8002c6e:	3a10      	subs	r2, #16
 8002c70:	0028      	movs	r0, r5
		uint8_t arr_2_2[2] = {0x12, 0x00};
 8002c72:	707b      	strb	r3, [r7, #1]
		uint8_t received[2] = {-3, -3};
 8002c74:	f001 f84c 	bl	8003d10 <memcpy>
		read_cmd(arr_2_2, sizeof(arr_2_2), received);
 8002c78:	002a      	movs	r2, r5
 8002c7a:	2102      	movs	r1, #2
 8002c7c:	0038      	movs	r0, r7
 8002c7e:	f7ff ff11 	bl	8002aa4 <read_cmd>
		if(received[0] != 0x00)
 8002c82:	782b      	ldrb	r3, [r5, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d134      	bne.n	8002cf2 <HR_READ+0xc2>
		num_samp = received[1];
 8002c88:	786a      	ldrb	r2, [r5, #1]
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <HR_READ+0xcc>)
		uint8_t arr_2_3[2] = {0x12, 0x01};
 8002c8c:	491a      	ldr	r1, [pc, #104]	; (8002cf8 <HR_READ+0xc8>)
		num_samp = received[1];
 8002c8e:	701a      	strb	r2, [r3, #0]
		uint8_t arr_2_3[2] = {0x12, 0x01};
 8002c90:	3127      	adds	r1, #39	; 0x27
 8002c92:	2202      	movs	r2, #2
 8002c94:	a805      	add	r0, sp, #20
 8002c96:	f001 f83b 	bl	8003d10 <memcpy>
		if(!fill_buff(arr_2_3, sizeof(arr_2_3), data))
 8002c9a:	0022      	movs	r2, r4
 8002c9c:	2102      	movs	r1, #2
 8002c9e:	a805      	add	r0, sp, #20
 8002ca0:	f7ff ff9c 	bl	8002bdc <fill_buff>
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	d024      	beq.n	8002cf2 <HR_READ+0xc2>
		heartrate  = ((((uint16_t) data[1]) << 8) | (data[2])) / 10;
 8002ca8:	7860      	ldrb	r0, [r4, #1]
 8002caa:	78a3      	ldrb	r3, [r4, #2]
 8002cac:	0200      	lsls	r0, r0, #8
 8002cae:	4318      	orrs	r0, r3
 8002cb0:	210a      	movs	r1, #10
 8002cb2:	f7fd fac7 	bl	8000244 <__divsi3>
 8002cb6:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HR_READ+0xd0>)
 8002cb8:	b285      	uxth	r5, r0
 8002cba:	801d      	strh	r5, [r3, #0]
		HR_conf    =  data[3];
 8002cbc:	78e2      	ldrb	r2, [r4, #3]
 8002cbe:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <HR_READ+0xd4>)
		SPO2  = ((((uint16_t) data[4]) << 8) | (data[5])) / 10;
 8002cc0:	7920      	ldrb	r0, [r4, #4]
		HR_conf    =  data[3];
 8002cc2:	701a      	strb	r2, [r3, #0]
		SPO2  = ((((uint16_t) data[4]) << 8) | (data[5])) / 10;
 8002cc4:	7963      	ldrb	r3, [r4, #5]
 8002cc6:	0200      	lsls	r0, r0, #8
 8002cc8:	4318      	orrs	r0, r3
 8002cca:	210a      	movs	r1, #10
 8002ccc:	f7fd faba 	bl	8000244 <__divsi3>
 8002cd0:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <HR_READ+0xd8>)
 8002cd2:	b280      	uxth	r0, r0
 8002cd4:	8018      	strh	r0, [r3, #0]
		alg_state  =  data[6];
 8002cd6:	79a2      	ldrb	r2, [r4, #6]
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <HR_READ+0xdc>)
		if(((heartrate > 50) && (heartrate < 255)) && ((SPO2 > 50) && (SPO2 < 101)))
 8002cda:	3d33      	subs	r5, #51	; 0x33
		alg_state  =  data[6];
 8002cdc:	701a      	strb	r2, [r3, #0]
		if(((heartrate > 50) && (heartrate < 255)) && ((SPO2 > 50) && (SPO2 < 101)))
 8002cde:	2dcb      	cmp	r5, #203	; 0xcb
 8002ce0:	d807      	bhi.n	8002cf2 <HR_READ+0xc2>
 8002ce2:	3833      	subs	r0, #51	; 0x33
 8002ce4:	2831      	cmp	r0, #49	; 0x31
 8002ce6:	d804      	bhi.n	8002cf2 <HR_READ+0xc2>
				HR_FLAG = 1;
 8002ce8:	2201      	movs	r2, #1
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <HR_READ+0xe0>)
 8002cec:	701a      	strb	r2, [r3, #0]
				shut30101();
 8002cee:	f7ff ff11 	bl	8002b14 <shut30101>
}
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	b007      	add	sp, #28
 8002cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cf8:	08003d74 	.word	0x08003d74
 8002cfc:	2000005c 	.word	0x2000005c
 8002d00:	200005ca 	.word	0x200005ca
 8002d04:	2000057d 	.word	0x2000057d
 8002d08:	20000580 	.word	0x20000580
 8002d0c:	20000582 	.word	0x20000582
 8002d10:	2000057c 	.word	0x2000057c

08002d14 <writeReg>:



//Function for writing to a register
void writeReg(uint8_t addr, uint8_t value)
{
 8002d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t reg = addr | 0x80;
 8002d16:	466b      	mov	r3, sp
 8002d18:	1d9d      	adds	r5, r3, #6
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	425b      	negs	r3, r3
 8002d1e:	4318      	orrs	r0, r3
	uint8_t val = value;
 8002d20:	466b      	mov	r3, sp
 8002d22:	1dde      	adds	r6, r3, #7
	uint8_t reg = addr | 0x80;
 8002d24:	7028      	strb	r0, [r5, #0]
	uint8_t val = value;
 8002d26:	7031      	strb	r1, [r6, #0]
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002d28:	4c15      	ldr	r4, [pc, #84]	; (8002d80 <writeReg+0x6c>)
 8002d2a:	0020      	movs	r0, r4
 8002d2c:	f7ff f95a 	bl	8001fe4 <HAL_SPI_GetState>
 8002d30:	0007      	movs	r7, r0
 8002d32:	2801      	cmp	r0, #1
 8002d34:	d1f8      	bne.n	8002d28 <writeReg+0x14>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); //pull NSS low to start frame
 8002d36:	20a0      	movs	r0, #160	; 0xa0
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2110      	movs	r1, #16
 8002d3c:	05c0      	lsls	r0, r0, #23
 8002d3e:	f7fd febf 	bl	8000ac0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, (uint16_t)sizeof(reg), 1000);
 8002d42:	23fa      	movs	r3, #250	; 0xfa
 8002d44:	003a      	movs	r2, r7
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	0029      	movs	r1, r5
 8002d4a:	0020      	movs	r0, r4
 8002d4c:	f7fe fef6 	bl	8001b3c <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002d50:	0020      	movs	r0, r4
 8002d52:	f7ff f947 	bl	8001fe4 <HAL_SPI_GetState>
 8002d56:	0002      	movs	r2, r0
 8002d58:	2801      	cmp	r0, #1
 8002d5a:	d1f9      	bne.n	8002d50 <writeReg+0x3c>
	HAL_SPI_Transmit(&hspi1, &val, (uint16_t)sizeof(val), 1000);
 8002d5c:	23fa      	movs	r3, #250	; 0xfa
 8002d5e:	0031      	movs	r1, r6
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	0020      	movs	r0, r4
 8002d64:	f7fe feea 	bl	8001b3c <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002d68:	0020      	movs	r0, r4
 8002d6a:	f7ff f93b 	bl	8001fe4 <HAL_SPI_GetState>
 8002d6e:	0002      	movs	r2, r0
 8002d70:	2801      	cmp	r0, #1
 8002d72:	d1f9      	bne.n	8002d68 <writeReg+0x54>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET); //pull NSS high to end frame
 8002d74:	20a0      	movs	r0, #160	; 0xa0
 8002d76:	2110      	movs	r1, #16
 8002d78:	05c0      	lsls	r0, r0, #23
 8002d7a:	f7fd fea1 	bl	8000ac0 <HAL_GPIO_WritePin>
}
 8002d7e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002d80:	20000840 	.word	0x20000840

08002d84 <readReg>:

//Function for reading from a register
uint8_t readReg(uint8_t addr)
{
 8002d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t reg = addr & ~0x80;
 8002d86:	466b      	mov	r3, sp
 8002d88:	1d9e      	adds	r6, r3, #6
 8002d8a:	237f      	movs	r3, #127	; 0x7f
 8002d8c:	4018      	ands	r0, r3
	uint8_t data = 0;
 8002d8e:	466b      	mov	r3, sp
 8002d90:	1ddd      	adds	r5, r3, #7
 8002d92:	2300      	movs	r3, #0
	uint8_t reg = addr & ~0x80;
 8002d94:	7030      	strb	r0, [r6, #0]
	uint8_t data = 0;
 8002d96:	702b      	strb	r3, [r5, #0]
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002d98:	4c16      	ldr	r4, [pc, #88]	; (8002df4 <readReg+0x70>)
 8002d9a:	0020      	movs	r0, r4
 8002d9c:	f7ff f922 	bl	8001fe4 <HAL_SPI_GetState>
 8002da0:	0007      	movs	r7, r0
 8002da2:	2801      	cmp	r0, #1
 8002da4:	d1f8      	bne.n	8002d98 <readReg+0x14>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); //pull NSS low to start frame
 8002da6:	20a0      	movs	r0, #160	; 0xa0
 8002da8:	2200      	movs	r2, #0
 8002daa:	2110      	movs	r1, #16
 8002dac:	05c0      	lsls	r0, r0, #23
 8002dae:	f7fd fe87 	bl	8000ac0 <HAL_GPIO_WritePin>
	//HAL_SPI_TransmitReceive(&hspi1, &reg, &data, 1, 1000);
	HAL_SPI_Transmit(&hspi1, &reg, sizeof(reg), 1000); //send a read command from that address
 8002db2:	23fa      	movs	r3, #250	; 0xfa
 8002db4:	003a      	movs	r2, r7
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	0031      	movs	r1, r6
 8002dba:	0020      	movs	r0, r4
 8002dbc:	f7fe febe 	bl	8001b3c <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002dc0:	0020      	movs	r0, r4
 8002dc2:	f7ff f90f 	bl	8001fe4 <HAL_SPI_GetState>
 8002dc6:	0002      	movs	r2, r0
 8002dc8:	2801      	cmp	r0, #1
 8002dca:	d1f9      	bne.n	8002dc0 <readReg+0x3c>
	HAL_SPI_Receive(&hspi1, &data, sizeof(data), 1000);
 8002dcc:	23fa      	movs	r3, #250	; 0xfa
 8002dce:	0029      	movs	r1, r5
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	0020      	movs	r0, r4
 8002dd4:	f7ff f860 	bl	8001e98 <HAL_SPI_Receive>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002dd8:	0020      	movs	r0, r4
 8002dda:	f7ff f903 	bl	8001fe4 <HAL_SPI_GetState>
 8002dde:	0002      	movs	r2, r0
 8002de0:	2801      	cmp	r0, #1
 8002de2:	d1f9      	bne.n	8002dd8 <readReg+0x54>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET); //pull NSS high to end frame
 8002de4:	20a0      	movs	r0, #160	; 0xa0
 8002de6:	2110      	movs	r1, #16
 8002de8:	05c0      	lsls	r0, r0, #23
 8002dea:	f7fd fe69 	bl	8000ac0 <HAL_GPIO_WritePin>
	return data;
 8002dee:	7828      	ldrb	r0, [r5, #0]
}
 8002df0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	20000840 	.word	0x20000840

08002df8 <readFIFO>:

//Function for reading from FIFO
void readFIFO(uint8_t buff[], uint16_t size)
{
 8002df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dfa:	b085      	sub	sp, #20
	uint8_t reg = RH_RF95_REG_00_FIFO & ~0x80;
 8002dfc:	ab02      	add	r3, sp, #8
 8002dfe:	1ddd      	adds	r5, r3, #7
 8002e00:	2300      	movs	r3, #0
{
 8002e02:	000f      	movs	r7, r1
 8002e04:	9001      	str	r0, [sp, #4]
	uint8_t reg = RH_RF95_REG_00_FIFO & ~0x80;
 8002e06:	702b      	strb	r3, [r5, #0]
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002e08:	4c16      	ldr	r4, [pc, #88]	; (8002e64 <readFIFO+0x6c>)
 8002e0a:	0020      	movs	r0, r4
 8002e0c:	f7ff f8ea 	bl	8001fe4 <HAL_SPI_GetState>
 8002e10:	0006      	movs	r6, r0
 8002e12:	2801      	cmp	r0, #1
 8002e14:	d1f8      	bne.n	8002e08 <readFIFO+0x10>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); //pull NSS low to start frame
 8002e16:	20a0      	movs	r0, #160	; 0xa0
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2110      	movs	r1, #16
 8002e1c:	05c0      	lsls	r0, r0, #23
 8002e1e:	f7fd fe4f 	bl	8000ac0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, sizeof(reg), 1000); //send a read command from that address
 8002e22:	23fa      	movs	r3, #250	; 0xfa
 8002e24:	0032      	movs	r2, r6
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	0029      	movs	r1, r5
 8002e2a:	0020      	movs	r0, r4
 8002e2c:	f7fe fe86 	bl	8001b3c <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002e30:	0020      	movs	r0, r4
 8002e32:	f7ff f8d7 	bl	8001fe4 <HAL_SPI_GetState>
 8002e36:	2801      	cmp	r0, #1
 8002e38:	d1fa      	bne.n	8002e30 <readFIFO+0x38>
	HAL_SPI_Receive(&hspi1, buff, size, 1000);
 8002e3a:	23fa      	movs	r3, #250	; 0xfa
 8002e3c:	003a      	movs	r2, r7
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	9901      	ldr	r1, [sp, #4]
 8002e42:	0020      	movs	r0, r4
 8002e44:	f7ff f828 	bl	8001e98 <HAL_SPI_Receive>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002e48:	0020      	movs	r0, r4
 8002e4a:	f7ff f8cb 	bl	8001fe4 <HAL_SPI_GetState>
 8002e4e:	0002      	movs	r2, r0
 8002e50:	2801      	cmp	r0, #1
 8002e52:	d1f9      	bne.n	8002e48 <readFIFO+0x50>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET); //pull NSS high to end frame
 8002e54:	20a0      	movs	r0, #160	; 0xa0
 8002e56:	2110      	movs	r1, #16
 8002e58:	05c0      	lsls	r0, r0, #23
 8002e5a:	f7fd fe31 	bl	8000ac0 <HAL_GPIO_WritePin>
}
 8002e5e:	b005      	add	sp, #20
 8002e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	20000840 	.word	0x20000840

08002e68 <receiveData>:

//Function for reading from a register
void receiveData()
{
	writeReg(RH_RF95_REG_01_OP_MODE, 0x01);
 8002e68:	2101      	movs	r1, #1
{
 8002e6a:	b510      	push	{r4, lr}
	writeReg(RH_RF95_REG_01_OP_MODE, 0x01);
 8002e6c:	0008      	movs	r0, r1
 8002e6e:	f7ff ff51 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_12_IRQ_FLAGS, 0xFF);
 8002e72:	21ff      	movs	r1, #255	; 0xff
 8002e74:	2012      	movs	r0, #18
 8002e76:	f7ff ff4d 	bl	8002d14 <writeReg>

	if (readReg(RH_RF95_REG_12_IRQ_FLAGS) == 0x00)
 8002e7a:	2012      	movs	r0, #18
 8002e7c:	f7ff ff82 	bl	8002d84 <readReg>
 8002e80:	1e04      	subs	r4, r0, #0
 8002e82:	d111      	bne.n	8002ea8 <receiveData+0x40>
	{
		writeReg(RH_RF95_REG_0D_FIFO_ADDR_PTR, readReg(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR)); //fifo addr ptr = fifo rx current addr
 8002e84:	2010      	movs	r0, #16
 8002e86:	f7ff ff7d 	bl	8002d84 <readReg>
 8002e8a:	0001      	movs	r1, r0
 8002e8c:	200d      	movs	r0, #13
 8002e8e:	f7ff ff41 	bl	8002d14 <writeReg>
		uint8_t bytesLimit = readReg(RH_RF95_REG_13_RX_NB_BYTES);
 8002e92:	2013      	movs	r0, #19
 8002e94:	f7ff ff76 	bl	8002d84 <readReg>
		//HAL_Delay(10);
		readFIFO(receive, (uint16_t) bytesLimit);
 8002e98:	b281      	uxth	r1, r0
 8002e9a:	4808      	ldr	r0, [pc, #32]	; (8002ebc <receiveData+0x54>)
 8002e9c:	f7ff ffac 	bl	8002df8 <readFIFO>
		writeReg(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0x00);
 8002ea0:	0021      	movs	r1, r4
 8002ea2:	200d      	movs	r0, #13
 8002ea4:	f7ff ff36 	bl	8002d14 <writeReg>
	}

	writeReg(RH_RF95_REG_01_OP_MODE, 0x05);
 8002ea8:	2105      	movs	r1, #5
 8002eaa:	2001      	movs	r0, #1
 8002eac:	f7ff ff32 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_40_DIO_MAPPING1, 0x00);
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	2040      	movs	r0, #64	; 0x40
 8002eb4:	f7ff ff2e 	bl	8002d14 <writeReg>
}
 8002eb8:	bd10      	pop	{r4, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	2000061c 	.word	0x2000061c

08002ec0 <writeReg_Burst>:

//Function to burst write (primarily for FIFO)
void writeReg_Burst(uint8_t addr, uint8_t data[], uint8_t length)
{
 8002ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec2:	b085      	sub	sp, #20
	uint8_t reg = addr | 0x80;
 8002ec4:	ab02      	add	r3, sp, #8
 8002ec6:	1d9e      	adds	r6, r3, #6
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	425b      	negs	r3, r3
 8002ecc:	4318      	orrs	r0, r3
	uint8_t val = 0;
 8002ece:	ab02      	add	r3, sp, #8
 8002ed0:	1ddd      	adds	r5, r3, #7
 8002ed2:	2300      	movs	r3, #0
{
 8002ed4:	9100      	str	r1, [sp, #0]
 8002ed6:	9201      	str	r2, [sp, #4]
	uint8_t reg = addr | 0x80;
 8002ed8:	7030      	strb	r0, [r6, #0]
	uint8_t val = 0;
 8002eda:	702b      	strb	r3, [r5, #0]
	if (length >= 1)
 8002edc:	2a00      	cmp	r2, #0
 8002ede:	d026      	beq.n	8002f2e <writeReg_Burst+0x6e>
	{
		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002ee0:	4c1b      	ldr	r4, [pc, #108]	; (8002f50 <writeReg_Burst+0x90>)
 8002ee2:	0020      	movs	r0, r4
 8002ee4:	f7ff f87e 	bl	8001fe4 <HAL_SPI_GetState>
 8002ee8:	0007      	movs	r7, r0
 8002eea:	2801      	cmp	r0, #1
 8002eec:	d1f8      	bne.n	8002ee0 <writeReg_Burst+0x20>
		HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); //pull NSS low to start frame
 8002eee:	20a0      	movs	r0, #160	; 0xa0
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2110      	movs	r1, #16
 8002ef4:	05c0      	lsls	r0, r0, #23
 8002ef6:	f7fd fde3 	bl	8000ac0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &reg, (uint16_t)sizeof(reg), 1000);
 8002efa:	23fa      	movs	r3, #250	; 0xfa
 8002efc:	003a      	movs	r2, r7
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	0031      	movs	r1, r6
 8002f02:	0020      	movs	r0, r4
 8002f04:	f7fe fe1a 	bl	8001b3c <HAL_SPI_Transmit>
		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002f08:	0020      	movs	r0, r4
 8002f0a:	f7ff f86b 	bl	8001fe4 <HAL_SPI_GetState>
 8002f0e:	2801      	cmp	r0, #1
 8002f10:	d1fa      	bne.n	8002f08 <writeReg_Burst+0x48>
		for(int i = 0; i <= (length - 1); i++)
		{
			val = data[i];
			HAL_SPI_Transmit(&hspi1, &val, (uint16_t)sizeof(val), 1000);
 8002f12:	27fa      	movs	r7, #250	; 0xfa
		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002f14:	9e00      	ldr	r6, [sp, #0]
			HAL_SPI_Transmit(&hspi1, &val, (uint16_t)sizeof(val), 1000);
 8002f16:	00bf      	lsls	r7, r7, #2
		for(int i = 0; i <= (length - 1); i++)
 8002f18:	9b00      	ldr	r3, [sp, #0]
 8002f1a:	9a01      	ldr	r2, [sp, #4]
 8002f1c:	1af3      	subs	r3, r6, r3
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	dc07      	bgt.n	8002f32 <writeReg_Burst+0x72>
			while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
		}

		HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET); //pull NSS high to end frame
 8002f22:	20a0      	movs	r0, #160	; 0xa0
 8002f24:	2201      	movs	r2, #1
 8002f26:	2110      	movs	r1, #16
 8002f28:	05c0      	lsls	r0, r0, #23
 8002f2a:	f7fd fdc9 	bl	8000ac0 <HAL_GPIO_WritePin>
	}
}
 8002f2e:	b005      	add	sp, #20
 8002f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
			val = data[i];
 8002f32:	7833      	ldrb	r3, [r6, #0]
			HAL_SPI_Transmit(&hspi1, &val, (uint16_t)sizeof(val), 1000);
 8002f34:	2201      	movs	r2, #1
			val = data[i];
 8002f36:	702b      	strb	r3, [r5, #0]
			HAL_SPI_Transmit(&hspi1, &val, (uint16_t)sizeof(val), 1000);
 8002f38:	0029      	movs	r1, r5
 8002f3a:	003b      	movs	r3, r7
 8002f3c:	0020      	movs	r0, r4
 8002f3e:	f7fe fdfd 	bl	8001b3c <HAL_SPI_Transmit>
			while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002f42:	0020      	movs	r0, r4
 8002f44:	f7ff f84e 	bl	8001fe4 <HAL_SPI_GetState>
 8002f48:	2801      	cmp	r0, #1
 8002f4a:	d1fa      	bne.n	8002f42 <writeReg_Burst+0x82>
 8002f4c:	3601      	adds	r6, #1
 8002f4e:	e7e3      	b.n	8002f18 <writeReg_Burst+0x58>
 8002f50:	20000840 	.word	0x20000840

08002f54 <sendPacket>:

void sendPacket(uint8_t data[], uint8_t size)
{
 8002f54:	b570      	push	{r4, r5, r6, lr}
 8002f56:	000c      	movs	r4, r1
	writeReg(RH_RF95_REG_01_OP_MODE, 0x01); //STDBY
 8002f58:	2101      	movs	r1, #1
{
 8002f5a:	0005      	movs	r5, r0
	writeReg(RH_RF95_REG_01_OP_MODE, 0x01); //STDBY
 8002f5c:	0008      	movs	r0, r1
 8002f5e:	f7ff fed9 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0x00); //fifo addr pointer
 8002f62:	2100      	movs	r1, #0
 8002f64:	200d      	movs	r0, #13
 8002f66:	f7ff fed5 	bl	8002d14 <writeReg>

	//set headers
	writeReg(RH_RF95_REG_00_FIFO, headerTo); //header TO
 8002f6a:	4b1c      	ldr	r3, [pc, #112]	; (8002fdc <sendPacket+0x88>)
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	7819      	ldrb	r1, [r3, #0]
 8002f70:	f7ff fed0 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_00_FIFO, headerFrom); //header FROM
 8002f74:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <sendPacket+0x8c>)
 8002f76:	2000      	movs	r0, #0
 8002f78:	7819      	ldrb	r1, [r3, #0]
 8002f7a:	f7ff fecb 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_00_FIFO, headerID); //header ID
 8002f7e:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <sendPacket+0x90>)
 8002f80:	2000      	movs	r0, #0
 8002f82:	7819      	ldrb	r1, [r3, #0]
 8002f84:	f7ff fec6 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_00_FIFO, headerFlags); //header FLAGS
 8002f88:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <sendPacket+0x94>)
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	7819      	ldrb	r1, [r3, #0]
 8002f8e:	f7ff fec1 	bl	8002d14 <writeReg>

	//uint8_t size = (sizeof(&data)/sizeof(data[0]));
	//uint8_t size = sizeof(*send);

	//write message data to fifo
	writeReg_Burst(RH_RF95_REG_00_FIFO, data, size);
 8002f92:	0022      	movs	r2, r4
 8002f94:	0029      	movs	r1, r5
 8002f96:	2000      	movs	r0, #0
 8002f98:	f7ff ff92 	bl	8002ec0 <writeReg_Burst>

	//set payload length
	writeReg(RH_RF95_REG_22_PAYLOAD_LENGTH, size + RH_RF95_HEADER_LEN);
 8002f9c:	1d21      	adds	r1, r4, #4
 8002f9e:	b2c9      	uxtb	r1, r1
 8002fa0:	2022      	movs	r0, #34	; 0x22
 8002fa2:	f7ff feb7 	bl	8002d14 <writeReg>

	//HAL_Delay(10); //delay some time

	writeReg(RH_RF95_REG_12_IRQ_FLAGS, 0xFF); //clear txdone
 8002fa6:	21ff      	movs	r1, #255	; 0xff
 8002fa8:	2012      	movs	r0, #18
 8002faa:	f7ff feb3 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_01_OP_MODE, 0x03); //TX Mode
 8002fae:	2103      	movs	r1, #3
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	f7ff feaf 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_40_DIO_MAPPING1, 0x40); //DIO0
 8002fb6:	2140      	movs	r1, #64	; 0x40
 8002fb8:	0008      	movs	r0, r1
 8002fba:	f7ff feab 	bl	8002d14 <writeReg>

	//HAL_Delay(10);
	while(readReg(RH_RF95_REG_12_IRQ_FLAGS) != 0x08);
 8002fbe:	2012      	movs	r0, #18
 8002fc0:	f7ff fee0 	bl	8002d84 <readReg>
 8002fc4:	2808      	cmp	r0, #8
 8002fc6:	d1fa      	bne.n	8002fbe <sendPacket+0x6a>

	writeReg(RH_RF95_REG_01_OP_MODE, 0x01); //STDBY
 8002fc8:	2101      	movs	r1, #1
 8002fca:	0008      	movs	r0, r1
 8002fcc:	f7ff fea2 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_12_IRQ_FLAGS, 0xFF); //clear txdone
 8002fd0:	21ff      	movs	r1, #255	; 0xff
 8002fd2:	2012      	movs	r0, #18
 8002fd4:	f7ff fe9e 	bl	8002d14 <writeReg>
	//HAL_Delay(10);
}
 8002fd8:	bd70      	pop	{r4, r5, r6, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	20000063 	.word	0x20000063
 8002fe0:	20000062 	.word	0x20000062
 8002fe4:	20000579 	.word	0x20000579
 8002fe8:	20000578 	.word	0x20000578

08002fec <LORA_INIT>:

void LORA_INIT(void)
{
 8002fec:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 8002fee:	4c31      	ldr	r4, [pc, #196]	; (80030b4 <LORA_INIT+0xc8>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	0020      	movs	r0, r4
 8002ff6:	f7fd fd63 	bl	8000ac0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002ffa:	200a      	movs	r0, #10
 8002ffc:	f7fd fb52 	bl	80006a4 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 8003000:	2201      	movs	r2, #1
 8003002:	0020      	movs	r0, r4
 8003004:	0011      	movs	r1, r2
 8003006:	f7fd fd5b 	bl	8000ac0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800300a:	200a      	movs	r0, #10
 800300c:	f7fd fb4a 	bl	80006a4 <HAL_Delay>

	//initialization
	writeReg(RH_RF95_REG_01_OP_MODE, 0x80); //long range mode
 8003010:	2180      	movs	r1, #128	; 0x80
 8003012:	2001      	movs	r0, #1
 8003014:	f7ff fe7e 	bl	8002d14 <writeReg>
	//readReg(RH_RF95_REG_01_OP_MODE);
	writeReg(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0x00); //tx base addr to 0
 8003018:	2100      	movs	r1, #0
 800301a:	200e      	movs	r0, #14
 800301c:	f7ff fe7a 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0x00); //rx base addr to 0
 8003020:	2100      	movs	r1, #0
 8003022:	200f      	movs	r0, #15
 8003024:	f7ff fe76 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_1D_MODEM_CONFIG1, 0x72); //coding rate and modem config
 8003028:	2172      	movs	r1, #114	; 0x72
 800302a:	201d      	movs	r0, #29
 800302c:	f7ff fe72 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_1E_MODEM_CONFIG2, 0x74); //rxpayloadcrc and spreading factor
 8003030:	2174      	movs	r1, #116	; 0x74
 8003032:	201e      	movs	r0, #30
 8003034:	f7ff fe6e 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_26_MODEM_CONFIG3, 0x04); //LNA gain
 8003038:	2104      	movs	r1, #4
 800303a:	2026      	movs	r0, #38	; 0x26
 800303c:	f7ff fe6a 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_20_PREAMBLE_MSB, 0x00); //preamble MSB
 8003040:	2100      	movs	r1, #0
 8003042:	2020      	movs	r0, #32
 8003044:	f7ff fe66 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_21_PREAMBLE_LSB, 0x08); //premamble LSB
 8003048:	2108      	movs	r1, #8
 800304a:	2021      	movs	r0, #33	; 0x21
 800304c:	f7ff fe62 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_06_FRF_MSB, 0x6C); //freq msb
 8003050:	216c      	movs	r1, #108	; 0x6c
 8003052:	2006      	movs	r0, #6
 8003054:	f7ff fe5e 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_07_FRF_MID, 0x80); //freq mid
 8003058:	2180      	movs	r1, #128	; 0x80
 800305a:	2007      	movs	r0, #7
 800305c:	f7ff fe5a 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_08_FRF_LSB, 0x00); //freq lsb
 8003060:	2100      	movs	r1, #0
 8003062:	2008      	movs	r0, #8
 8003064:	f7ff fe56 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_4D_PA_DAC, 0x04); //padac
 8003068:	2104      	movs	r1, #4
 800306a:	204d      	movs	r0, #77	; 0x4d
 800306c:	f7ff fe52 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_09_PA_CONFIG, 0x88); //output power and PA_BOOST
 8003070:	2188      	movs	r1, #136	; 0x88
 8003072:	2009      	movs	r0, #9
 8003074:	f7ff fe4e 	bl	8002d14 <writeReg>

	//set frequency to 915MHz
	writeReg(RH_RF95_REG_06_FRF_MSB, 0xE4); //freq msb
 8003078:	21e4      	movs	r1, #228	; 0xe4
 800307a:	2006      	movs	r0, #6
 800307c:	f7ff fe4a 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_07_FRF_MID, 0xC0); //freq mid
 8003080:	21c0      	movs	r1, #192	; 0xc0
 8003082:	2007      	movs	r0, #7
 8003084:	f7ff fe46 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_08_FRF_LSB, 0x00); //freq lsb
 8003088:	2100      	movs	r1, #0
 800308a:	2008      	movs	r0, #8
 800308c:	f7ff fe42 	bl	8002d14 <writeReg>

	//set power
	writeReg(RH_RF95_REG_4D_PA_DAC, 0x07); //padac
 8003090:	2107      	movs	r1, #7
 8003092:	204d      	movs	r0, #77	; 0x4d
 8003094:	f7ff fe3e 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_09_PA_CONFIG, 0x8F); //output power and PA_BOOST
 8003098:	218f      	movs	r1, #143	; 0x8f
 800309a:	2009      	movs	r0, #9
 800309c:	f7ff fe3a 	bl	8002d14 <writeReg>

	//set up for rx
	writeReg(RH_RF95_REG_01_OP_MODE, 0x05);
 80030a0:	2105      	movs	r1, #5
 80030a2:	2001      	movs	r0, #1
 80030a4:	f7ff fe36 	bl	8002d14 <writeReg>
	writeReg(RH_RF95_REG_40_DIO_MAPPING1, 0x00);
 80030a8:	2100      	movs	r1, #0
 80030aa:	2040      	movs	r0, #64	; 0x40
 80030ac:	f7ff fe32 	bl	8002d14 <writeReg>
}
 80030b0:	bd10      	pop	{r4, pc}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	50000400 	.word	0x50000400

080030b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030b8:	b510      	push	{r4, lr}
 80030ba:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030bc:	2238      	movs	r2, #56	; 0x38
 80030be:	2100      	movs	r1, #0
 80030c0:	a80e      	add	r0, sp, #56	; 0x38
 80030c2:	f000 fe2e 	bl	8003d22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030c6:	2214      	movs	r2, #20
 80030c8:	2100      	movs	r1, #0
 80030ca:	4668      	mov	r0, sp
 80030cc:	f000 fe29 	bl	8003d22 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030d0:	2224      	movs	r2, #36	; 0x24
 80030d2:	2100      	movs	r1, #0
 80030d4:	a805      	add	r0, sp, #20
 80030d6:	f000 fe24 	bl	8003d22 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030da:	4914      	ldr	r1, [pc, #80]	; (800312c <SystemClock_Config+0x74>)
 80030dc:	4a14      	ldr	r2, [pc, #80]	; (8003130 <SystemClock_Config+0x78>)
 80030de:	680b      	ldr	r3, [r1, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80030e0:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030e2:	401a      	ands	r2, r3
 80030e4:	2380      	movs	r3, #128	; 0x80
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	4313      	orrs	r3, r2
 80030ea:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80030ec:	2310      	movs	r3, #16
 80030ee:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80030f0:	3b0f      	subs	r3, #15
 80030f2:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80030f4:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030f6:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80030fc:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80030fe:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003100:	f7fe f816 	bl	8001130 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003104:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003106:	0021      	movs	r1, r4
 8003108:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800310a:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800310c:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800310e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003110:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003112:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003114:	f7fe fa90 	bl	8001638 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8003118:	2309      	movs	r3, #9
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800311a:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800311c:	9305      	str	r3, [sp, #20]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800311e:	9408      	str	r4, [sp, #32]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003120:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003122:	f7fe fb61 	bl	80017e8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8003126:	b01c      	add	sp, #112	; 0x70
 8003128:	bd10      	pop	{r4, pc}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	40007000 	.word	0x40007000
 8003130:	ffffe7ff 	.word	0xffffe7ff

08003134 <main>:
{
 8003134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003136:	b091      	sub	sp, #68	; 0x44
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003138:	ad09      	add	r5, sp, #36	; 0x24
  HAL_Init();
 800313a:	f7fd fa91 	bl	8000660 <HAL_Init>
  SystemClock_Config();
 800313e:	f7ff ffbb 	bl	80030b8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003142:	2214      	movs	r2, #20
 8003144:	2100      	movs	r1, #0
 8003146:	0028      	movs	r0, r5
 8003148:	f000 fdeb 	bl	8003d22 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800314c:	2104      	movs	r1, #4
 800314e:	4eb5      	ldr	r6, [pc, #724]	; (8003424 <main+0x2f0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003150:	2702      	movs	r7, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003152:	6af2      	ldr	r2, [r6, #44]	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET);
 8003154:	2480      	movs	r4, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003156:	430a      	orrs	r2, r1
 8003158:	62f2      	str	r2, [r6, #44]	; 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800315a:	2201      	movs	r2, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800315c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET);
 800315e:	0224      	lsls	r4, r4, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003160:	400b      	ands	r3, r1
 8003162:	9306      	str	r3, [sp, #24]
 8003164:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003166:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET);
 8003168:	0021      	movs	r1, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800316a:	4313      	orrs	r3, r2
 800316c:	62f3      	str	r3, [r6, #44]	; 0x2c
 800316e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET);
 8003170:	48ad      	ldr	r0, [pc, #692]	; (8003428 <main+0x2f4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003172:	4013      	ands	r3, r2
 8003174:	9307      	str	r3, [sp, #28]
 8003176:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003178:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET);
 800317a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800317c:	433b      	orrs	r3, r7
 800317e:	62f3      	str	r3, [r6, #44]	; 0x2c
 8003180:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003182:	403b      	ands	r3, r7
 8003184:	9308      	str	r3, [sp, #32]
 8003186:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET);
 8003188:	f7fd fc9a 	bl	8000ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 800318c:	20a0      	movs	r0, #160	; 0xa0
 800318e:	2201      	movs	r2, #1
 8003190:	2110      	movs	r1, #16
 8003192:	05c0      	lsls	r0, r0, #23
 8003194:	f7fd fc94 	bl	8000ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LORA_RST_Pin|HR_RESET_Pin, GPIO_PIN_SET);
 8003198:	2201      	movs	r2, #1
 800319a:	2121      	movs	r1, #33	; 0x21
 800319c:	48a3      	ldr	r0, [pc, #652]	; (800342c <main+0x2f8>)
 800319e:	f7fd fc8f 	bl	8000ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, oled_NSS_Pin|oled_DC_Pin|DEBUG_Pin, GPIO_PIN_RESET);
 80031a2:	21a2      	movs	r1, #162	; 0xa2
 80031a4:	2200      	movs	r2, #0
 80031a6:	01c9      	lsls	r1, r1, #7
 80031a8:	48a0      	ldr	r0, [pc, #640]	; (800342c <main+0x2f8>)
 80031aa:	f7fd fc89 	bl	8000ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(oled_RES_GPIO_Port, oled_RES_Pin, GPIO_PIN_RESET);
 80031ae:	2180      	movs	r1, #128	; 0x80
 80031b0:	20a0      	movs	r0, #160	; 0xa0
 80031b2:	2200      	movs	r2, #0
 80031b4:	0049      	lsls	r1, r1, #1
 80031b6:	05c0      	lsls	r0, r0, #23
 80031b8:	f7fd fc82 	bl	8000ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HR_MFIO_Pin */
  GPIO_InitStruct.Pin = HR_MFIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031bc:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = HR_MFIO_Pin;
 80031be:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c0:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HR_MFIO_GPIO_Port, &GPIO_InitStruct);
 80031c2:	0029      	movs	r1, r5
 80031c4:	4898      	ldr	r0, [pc, #608]	; (8003428 <main+0x2f4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c6:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ca:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(HR_MFIO_GPIO_Port, &GPIO_InitStruct);
 80031cc:	f7fd fbc2 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pin : dim_Pin */
  GPIO_InitStruct.Pin = dim_Pin;
 80031d0:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(dim_GPIO_Port, &GPIO_InitStruct);
 80031d2:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = dim_Pin;
 80031d4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80031d6:	4b96      	ldr	r3, [pc, #600]	; (8003430 <main+0x2fc>)
  HAL_GPIO_Init(dim_GPIO_Port, &GPIO_InitStruct);
 80031d8:	0029      	movs	r1, r5
 80031da:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80031dc:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	60ac      	str	r4, [r5, #8]
  HAL_GPIO_Init(dim_GPIO_Port, &GPIO_InitStruct);
 80031e0:	f7fd fbb8 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_NSS_Pin oled_RES_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin|oled_RES_Pin;
 80031e4:	2388      	movs	r3, #136	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e6:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = LORA_NSS_Pin|oled_RES_Pin;
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ec:	3b10      	subs	r3, #16
 80031ee:	3bff      	subs	r3, #255	; 0xff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f0:	0029      	movs	r1, r5
 80031f2:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031f4:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f8:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fa:	f7fd fbab 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin oled_NSS_Pin oled_DC_Pin HR_RESET_Pin 
                           DEBUG_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|oled_NSS_Pin|oled_DC_Pin|HR_RESET_Pin 
 80031fe:	4b8d      	ldr	r3, [pc, #564]	; (8003434 <main+0x300>)
                          |DEBUG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003200:	0029      	movs	r1, r5
  GPIO_InitStruct.Pin = LORA_RST_Pin|oled_NSS_Pin|oled_DC_Pin|HR_RESET_Pin 
 8003202:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003204:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003206:	4889      	ldr	r0, [pc, #548]	; (800342c <main+0x2f8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003208:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320c:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320e:	f7fd fba1 	bl	8000954 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO_Pin */
  GPIO_InitStruct.Pin = LORA_DIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003212:	4b89      	ldr	r3, [pc, #548]	; (8003438 <main+0x304>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LORA_DIO_GPIO_Port, &GPIO_InitStruct);
 8003214:	0029      	movs	r1, r5
 8003216:	4885      	ldr	r0, [pc, #532]	; (800342c <main+0x2f8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003218:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pin = LORA_DIO_Pin;
 800321a:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	60ac      	str	r4, [r5, #8]
  HAL_GPIO_Init(LORA_DIO_GPIO_Port, &GPIO_InitStruct);
 800321e:	f7fd fb99 	bl	8000954 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003222:	0022      	movs	r2, r4
 8003224:	0021      	movs	r1, r4
 8003226:	2005      	movs	r0, #5
 8003228:	f7fd fa4c 	bl	80006c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800322c:	2005      	movs	r0, #5
 800322e:	f7fd fa79 	bl	8000724 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003232:	2201      	movs	r2, #1
 8003234:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003236:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003238:	4313      	orrs	r3, r2
 800323a:	6333      	str	r3, [r6, #48]	; 0x30
 800323c:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800323e:	200a      	movs	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003240:	4013      	ands	r3, r2
 8003242:	9305      	str	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003244:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003246:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003248:	f7fd fa3c 	bl	80006c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800324c:	200a      	movs	r0, #10
 800324e:	f7fd fa69 	bl	8000724 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 8003252:	487a      	ldr	r0, [pc, #488]	; (800343c <main+0x308>)
 8003254:	4b7a      	ldr	r3, [pc, #488]	; (8003440 <main+0x30c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003256:	2682      	movs	r6, #130	; 0x82
  hspi1.Instance = SPI1;
 8003258:	6003      	str	r3, [r0, #0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003260:	3be9      	subs	r3, #233	; 0xe9
 8003262:	3bff      	subs	r3, #255	; 0xff
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003264:	0076      	lsls	r6, r6, #1
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003266:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8003268:	3b11      	subs	r3, #17
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800326a:	6046      	str	r6, [r0, #4]
  hspi1.Init.CRCPolynomial = 7;
 800326c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800326e:	6084      	str	r4, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003270:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003272:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003274:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003276:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003278:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800327a:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800327c:	f7fe fc1e 	bl	8001abc <HAL_SPI_Init>
  huart1.Instance = USART1;
 8003280:	4f70      	ldr	r7, [pc, #448]	; (8003444 <main+0x310>)
 8003282:	4b71      	ldr	r3, [pc, #452]	; (8003448 <main+0x314>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003284:	0038      	movs	r0, r7
  huart1.Instance = USART1;
 8003286:	603b      	str	r3, [r7, #0]
  huart1.Init.BaudRate = 9600;
 8003288:	2396      	movs	r3, #150	; 0x96
 800328a:	019b      	lsls	r3, r3, #6
 800328c:	607b      	str	r3, [r7, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800328e:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003290:	60bc      	str	r4, [r7, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003292:	617b      	str	r3, [r7, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003294:	60fc      	str	r4, [r7, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003296:	613c      	str	r4, [r7, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003298:	61bc      	str	r4, [r7, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800329a:	61fc      	str	r4, [r7, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800329c:	623c      	str	r4, [r7, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800329e:	627c      	str	r4, [r7, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032a0:	f7ff fa56 	bl	8002750 <HAL_UART_Init>
   HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 80032a4:	2201      	movs	r2, #1
 80032a6:	0021      	movs	r1, r4
 80032a8:	201b      	movs	r0, #27
 80032aa:	f7fd fa0b 	bl	80006c4 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032ae:	201b      	movs	r0, #27
 80032b0:	f7fd fa38 	bl	8000724 <HAL_NVIC_EnableIRQ>
  hspi2.Instance = SPI2;
 80032b4:	4865      	ldr	r0, [pc, #404]	; (800344c <main+0x318>)
 80032b6:	4b66      	ldr	r3, [pc, #408]	; (8003450 <main+0x31c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80032b8:	6046      	str	r6, [r0, #4]
  hspi2.Instance = SPI2;
 80032ba:	6003      	str	r3, [r0, #0]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80032c2:	3be9      	subs	r3, #233	; 0xe9
 80032c4:	3bff      	subs	r3, #255	; 0xff
 80032c6:	61c3      	str	r3, [r0, #28]
  hspi2.Init.CRCPolynomial = 7;
 80032c8:	3b11      	subs	r3, #17
 80032ca:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80032cc:	6084      	str	r4, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80032ce:	60c4      	str	r4, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032d0:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032d2:	6144      	str	r4, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032d4:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80032d6:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032d8:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80032da:	f7fe fbef 	bl	8001abc <HAL_SPI_Init>
  hi2c1.Instance = I2C1;
 80032de:	4e5d      	ldr	r6, [pc, #372]	; (8003454 <main+0x320>)
 80032e0:	4b5d      	ldr	r3, [pc, #372]	; (8003458 <main+0x324>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032e2:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 80032e4:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x00000708;
 80032e6:	23e1      	movs	r3, #225	; 0xe1
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032ec:	2301      	movs	r3, #1
  hi2c1.Init.OwnAddress1 = 0;
 80032ee:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032f0:	60f3      	str	r3, [r6, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032f2:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80032f4:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80032f6:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032f8:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032fa:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032fc:	f7fd fd0e 	bl	8000d1c <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003300:	0021      	movs	r1, r4
 8003302:	0030      	movs	r0, r6
 8003304:	f7fd fe8e 	bl	8001024 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003308:	0021      	movs	r1, r4
 800330a:	0030      	movs	r0, r6
 800330c:	f7fd feb0 	bl	8001070 <HAL_I2CEx_ConfigDigitalFilter>
  turnOnScreen(); //screen
 8003310:	f000 f982 	bl	8003618 <turnOnScreen>
  GPS_INIT(); //gps
 8003314:	f7ff fa50 	bl	80027b8 <GPS_INIT>
  LORA_INIT(); //lora
 8003318:	f7ff fe68 	bl	8002fec <LORA_INIT>
  HR_APP_MODE(); //call function to put module in application mode
 800331c:	f7ff fae8 	bl	80028f0 <HR_APP_MODE>
  HR_INIT();
 8003320:	f7ff fb70 	bl	8002a04 <HR_INIT>
  HR_MFIO_SET();
 8003324:	f7ff fb10 	bl	8002948 <HR_MFIO_SET>
  shut30101();
 8003328:	f7ff fbf4 	bl	8002b14 <shut30101>
  if(HAL_UART_Receive_DMA(&huart1, tempdata, sizeof(tempdata)) != HAL_OK)
 800332c:	4e4b      	ldr	r6, [pc, #300]	; (800345c <main+0x328>)
 800332e:	2246      	movs	r2, #70	; 0x46
 8003330:	0031      	movs	r1, r6
 8003332:	0038      	movs	r0, r7
 8003334:	f7fe fe6c 	bl	8002010 <HAL_UART_Receive_DMA>
			  isDim = 1;
 8003338:	2301      	movs	r3, #1
 800333a:	9301      	str	r3, [sp, #4]
	  if ((&huart1)->RxState == HAL_UART_STATE_READY)
 800333c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800333e:	2b20      	cmp	r3, #32
 8003340:	d104      	bne.n	800334c <main+0x218>
		  HAL_UART_Receive_DMA(&huart1, tempdata, sizeof(tempdata)/sizeof(tempdata[0]));
 8003342:	2246      	movs	r2, #70	; 0x46
 8003344:	0031      	movs	r1, r6
 8003346:	0038      	movs	r0, r7
 8003348:	f7fe fe62 	bl	8002010 <HAL_UART_Receive_DMA>
	  if(GPS_FLAG)
 800334c:	4b44      	ldr	r3, [pc, #272]	; (8003460 <main+0x32c>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	9302      	str	r3, [sp, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d042      	beq.n	80033dc <main+0x2a8>
		  if (tempdata[0] != '0') //if there is a fix
 8003356:	7833      	ldrb	r3, [r6, #0]
 8003358:	2b30      	cmp	r3, #48	; 0x30
 800335a:	d103      	bne.n	8003364 <main+0x230>
		  GPS_FLAG = 0;
 800335c:	2200      	movs	r2, #0
 800335e:	4b40      	ldr	r3, [pc, #256]	; (8003460 <main+0x32c>)
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	e7eb      	b.n	800333c <main+0x208>
 8003364:	2300      	movs	r3, #0
						  data[j] = tempdata[i];
 8003366:	483f      	ldr	r0, [pc, #252]	; (8003464 <main+0x330>)
 8003368:	2201      	movs	r2, #1
 800336a:	001c      	movs	r4, r3
 800336c:	4684      	mov	ip, r0
 800336e:	9302      	str	r3, [sp, #8]
					  if ((tempdata[i] == '$') && (tempdata[i+1] == 'G'))
 8003370:	1e50      	subs	r0, r2, #1
 8003372:	5c30      	ldrb	r0, [r6, r0]
 8003374:	2824      	cmp	r0, #36	; 0x24
 8003376:	d102      	bne.n	800337e <main+0x24a>
 8003378:	5cb1      	ldrb	r1, [r6, r2]
 800337a:	2947      	cmp	r1, #71	; 0x47
 800337c:	d002      	beq.n	8003384 <main+0x250>
					  if (found)
 800337e:	9902      	ldr	r1, [sp, #8]
 8003380:	2900      	cmp	r1, #0
 8003382:	d009      	beq.n	8003398 <main+0x264>
						  data[j] = tempdata[i];
 8003384:	4661      	mov	r1, ip
 8003386:	54c8      	strb	r0, [r1, r3]
 8003388:	9901      	ldr	r1, [sp, #4]
						  j++;
 800338a:	3301      	adds	r3, #1
 800338c:	b2db      	uxtb	r3, r3
 800338e:	9102      	str	r1, [sp, #8]
						  if (tempdata[i] == ',')
 8003390:	282c      	cmp	r0, #44	; 0x2c
 8003392:	d101      	bne.n	8003398 <main+0x264>
							  commaCnt++;
 8003394:	1c61      	adds	r1, r4, #1
 8003396:	b2cc      	uxtb	r4, r1
 8003398:	3201      	adds	r2, #1
			  for(int i = 0; i < ((sizeof(tempdata) - 1)); i++)
 800339a:	2a46      	cmp	r2, #70	; 0x46
 800339c:	d001      	beq.n	80033a2 <main+0x26e>
				  if (commaCnt < 8)
 800339e:	2c07      	cmp	r4, #7
 80033a0:	d9e6      	bls.n	8003370 <main+0x23c>
			  if (parseData())
 80033a2:	f7ff fa29 	bl	80027f8 <parseData>
 80033a6:	2800      	cmp	r0, #0
 80033a8:	d0d8      	beq.n	800335c <main+0x228>
 80033aa:	2100      	movs	r1, #0
					  test[i] = (uint8_t) sendMeasurements[i];
 80033ac:	4a2e      	ldr	r2, [pc, #184]	; (8003468 <main+0x334>)
 80033ae:	5c53      	ldrb	r3, [r2, r1]
 80033b0:	546b      	strb	r3, [r5, r1]
				  for(int i = 0; i < (sizeof(test) / sizeof(test[0])); i++)
 80033b2:	3101      	adds	r1, #1
 80033b4:	291b      	cmp	r1, #27
 80033b6:	d1fa      	bne.n	80033ae <main+0x27a>
				  sendPacket(test, sizeof(test));
 80033b8:	0028      	movs	r0, r5
 80033ba:	f7ff fdcb 	bl	8002f54 <sendPacket>
				  writeReg(RH_RF95_REG_01_OP_MODE, 0x05);
 80033be:	9801      	ldr	r0, [sp, #4]
 80033c0:	2105      	movs	r1, #5
 80033c2:	f7ff fca7 	bl	8002d14 <writeReg>
				  writeReg(RH_RF95_REG_40_DIO_MAPPING1, 0x00);
 80033c6:	2100      	movs	r1, #0
 80033c8:	2040      	movs	r0, #64	; 0x40
 80033ca:	f7ff fca3 	bl	8002d14 <writeReg>
				  HAL_Delay(500);
 80033ce:	20fa      	movs	r0, #250	; 0xfa
 80033d0:	0040      	lsls	r0, r0, #1
 80033d2:	f7fd f967 	bl	80006a4 <HAL_Delay>
				  start30101();
 80033d6:	f7ff fbc7 	bl	8002b68 <start30101>
 80033da:	e7bf      	b.n	800335c <main+0x228>
	  else if(LORA_FLAG)
 80033dc:	4c23      	ldr	r4, [pc, #140]	; (800346c <main+0x338>)
 80033de:	7823      	ldrb	r3, [r4, #0]
 80033e0:	9303      	str	r3, [sp, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <main+0x2be>
		  receiveData();
 80033e6:	f7ff fd3f 	bl	8002e68 <receiveData>
		  LORA_FLAG = 0;
 80033ea:	466b      	mov	r3, sp
 80033ec:	7a1b      	ldrb	r3, [r3, #8]
 80033ee:	7023      	strb	r3, [r4, #0]
 80033f0:	e7a4      	b.n	800333c <main+0x208>
	  else if(DIM_FLAG)
 80033f2:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <main+0x33c>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0a0      	beq.n	800333c <main+0x208>
		  if(isDim)
 80033fa:	4c1e      	ldr	r4, [pc, #120]	; (8003474 <main+0x340>)
			  sendCMD(contrastHigh, (uint16_t)sizeof(contrastHigh));
 80033fc:	2102      	movs	r1, #2
		  if(isDim)
 80033fe:	7823      	ldrb	r3, [r4, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d009      	beq.n	8003418 <main+0x2e4>
			  sendCMD(contrastHigh, (uint16_t)sizeof(contrastHigh));
 8003404:	481c      	ldr	r0, [pc, #112]	; (8003478 <main+0x344>)
 8003406:	f000 f8c3 	bl	8003590 <sendCMD>
			  isDim = 0;
 800340a:	466b      	mov	r3, sp
 800340c:	7b1b      	ldrb	r3, [r3, #12]
			  isDim = 1;
 800340e:	7023      	strb	r3, [r4, #0]
		  DIM_FLAG = 0;
 8003410:	2300      	movs	r3, #0
 8003412:	4a17      	ldr	r2, [pc, #92]	; (8003470 <main+0x33c>)
 8003414:	7013      	strb	r3, [r2, #0]
 8003416:	e791      	b.n	800333c <main+0x208>
			  sendCMD(contrastLow, (uint16_t)sizeof(contrastLow));
 8003418:	4818      	ldr	r0, [pc, #96]	; (800347c <main+0x348>)
 800341a:	f000 f8b9 	bl	8003590 <sendCMD>
			  isDim = 1;
 800341e:	466b      	mov	r3, sp
 8003420:	791b      	ldrb	r3, [r3, #4]
 8003422:	e7f4      	b.n	800340e <main+0x2da>
 8003424:	40021000 	.word	0x40021000
 8003428:	50000800 	.word	0x50000800
 800342c:	50000400 	.word	0x50000400
 8003430:	10210000 	.word	0x10210000
 8003434:	00005121 	.word	0x00005121
 8003438:	10110000 	.word	0x10110000
 800343c:	20000840 	.word	0x20000840
 8003440:	40013000 	.word	0x40013000
 8003444:	2000075c 	.word	0x2000075c
 8003448:	40013800 	.word	0x40013800
 800344c:	2000066c 	.word	0x2000066c
 8003450:	40003800 	.word	0x40003800
 8003454:	200006c8 	.word	0x200006c8
 8003458:	40005400 	.word	0x40005400
 800345c:	200005cd 	.word	0x200005cd
 8003460:	2000057b 	.word	0x2000057b
 8003464:	20000583 	.word	0x20000583
 8003468:	2000080e 	.word	0x2000080e
 800346c:	2000057e 	.word	0x2000057e
 8003470:	2000057a 	.word	0x2000057a
 8003474:	200005cc 	.word	0x200005cc
 8003478:	20000064 	.word	0x20000064
 800347c:	20000066 	.word	0x20000066

08003480 <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003480:	b5f0      	push	{r4, r5, r6, r7, lr}
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003482:	2080      	movs	r0, #128	; 0x80
 8003484:	2480      	movs	r4, #128	; 0x80
 8003486:	2680      	movs	r6, #128	; 0x80
 8003488:	2520      	movs	r5, #32
	NVIC_DisableIRQ(EXTI4_15_IRQn);
	NVIC_DisableIRQ(EXTI0_1_IRQn);
	NVIC_DisableIRQ(USART1_IRQn);
	NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);

	GPS_FLAG = 1; //GPS
 800348a:	2101      	movs	r1, #1
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <HAL_UART_RxCpltCallback+0x40>)
 800348e:	0524      	lsls	r4, r4, #20
 8003490:	1d1a      	adds	r2, r3, #4
 8003492:	00c0      	lsls	r0, r0, #3
 8003494:	67d6      	str	r6, [r2, #124]	; 0x7c
 8003496:	67d5      	str	r5, [r2, #124]	; 0x7c
 8003498:	67d4      	str	r4, [r2, #124]	; 0x7c
 800349a:	67d0      	str	r0, [r2, #124]	; 0x7c
 800349c:	4a09      	ldr	r2, [pc, #36]	; (80034c4 <HAL_UART_RxCpltCallback+0x44>)
 800349e:	7011      	strb	r1, [r2, #0]
	__HAL_UART_FLUSH_DRREGISTER(&huart1); // Clear the buffer to prevent overrun
 80034a0:	4a09      	ldr	r2, [pc, #36]	; (80034c8 <HAL_UART_RxCpltCallback+0x48>)
 80034a2:	3107      	adds	r1, #7
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	6997      	ldr	r7, [r2, #24]
 80034a8:	4339      	orrs	r1, r7
 80034aa:	6191      	str	r1, [r2, #24]
 80034ac:	2110      	movs	r1, #16
 80034ae:	6997      	ldr	r7, [r2, #24]
 80034b0:	4339      	orrs	r1, r7
 80034b2:	6191      	str	r1, [r2, #24]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80034b4:	601e      	str	r6, [r3, #0]
 80034b6:	601d      	str	r5, [r3, #0]
 80034b8:	601c      	str	r4, [r3, #0]
 80034ba:	6018      	str	r0, [r3, #0]

	NVIC_EnableIRQ(EXTI4_15_IRQn);
	NVIC_EnableIRQ(EXTI0_1_IRQn);
	NVIC_EnableIRQ(USART1_IRQn);
	NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
}
 80034bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	e000e100 	.word	0xe000e100
 80034c4:	2000057b 	.word	0x2000057b
 80034c8:	2000075c 	.word	0x2000075c

080034cc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80034ce:	2320      	movs	r3, #32
 80034d0:	2680      	movs	r6, #128	; 0x80
 80034d2:	4d26      	ldr	r5, [pc, #152]	; (800356c <HAL_GPIO_EXTI_Callback+0xa0>)
	NVIC_DisableIRQ(EXTI4_15_IRQn);
	NVIC_DisableIRQ(EXTI0_1_IRQn);
	NVIC_DisableIRQ(USART1_IRQn);
	NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);

	if(GPIO_Pin == HR_MFIO_Pin) //HR
 80034d4:	2280      	movs	r2, #128	; 0x80
 80034d6:	67ee      	str	r6, [r5, #124]	; 0x7c
 80034d8:	67eb      	str	r3, [r5, #124]	; 0x7c
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	051b      	lsls	r3, r3, #20
 80034de:	67eb      	str	r3, [r5, #124]	; 0x7c
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	4c23      	ldr	r4, [pc, #140]	; (8003570 <HAL_GPIO_EXTI_Callback+0xa4>)
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	67eb      	str	r3, [r5, #124]	; 0x7c
{
 80034e8:	af00      	add	r7, sp, #0
	if(GPIO_Pin == HR_MFIO_Pin) //HR
 80034ea:	0212      	lsls	r2, r2, #8
 80034ec:	0023      	movs	r3, r4
 80034ee:	4290      	cmp	r0, r2
 80034f0:	d127      	bne.n	8003542 <HAL_GPIO_EXTI_Callback+0x76>
	{
 80034f2:	466b      	mov	r3, sp
		uint8_t received_data[MAX_BUFF];
 80034f4:	466a      	mov	r2, sp
	{
 80034f6:	607b      	str	r3, [r7, #4]
		uint8_t received_data[MAX_BUFF];
 80034f8:	4b1e      	ldr	r3, [pc, #120]	; (8003574 <HAL_GPIO_EXTI_Callback+0xa8>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	3307      	adds	r3, #7
 80034fe:	08db      	lsrs	r3, r3, #3
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	469d      	mov	sp, r3
		HR_READ(received_data);
 8003506:	4668      	mov	r0, sp
 8003508:	f7ff fb92 	bl	8002c30 <HR_READ>

		if(!HR_FLAG)
 800350c:	4b1a      	ldr	r3, [pc, #104]	; (8003578 <HAL_GPIO_EXTI_Callback+0xac>)
 800350e:	781a      	ldrb	r2, [r3, #0]
 8003510:	2a00      	cmp	r2, #0
 8003512:	d104      	bne.n	800351e <HAL_GPIO_EXTI_Callback+0x52>
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003514:	6026      	str	r6, [r4, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	469d      	mov	sp, r3

	NVIC_EnableIRQ(EXTI4_15_IRQn);
	NVIC_EnableIRQ(EXTI0_1_IRQn);
	NVIC_EnableIRQ(USART1_IRQn);
	NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
}
 800351a:	46bd      	mov	sp, r7
 800351c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			HR_FLAG = 0;
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
			user1Info(heartrate, SPO2);
 8003522:	4b16      	ldr	r3, [pc, #88]	; (800357c <HAL_GPIO_EXTI_Callback+0xb0>)
 8003524:	7819      	ldrb	r1, [r3, #0]
 8003526:	4b16      	ldr	r3, [pc, #88]	; (8003580 <HAL_GPIO_EXTI_Callback+0xb4>)
 8003528:	7818      	ldrb	r0, [r3, #0]
 800352a:	f000 f9f9 	bl	8003920 <user1Info>
 800352e:	2320      	movs	r3, #32
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003530:	67ee      	str	r6, [r5, #124]	; 0x7c
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003532:	6023      	str	r3, [r4, #0]
 8003534:	2380      	movs	r3, #128	; 0x80
 8003536:	051b      	lsls	r3, r3, #20
 8003538:	6023      	str	r3, [r4, #0]
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	6023      	str	r3, [r4, #0]
 8003540:	e7e9      	b.n	8003516 <HAL_GPIO_EXTI_Callback+0x4a>
	if (GPIO_Pin == GPIO_PIN_1) //LORA RECEIVE
 8003542:	2802      	cmp	r0, #2
 8003544:	d10d      	bne.n	8003562 <HAL_GPIO_EXTI_Callback+0x96>
		LORA_FLAG = 1;
 8003546:	2101      	movs	r1, #1
 8003548:	4a0e      	ldr	r2, [pc, #56]	; (8003584 <HAL_GPIO_EXTI_Callback+0xb8>)
 800354a:	7011      	strb	r1, [r2, #0]
 800354c:	2280      	movs	r2, #128	; 0x80
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	3a60      	subs	r2, #96	; 0x60
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	2280      	movs	r2, #128	; 0x80
 8003556:	0512      	lsls	r2, r2, #20
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	2280      	movs	r2, #128	; 0x80
 800355c:	00d2      	lsls	r2, r2, #3
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e7db      	b.n	800351a <HAL_GPIO_EXTI_Callback+0x4e>
	else if (GPIO_Pin == GPIO_PIN_0) //DIM SCREEN
 8003562:	2801      	cmp	r0, #1
 8003564:	d1f2      	bne.n	800354c <HAL_GPIO_EXTI_Callback+0x80>
		DIM_FLAG = 1;
 8003566:	4a08      	ldr	r2, [pc, #32]	; (8003588 <HAL_GPIO_EXTI_Callback+0xbc>)
 8003568:	7010      	strb	r0, [r2, #0]
 800356a:	e7ef      	b.n	800354c <HAL_GPIO_EXTI_Callback+0x80>
 800356c:	e000e104 	.word	0xe000e104
 8003570:	e000e100 	.word	0xe000e100
 8003574:	2000005b 	.word	0x2000005b
 8003578:	2000057c 	.word	0x2000057c
 800357c:	20000580 	.word	0x20000580
 8003580:	200005ca 	.word	0x200005ca
 8003584:	2000057e 	.word	0x2000057e
 8003588:	2000057a 	.word	0x2000057a

0800358c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800358c:	4770      	bx	lr
	...

08003590 <sendCMD>:
	sendCMD(page,(uint16_t)sizeof(page));
	sendCMD(col, (uint16_t)sizeof(col));
	sendString(message,0x00);
}

void sendCMD(uint8_t *cmd, uint16_t size) {
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	000f      	movs	r7, r1
	//set dc low
	HAL_GPIO_WritePin(oled_DC_GPIO_Port,  oled_DC_Pin, GPIO_PIN_RESET);
	//set CS low

	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_RESET);
 8003594:	2580      	movs	r5, #128	; 0x80
	HAL_GPIO_WritePin(oled_DC_GPIO_Port,  oled_DC_Pin, GPIO_PIN_RESET);
 8003596:	2180      	movs	r1, #128	; 0x80
 8003598:	4c0c      	ldr	r4, [pc, #48]	; (80035cc <sendCMD+0x3c>)
void sendCMD(uint8_t *cmd, uint16_t size) {
 800359a:	0006      	movs	r6, r0
	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_RESET);
 800359c:	016d      	lsls	r5, r5, #5
	HAL_GPIO_WritePin(oled_DC_GPIO_Port,  oled_DC_Pin, GPIO_PIN_RESET);
 800359e:	0020      	movs	r0, r4
 80035a0:	2200      	movs	r2, #0
 80035a2:	01c9      	lsls	r1, r1, #7
 80035a4:	f7fd fa8c 	bl	8000ac0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_RESET);
 80035a8:	0029      	movs	r1, r5
 80035aa:	0020      	movs	r0, r4
 80035ac:	2200      	movs	r2, #0
 80035ae:	f7fd fa87 	bl	8000ac0 <HAL_GPIO_WritePin>
	//send cmd
	HAL_SPI_Transmit(&hspi2, cmd, size, 1000);
 80035b2:	23fa      	movs	r3, #250	; 0xfa
 80035b4:	003a      	movs	r2, r7
 80035b6:	0031      	movs	r1, r6
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4805      	ldr	r0, [pc, #20]	; (80035d0 <sendCMD+0x40>)
 80035bc:	f7fe fabe 	bl	8001b3c <HAL_SPI_Transmit>
	//set CS high

	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_SET);
 80035c0:	0029      	movs	r1, r5
 80035c2:	2201      	movs	r2, #1
 80035c4:	0020      	movs	r0, r4
 80035c6:	f7fd fa7b 	bl	8000ac0 <HAL_GPIO_WritePin>

}
 80035ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035cc:	50000400 	.word	0x50000400
 80035d0:	2000066c 	.word	0x2000066c

080035d4 <sendDATA>:

void sendDATA(uint8_t *data, uint16_t size) {
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d6:	000f      	movs	r7, r1
	//set dc high

	HAL_GPIO_WritePin(oled_DC_GPIO_Port, oled_DC_Pin, GPIO_PIN_SET);
	//set CS low

	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_RESET);
 80035d8:	2580      	movs	r5, #128	; 0x80
	HAL_GPIO_WritePin(oled_DC_GPIO_Port, oled_DC_Pin, GPIO_PIN_SET);
 80035da:	2180      	movs	r1, #128	; 0x80
 80035dc:	4c0c      	ldr	r4, [pc, #48]	; (8003610 <sendDATA+0x3c>)
void sendDATA(uint8_t *data, uint16_t size) {
 80035de:	0006      	movs	r6, r0
	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_RESET);
 80035e0:	016d      	lsls	r5, r5, #5
	HAL_GPIO_WritePin(oled_DC_GPIO_Port, oled_DC_Pin, GPIO_PIN_SET);
 80035e2:	0020      	movs	r0, r4
 80035e4:	2201      	movs	r2, #1
 80035e6:	01c9      	lsls	r1, r1, #7
 80035e8:	f7fd fa6a 	bl	8000ac0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_RESET);
 80035ec:	0029      	movs	r1, r5
 80035ee:	0020      	movs	r0, r4
 80035f0:	2200      	movs	r2, #0
 80035f2:	f7fd fa65 	bl	8000ac0 <HAL_GPIO_WritePin>
	//sendData
	//for(int i=0; i<dataSize;i++);
	HAL_SPI_Transmit(&hspi2, data, size, 1000);
 80035f6:	23fa      	movs	r3, #250	; 0xfa
 80035f8:	003a      	movs	r2, r7
 80035fa:	0031      	movs	r1, r6
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4805      	ldr	r0, [pc, #20]	; (8003614 <sendDATA+0x40>)
 8003600:	f7fe fa9c 	bl	8001b3c <HAL_SPI_Transmit>
	//set CS high
	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_SET);
 8003604:	0029      	movs	r1, r5
 8003606:	2201      	movs	r2, #1
 8003608:	0020      	movs	r0, r4
 800360a:	f7fd fa59 	bl	8000ac0 <HAL_GPIO_WritePin>
	//set dc high

	//HAL_GPIO_WritePin(oled_DC_GPIO_Port, oled_DC_Pin, GPIO_PIN_RESET);
}
 800360e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003610:	50000400 	.word	0x50000400
 8003614:	2000066c 	.word	0x2000066c

08003618 <turnOnScreen>:
HAL_GPIO_WritePin(oled_RES_GPIO_Port, oled_RES_Pin, GPIO_PIN_SET);
 8003618:	2180      	movs	r1, #128	; 0x80
 800361a:	20a0      	movs	r0, #160	; 0xa0
void turnOnScreen(){
 800361c:	b530      	push	{r4, r5, lr}
HAL_GPIO_WritePin(oled_RES_GPIO_Port, oled_RES_Pin, GPIO_PIN_SET);
 800361e:	2201      	movs	r2, #1
void turnOnScreen(){
 8003620:	b085      	sub	sp, #20
HAL_GPIO_WritePin(oled_RES_GPIO_Port, oled_RES_Pin, GPIO_PIN_SET);
 8003622:	0049      	lsls	r1, r1, #1
 8003624:	05c0      	lsls	r0, r0, #23
 8003626:	f7fd fa4b 	bl	8000ac0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(oled_NSS_GPIO_Port, oled_NSS_Pin, GPIO_PIN_SET);
 800362a:	2180      	movs	r1, #128	; 0x80
	uint8_t turnOn[] = {0xA8, 0x3F, 0xD3, 0x00, 0x20,0x10, 0xAF, 0xAC};// 0xAF}; //need to change
 800362c:	2508      	movs	r5, #8
HAL_GPIO_WritePin(oled_NSS_GPIO_Port, oled_NSS_Pin, GPIO_PIN_SET);
 800362e:	2201      	movs	r2, #1
 8003630:	0149      	lsls	r1, r1, #5
 8003632:	480f      	ldr	r0, [pc, #60]	; (8003670 <turnOnScreen+0x58>)
 8003634:	f7fd fa44 	bl	8000ac0 <HAL_GPIO_WritePin>
	uint8_t turnOn[] = {0xA8, 0x3F, 0xD3, 0x00, 0x20,0x10, 0xAF, 0xAC};// 0xAF}; //need to change
 8003638:	4c0e      	ldr	r4, [pc, #56]	; (8003674 <turnOnScreen+0x5c>)
 800363a:	002a      	movs	r2, r5
 800363c:	0021      	movs	r1, r4
 800363e:	a802      	add	r0, sp, #8
 8003640:	f000 fb66 	bl	8003d10 <memcpy>
	uint8_t orientation[]={0xC8, 0xA1};
 8003644:	1961      	adds	r1, r4, r5
 8003646:	2402      	movs	r4, #2
 8003648:	a801      	add	r0, sp, #4
 800364a:	0022      	movs	r2, r4
 800364c:	f000 fb60 	bl	8003d10 <memcpy>
	 sendCMD(turnOn, (uint16_t)sizeof(turnOn));
 8003650:	0029      	movs	r1, r5
 8003652:	a802      	add	r0, sp, #8
 8003654:	f7ff ff9c 	bl	8003590 <sendCMD>
	  sendCMD(orientation, (uint16_t)sizeof(orientation));
 8003658:	0021      	movs	r1, r4
 800365a:	a801      	add	r0, sp, #4
 800365c:	f7ff ff98 	bl	8003590 <sendCMD>
	  sendDATA(MARSBMP, (uint16_t)sizeof(MARSBMP));
 8003660:	2180      	movs	r1, #128	; 0x80
 8003662:	4805      	ldr	r0, [pc, #20]	; (8003678 <turnOnScreen+0x60>)
 8003664:	00c9      	lsls	r1, r1, #3
 8003666:	f7ff ffb5 	bl	80035d4 <sendDATA>
}
 800366a:	b005      	add	sp, #20
 800366c:	bd30      	pop	{r4, r5, pc}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	50000400 	.word	0x50000400
 8003674:	08003d9d 	.word	0x08003d9d
 8003678:	20000068 	.word	0x20000068

0800367c <clearScreen>:

void clearScreen(){
 800367c:	b510      	push	{r4, lr}
 800367e:	2480      	movs	r4, #128	; 0x80
 8003680:	00e4      	lsls	r4, r4, #3
	for (int i=0; i<1024; i++){
		  sendDATA(space, (uint16_t)sizeof(space));
 8003682:	2101      	movs	r1, #1
 8003684:	4803      	ldr	r0, [pc, #12]	; (8003694 <clearScreen+0x18>)
 8003686:	3c01      	subs	r4, #1
 8003688:	f7ff ffa4 	bl	80035d4 <sendDATA>
	for (int i=0; i<1024; i++){
 800368c:	2c00      	cmp	r4, #0
 800368e:	d1f8      	bne.n	8003682 <clearScreen+0x6>
	  }
}
 8003690:	bd10      	pop	{r4, pc}
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	20000614 	.word	0x20000614

08003698 <sendString>:

void sendString(char *string, uint8_t header){
 8003698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800369a:	0005      	movs	r5, r0
			wordSize = (uint16_t)sizeof(letter);
			if (string[i]>='A' && string[i] <= 'Z'){
				letter[j] = fonts[(string[i]-'A')*6+j];
			}
			else if(string[i] >= '0' && string[i] <= '9'){
				letter[j] = fonts[(string[i]-'0'+26)*6+j];
 800369c:	2406      	movs	r4, #6
				letter[j] = fonts[38*6+j];
				//wordSize=2;
			}
			else if(string[i]=='@'){
				letter[j] = fonts[38*6+j];
				wordSize=2;
 800369e:	2602      	movs	r6, #2
void sendString(char *string, uint8_t header){
 80036a0:	b089      	sub	sp, #36	; 0x24
 80036a2:	9103      	str	r1, [sp, #12]
	for(int i =0; string[i]!='\0'; i++){
 80036a4:	782a      	ldrb	r2, [r5, #0]
 80036a6:	2a00      	cmp	r2, #0
 80036a8:	d060      	beq.n	800376c <sendString+0xd4>
				letter[j] = fonts[(string[i]-'0'+26)*6+j];
 80036aa:	0013      	movs	r3, r2
 80036ac:	3b16      	subs	r3, #22
 80036ae:	4363      	muls	r3, r4
				letter[j] = fonts[(string[i]-'A')*6+j];
 80036b0:	0011      	movs	r1, r2
				letter[j] = fonts[(string[i]-'0'+26)*6+j];
 80036b2:	9301      	str	r3, [sp, #4]
				letter[j] = fonts[(string[i]-'A')*6+j];
 80036b4:	0023      	movs	r3, r4
 80036b6:	3941      	subs	r1, #65	; 0x41
 80036b8:	434b      	muls	r3, r1
			else if(string[i] >= '0' && string[i] <= '9'){
 80036ba:	0010      	movs	r0, r2
				letter[j] = fonts[(string[i]-'A')*6+j];
 80036bc:	9302      	str	r3, [sp, #8]
 80036be:	2300      	movs	r3, #0
			if (string[i]>='A' && string[i] <= 'Z'){
 80036c0:	b2c9      	uxtb	r1, r1
			else if(string[i] >= '0' && string[i] <= '9'){
 80036c2:	3830      	subs	r0, #48	; 0x30
			if (string[i]>='A' && string[i] <= 'Z'){
 80036c4:	9104      	str	r1, [sp, #16]
			else if(string[i] >= '0' && string[i] <= '9'){
 80036c6:	b2c1      	uxtb	r1, r0
 80036c8:	9105      	str	r1, [sp, #20]
			if (string[i]>='A' && string[i] <= 'Z'){
 80036ca:	9904      	ldr	r1, [sp, #16]
 80036cc:	2919      	cmp	r1, #25
 80036ce:	d807      	bhi.n	80036e0 <sendString+0x48>
				letter[j] = fonts[(string[i]-'A')*6+j];
 80036d0:	4927      	ldr	r1, [pc, #156]	; (8003770 <sendString+0xd8>)
 80036d2:	9802      	ldr	r0, [sp, #8]
				letter[j] = fonts[(string[i]-'0'+26)*6+j];
 80036d4:	1809      	adds	r1, r1, r0
 80036d6:	5cc9      	ldrb	r1, [r1, r3]
			}
			else if(string[i]=='*'){
				letter[j] = fonts[37*6+j];
 80036d8:	a806      	add	r0, sp, #24
 80036da:	54c1      	strb	r1, [r0, r3]
			wordSize = (uint16_t)sizeof(letter);
 80036dc:	0021      	movs	r1, r4
 80036de:	e019      	b.n	8003714 <sendString+0x7c>
			else if(string[i] >= '0' && string[i] <= '9'){
 80036e0:	9905      	ldr	r1, [sp, #20]
 80036e2:	2909      	cmp	r1, #9
 80036e4:	d802      	bhi.n	80036ec <sendString+0x54>
				letter[j] = fonts[(string[i]-'0'+26)*6+j];
 80036e6:	4922      	ldr	r1, [pc, #136]	; (8003770 <sendString+0xd8>)
 80036e8:	9801      	ldr	r0, [sp, #4]
 80036ea:	e7f3      	b.n	80036d4 <sendString+0x3c>
			else if(string[i]=='%'){
 80036ec:	2a25      	cmp	r2, #37	; 0x25
 80036ee:	d106      	bne.n	80036fe <sendString+0x66>
				letter[j] = fonts[36*6+j];
 80036f0:	491f      	ldr	r1, [pc, #124]	; (8003770 <sendString+0xd8>)
 80036f2:	468c      	mov	ip, r1
 80036f4:	0019      	movs	r1, r3
 80036f6:	31d8      	adds	r1, #216	; 0xd8
				letter[j] = fonts[37*6+j];
 80036f8:	4660      	mov	r0, ip
 80036fa:	5c41      	ldrb	r1, [r0, r1]
 80036fc:	e7ec      	b.n	80036d8 <sendString+0x40>
			else if(string[i]==':'){
 80036fe:	2a3a      	cmp	r2, #58	; 0x3a
 8003700:	d117      	bne.n	8003732 <sendString+0x9a>
				letter[j]=fonts[39*6+j];
 8003702:	491b      	ldr	r1, [pc, #108]	; (8003770 <sendString+0xd8>)
 8003704:	468c      	mov	ip, r1
 8003706:	0019      	movs	r1, r3
 8003708:	31ea      	adds	r1, #234	; 0xea
				letter[j] = fonts[38*6+j];
 800370a:	4660      	mov	r0, ip
 800370c:	5c41      	ldrb	r1, [r0, r1]
 800370e:	a806      	add	r0, sp, #24
 8003710:	54c1      	strb	r1, [r0, r3]
				wordSize=2;
 8003712:	0031      	movs	r1, r6
			}
			letter[j]=letter[j]|header;
 8003714:	a806      	add	r0, sp, #24
 8003716:	5c18      	ldrb	r0, [r3, r0]
 8003718:	9f03      	ldr	r7, [sp, #12]
 800371a:	4338      	orrs	r0, r7
 800371c:	4684      	mov	ip, r0
 800371e:	4667      	mov	r7, ip
 8003720:	a806      	add	r0, sp, #24
 8003722:	541f      	strb	r7, [r3, r0]
		for(int j =0; j<6; j++){
 8003724:	3301      	adds	r3, #1
 8003726:	2b06      	cmp	r3, #6
 8003728:	d1cf      	bne.n	80036ca <sendString+0x32>
		}
		sendDATA(letter, wordSize);
 800372a:	f7ff ff53 	bl	80035d4 <sendDATA>
 800372e:	3501      	adds	r5, #1
 8003730:	e7b8      	b.n	80036a4 <sendString+0xc>
			else if(string[i]=='.'){
 8003732:	2a2e      	cmp	r2, #46	; 0x2e
 8003734:	d104      	bne.n	8003740 <sendString+0xa8>
				letter[j]=fonts[39*6+2+j];
 8003736:	490e      	ldr	r1, [pc, #56]	; (8003770 <sendString+0xd8>)
 8003738:	468c      	mov	ip, r1
 800373a:	0019      	movs	r1, r3
 800373c:	31ec      	adds	r1, #236	; 0xec
 800373e:	e7e4      	b.n	800370a <sendString+0x72>
			else if(string[i]==' '){
 8003740:	2a20      	cmp	r2, #32
 8003742:	d104      	bne.n	800374e <sendString+0xb6>
				letter[j] = fonts[38*6+j];
 8003744:	490a      	ldr	r1, [pc, #40]	; (8003770 <sendString+0xd8>)
 8003746:	468c      	mov	ip, r1
 8003748:	0019      	movs	r1, r3
 800374a:	31e4      	adds	r1, #228	; 0xe4
 800374c:	e7d4      	b.n	80036f8 <sendString+0x60>
			else if(string[i]=='@'){
 800374e:	2a40      	cmp	r2, #64	; 0x40
 8003750:	d104      	bne.n	800375c <sendString+0xc4>
				letter[j] = fonts[38*6+j];
 8003752:	4907      	ldr	r1, [pc, #28]	; (8003770 <sendString+0xd8>)
 8003754:	468c      	mov	ip, r1
 8003756:	0019      	movs	r1, r3
 8003758:	31e4      	adds	r1, #228	; 0xe4
 800375a:	e7d6      	b.n	800370a <sendString+0x72>
			wordSize = (uint16_t)sizeof(letter);
 800375c:	0021      	movs	r1, r4
			else if(string[i]=='*'){
 800375e:	2a2a      	cmp	r2, #42	; 0x2a
 8003760:	d1d8      	bne.n	8003714 <sendString+0x7c>
				letter[j] = fonts[37*6+j];
 8003762:	4903      	ldr	r1, [pc, #12]	; (8003770 <sendString+0xd8>)
 8003764:	468c      	mov	ip, r1
 8003766:	0019      	movs	r1, r3
 8003768:	31de      	adds	r1, #222	; 0xde
 800376a:	e7c5      	b.n	80036f8 <sendString+0x60>
	}
}
 800376c:	b009      	add	sp, #36	; 0x24
 800376e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003770:	20000468 	.word	0x20000468

08003774 <setupScreen>:
void setupScreen(){
 8003774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t page[] = {0x22, 0x00,0x00};
 8003776:	2322      	movs	r3, #34	; 0x22
	uint8_t col[]= {0x21, 0x00, 0x7F};
 8003778:	2503      	movs	r5, #3
	uint8_t page[] = {0x22, 0x00,0x00};
 800377a:	2600      	movs	r6, #0
 800377c:	466a      	mov	r2, sp
	uint8_t col[]= {0x21, 0x00, 0x7F};
 800377e:	4928      	ldr	r1, [pc, #160]	; (8003820 <setupScreen+0xac>)
 8003780:	ac01      	add	r4, sp, #4
	uint8_t page[] = {0x22, 0x00,0x00};
 8003782:	7013      	strb	r3, [r2, #0]
 8003784:	7056      	strb	r6, [r2, #1]
 8003786:	7096      	strb	r6, [r2, #2]
	uint8_t col[]= {0x21, 0x00, 0x7F};
 8003788:	310a      	adds	r1, #10
 800378a:	002a      	movs	r2, r5
 800378c:	0020      	movs	r0, r4
 800378e:	f000 fabf 	bl	8003d10 <memcpy>
	clearScreen();
 8003792:	f7ff ff73 	bl	800367c <clearScreen>
	sendCMD(page,(uint16_t)sizeof(page));
 8003796:	0029      	movs	r1, r5
 8003798:	4668      	mov	r0, sp
 800379a:	f7ff fef9 	bl	8003590 <sendCMD>
	sendCMD(col, (uint16_t)sizeof(col));
 800379e:	0029      	movs	r1, r5
 80037a0:	0020      	movs	r0, r4
 80037a2:	f7ff fef5 	bl	8003590 <sendCMD>
	sendString(message,0x00);
 80037a6:	0031      	movs	r1, r6
 80037a8:	481e      	ldr	r0, [pc, #120]	; (8003824 <setupScreen+0xb0>)
 80037aa:	f7ff ff75 	bl	8003698 <sendString>
	page[1]=0x01;
 80037ae:	2701      	movs	r7, #1
 80037b0:	466b      	mov	r3, sp
 80037b2:	705f      	strb	r7, [r3, #1]
	page[2]=0x01;
 80037b4:	709f      	strb	r7, [r3, #2]
	col[2]=0x7F;
 80037b6:	237f      	movs	r3, #127	; 0x7f
	sendCMD(page,(uint16_t)sizeof(page));
 80037b8:	0029      	movs	r1, r5
 80037ba:	4668      	mov	r0, sp
	col[2]=0x7F;
 80037bc:	70a3      	strb	r3, [r4, #2]
	col[1]=0x00;
 80037be:	7066      	strb	r6, [r4, #1]
	sendCMD(page,(uint16_t)sizeof(page));
 80037c0:	f7ff fee6 	bl	8003590 <sendCMD>
	sendCMD(col, (uint16_t)sizeof(col));
 80037c4:	0029      	movs	r1, r5
 80037c6:	0020      	movs	r0, r4
 80037c8:	f7ff fee2 	bl	8003590 <sendCMD>
	sendString(message,0x01);
 80037cc:	0039      	movs	r1, r7
 80037ce:	4816      	ldr	r0, [pc, #88]	; (8003828 <setupScreen+0xb4>)
 80037d0:	f7ff ff62 	bl	8003698 <sendString>
	page[1]=0x02;
 80037d4:	466a      	mov	r2, sp
 80037d6:	2302      	movs	r3, #2
	sendCMD(page,(uint16_t)sizeof(page));
 80037d8:	0029      	movs	r1, r5
	page[1]=0x02;
 80037da:	7053      	strb	r3, [r2, #1]
	page[2]=0x02;
 80037dc:	7093      	strb	r3, [r2, #2]
	sendCMD(page,(uint16_t)sizeof(page));
 80037de:	4668      	mov	r0, sp
	col[2]=0x7F;
 80037e0:	337d      	adds	r3, #125	; 0x7d
 80037e2:	70a3      	strb	r3, [r4, #2]
	col[1]=0x00;
 80037e4:	7066      	strb	r6, [r4, #1]
	sendCMD(page,(uint16_t)sizeof(page));
 80037e6:	f7ff fed3 	bl	8003590 <sendCMD>
	sendCMD(col, (uint16_t)sizeof(col));
 80037ea:	0029      	movs	r1, r5
 80037ec:	0020      	movs	r0, r4
 80037ee:	f7ff fecf 	bl	8003590 <sendCMD>
	sendString(message,0x00);
 80037f2:	0031      	movs	r1, r6
 80037f4:	480d      	ldr	r0, [pc, #52]	; (800382c <setupScreen+0xb8>)
 80037f6:	f7ff ff4f 	bl	8003698 <sendString>
	page[1]=0x03;
 80037fa:	466b      	mov	r3, sp
 80037fc:	705d      	strb	r5, [r3, #1]
	page[2]=0x03;
 80037fe:	709d      	strb	r5, [r3, #2]
	col[2]=0x7F;
 8003800:	237f      	movs	r3, #127	; 0x7f
	sendCMD(page,(uint16_t)sizeof(page));
 8003802:	0029      	movs	r1, r5
 8003804:	4668      	mov	r0, sp
	col[2]=0x7F;
 8003806:	70a3      	strb	r3, [r4, #2]
	col[1]=0x00;
 8003808:	7066      	strb	r6, [r4, #1]
	sendCMD(page,(uint16_t)sizeof(page));
 800380a:	f7ff fec1 	bl	8003590 <sendCMD>
	sendCMD(col, (uint16_t)sizeof(col));
 800380e:	0029      	movs	r1, r5
 8003810:	0020      	movs	r0, r4
 8003812:	f7ff febd 	bl	8003590 <sendCMD>
	sendString(message,0x00);
 8003816:	0031      	movs	r1, r6
 8003818:	4805      	ldr	r0, [pc, #20]	; (8003830 <setupScreen+0xbc>)
 800381a:	f7ff ff3d 	bl	8003698 <sendString>
}
 800381e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003820:	08003d9d 	.word	0x08003d9d
 8003824:	08003dc8 	.word	0x08003dc8
 8003828:	08003dde 	.word	0x08003dde
 800382c:	08003df4 	.word	0x08003df4
 8003830:	08003dfa 	.word	0x08003dfa

08003834 <updateScreen>:

void updateScreen(char* hr, char* spo2, char* distance, char* user){
 8003834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003836:	001f      	movs	r7, r3

	uint8_t page[] = {0x22, 0x00,0x00};
 8003838:	2500      	movs	r5, #0
 800383a:	2322      	movs	r3, #34	; 0x22
void updateScreen(char* hr, char* spo2, char* distance, char* user){
 800383c:	b087      	sub	sp, #28
 800383e:	9101      	str	r1, [sp, #4]

	uint8_t col[]= {0x21, 0x00, 0x7F};
 8003840:	4936      	ldr	r1, [pc, #216]	; (800391c <updateScreen+0xe8>)
void updateScreen(char* hr, char* spo2, char* distance, char* user){
 8003842:	9202      	str	r2, [sp, #8]
	uint8_t col[]= {0x21, 0x00, 0x7F};
 8003844:	ac05      	add	r4, sp, #20
	uint8_t page[] = {0x22, 0x00,0x00};
 8003846:	aa04      	add	r2, sp, #16
 8003848:	7013      	strb	r3, [r2, #0]
 800384a:	7055      	strb	r5, [r2, #1]
 800384c:	7095      	strb	r5, [r2, #2]
void updateScreen(char* hr, char* spo2, char* distance, char* user){
 800384e:	0006      	movs	r6, r0
	uint8_t col[]= {0x21, 0x00, 0x7F};
 8003850:	2203      	movs	r2, #3
 8003852:	310a      	adds	r1, #10
 8003854:	0020      	movs	r0, r4
 8003856:	f000 fa5b 	bl	8003d10 <memcpy>

	//hr col is 0-18
	//spo2 col is - 33-51
	//distance col is for
	if(user[0]=='1'){
 800385a:	783b      	ldrb	r3, [r7, #0]
 800385c:	2b31      	cmp	r3, #49	; 0x31
 800385e:	d129      	bne.n	80038b4 <updateScreen+0x80>
		page[1]=0x00;
		page[2]=0x00;
		col[1]=0x00;
		col[2]=0x12;
 8003860:	3b1f      	subs	r3, #31
		sendCMD(page,(uint16_t)sizeof(page));
 8003862:	2103      	movs	r1, #3
 8003864:	a804      	add	r0, sp, #16
		col[2]=0x12;
 8003866:	70a3      	strb	r3, [r4, #2]
		sendCMD(page,(uint16_t)sizeof(page));
 8003868:	f7ff fe92 	bl	8003590 <sendCMD>
		sendCMD(col, (uint16_t)sizeof(col));
 800386c:	2103      	movs	r1, #3
 800386e:	0020      	movs	r0, r4
 8003870:	f7ff fe8e 	bl	8003590 <sendCMD>
		sendString(hr,0x00);
 8003874:	0029      	movs	r1, r5
 8003876:	0030      	movs	r0, r6
 8003878:	f7ff ff0e 	bl	8003698 <sendString>
		col[1]=0x21;
 800387c:	2321      	movs	r3, #33	; 0x21
		col[2]=0x32;
		sendCMD(page,(uint16_t)sizeof(page));
 800387e:	2103      	movs	r1, #3
		col[1]=0x21;
 8003880:	7063      	strb	r3, [r4, #1]
		sendCMD(page,(uint16_t)sizeof(page));
 8003882:	a804      	add	r0, sp, #16
		col[2]=0x32;
 8003884:	3311      	adds	r3, #17
 8003886:	70a3      	strb	r3, [r4, #2]
		sendCMD(page,(uint16_t)sizeof(page));
 8003888:	f7ff fe82 	bl	8003590 <sendCMD>

		sendCMD(col, (uint16_t)sizeof(col));
 800388c:	2103      	movs	r1, #3
 800388e:	0020      	movs	r0, r4
 8003890:	f7ff fe7e 	bl	8003590 <sendCMD>
		sendString(spo2,0x00);
 8003894:	0029      	movs	r1, r5
 8003896:	9801      	ldr	r0, [sp, #4]
 8003898:	f7ff fefe 	bl	8003698 <sendString>
		col[1]=0x61;
 800389c:	2361      	movs	r3, #97	; 0x61
		col[2]=0x79;
		sendCMD(col, (uint16_t)sizeof(col));
 800389e:	2103      	movs	r1, #3
		col[1]=0x61;
 80038a0:	7063      	strb	r3, [r4, #1]
		sendCMD(col, (uint16_t)sizeof(col));
 80038a2:	0020      	movs	r0, r4
		col[2]=0x79;
 80038a4:	3318      	adds	r3, #24
 80038a6:	70a3      	strb	r3, [r4, #2]
		sendCMD(col, (uint16_t)sizeof(col));
 80038a8:	f7ff fe72 	bl	8003590 <sendCMD>
		sendString(distance,0x00);
 80038ac:	0029      	movs	r1, r5
 80038ae:	9802      	ldr	r0, [sp, #8]
 80038b0:	f7ff fef2 	bl	8003698 <sendString>


	}
	if(user[0]=='2'){
 80038b4:	783b      	ldrb	r3, [r7, #0]
 80038b6:	9303      	str	r3, [sp, #12]
 80038b8:	2b32      	cmp	r3, #50	; 0x32
 80038ba:	d12c      	bne.n	8003916 <updateScreen+0xe2>

		page[1]=0x03;
 80038bc:	2503      	movs	r5, #3
 80038be:	ab04      	add	r3, sp, #16
		page[2]=0x03;
		col[1]=0x00;
 80038c0:	2700      	movs	r7, #0
		page[1]=0x03;
 80038c2:	705d      	strb	r5, [r3, #1]
		page[2]=0x03;
 80038c4:	709d      	strb	r5, [r3, #2]
		col[2]=0x12;
 80038c6:	2312      	movs	r3, #18
		sendCMD(page,(uint16_t)sizeof(page));
 80038c8:	0029      	movs	r1, r5
 80038ca:	a804      	add	r0, sp, #16
		col[2]=0x12;
 80038cc:	70a3      	strb	r3, [r4, #2]
		col[1]=0x00;
 80038ce:	7067      	strb	r7, [r4, #1]
		sendCMD(page,(uint16_t)sizeof(page));
 80038d0:	f7ff fe5e 	bl	8003590 <sendCMD>
		sendCMD(col, (uint16_t)sizeof(col));
 80038d4:	0029      	movs	r1, r5
 80038d6:	0020      	movs	r0, r4
 80038d8:	f7ff fe5a 	bl	8003590 <sendCMD>
		sendString(hr,0x00);
 80038dc:	0039      	movs	r1, r7
 80038de:	0030      	movs	r0, r6
 80038e0:	f7ff feda 	bl	8003698 <sendString>
		col[1]=0x21;
 80038e4:	2321      	movs	r3, #33	; 0x21
 80038e6:	7063      	strb	r3, [r4, #1]
		col[2]=0x32;
 80038e8:	466b      	mov	r3, sp
 80038ea:	7b1b      	ldrb	r3, [r3, #12]
		sendCMD(col, (uint16_t)sizeof(col));
 80038ec:	0029      	movs	r1, r5
 80038ee:	0020      	movs	r0, r4
		col[2]=0x32;
 80038f0:	70a3      	strb	r3, [r4, #2]
		sendCMD(col, (uint16_t)sizeof(col));
 80038f2:	f7ff fe4d 	bl	8003590 <sendCMD>
		sendString(spo2,0x00);
 80038f6:	0039      	movs	r1, r7
 80038f8:	9801      	ldr	r0, [sp, #4]
 80038fa:	f7ff fecd 	bl	8003698 <sendString>
		col[1]=0x41;
 80038fe:	2341      	movs	r3, #65	; 0x41
		col[2]=0x71;
		sendCMD(col, (uint16_t)sizeof(col));
 8003900:	0029      	movs	r1, r5
		col[1]=0x41;
 8003902:	7063      	strb	r3, [r4, #1]
		sendCMD(col, (uint16_t)sizeof(col));
 8003904:	0020      	movs	r0, r4
		col[2]=0x71;
 8003906:	3330      	adds	r3, #48	; 0x30
 8003908:	70a3      	strb	r3, [r4, #2]
		sendCMD(col, (uint16_t)sizeof(col));
 800390a:	f7ff fe41 	bl	8003590 <sendCMD>
		sendString(distance,0x00);
 800390e:	0039      	movs	r1, r7
 8003910:	9802      	ldr	r0, [sp, #8]
 8003912:	f7ff fec1 	bl	8003698 <sendString>
	}
}
 8003916:	b007      	add	sp, #28
 8003918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	08003d9d 	.word	0x08003d9d

08003920 <user1Info>:
	sendCMD(page,(uint16_t)sizeof(page));
	sendCMD(col, (uint16_t)sizeof(col));
	sendString(userName,0x00);
}

void user1Info(uint8_t hr, uint8_t spo2){
 8003920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003922:	0006      	movs	r6, r0
    char selfHR [4] = {'0','0','0','\0'};
 8003924:	4f3a      	ldr	r7, [pc, #232]	; (8003a10 <user1Info+0xf0>)
void user1Info(uint8_t hr, uint8_t spo2){
 8003926:	b087      	sub	sp, #28
    char selfHR [4] = {'0','0','0','\0'};
 8003928:	370d      	adds	r7, #13
 800392a:	ac04      	add	r4, sp, #16
void user1Info(uint8_t hr, uint8_t spo2){
 800392c:	9101      	str	r1, [sp, #4]
    char selfHR [4] = {'0','0','0','\0'};
 800392e:	2204      	movs	r2, #4
 8003930:	0039      	movs	r1, r7
 8003932:	0020      	movs	r0, r4
    char selfSpo2[4] = {'0','0','0','\0'};
 8003934:	ad05      	add	r5, sp, #20
    char selfHR [4] = {'0','0','0','\0'};
 8003936:	f000 f9eb 	bl	8003d10 <memcpy>
    char selfSpo2[4] = {'0','0','0','\0'};
 800393a:	0039      	movs	r1, r7
 800393c:	2204      	movs	r2, #4
 800393e:	0028      	movs	r0, r5
 8003940:	f000 f9e6 	bl	8003d10 <memcpy>
    char* fix = "FIX";
    if((hr/100%10) == 0){
 8003944:	2164      	movs	r1, #100	; 0x64
 8003946:	0030      	movs	r0, r6
 8003948:	f7fc fbf2 	bl	8000130 <__udivsi3>
 800394c:	b2c7      	uxtb	r7, r0

        selfHR[2] = (hr%10)+'0';
 800394e:	210a      	movs	r1, #10
 8003950:	0030      	movs	r0, r6
    if((hr/100%10) == 0){
 8003952:	2f00      	cmp	r7, #0
 8003954:	d13a      	bne.n	80039cc <user1Info+0xac>
        selfHR[2] = (hr%10)+'0';
 8003956:	f7fc fc71 	bl	800023c <__aeabi_uidivmod>
 800395a:	3130      	adds	r1, #48	; 0x30
 800395c:	70a1      	strb	r1, [r4, #2]
        selfHR[1] = (hr/10%10)+'0';
 800395e:	0030      	movs	r0, r6
 8003960:	210a      	movs	r1, #10
 8003962:	f7fc fbe5 	bl	8000130 <__udivsi3>
 8003966:	210a      	movs	r1, #10
 8003968:	b2c0      	uxtb	r0, r0
 800396a:	f7fc fc67 	bl	800023c <__aeabi_uidivmod>
        selfHR[0] = ' ';
 800396e:	2320      	movs	r3, #32
        selfHR[1] = (hr/10%10)+'0';
 8003970:	3130      	adds	r1, #48	; 0x30
 8003972:	7061      	strb	r1, [r4, #1]
        selfHR[0] = ' ';
 8003974:	7023      	strb	r3, [r4, #0]

        selfHR[2] = (hr%10)+'0';
        selfHR[1] = (hr/10%10)+'0';
        selfHR[0] = (hr/100%10)+'0';
    }
    if((spo2/100%10) == 0){
 8003976:	2164      	movs	r1, #100	; 0x64
 8003978:	9801      	ldr	r0, [sp, #4]
 800397a:	f7fc fbd9 	bl	8000130 <__udivsi3>
 800397e:	b2c6      	uxtb	r6, r0

        selfSpo2[2] = (spo2%10)+'0';
 8003980:	210a      	movs	r1, #10
 8003982:	9801      	ldr	r0, [sp, #4]
    if((spo2/100%10) == 0){
 8003984:	2e00      	cmp	r6, #0
 8003986:	d132      	bne.n	80039ee <user1Info+0xce>
        selfSpo2[2] = (spo2%10)+'0';
 8003988:	f7fc fc58 	bl	800023c <__aeabi_uidivmod>
 800398c:	3130      	adds	r1, #48	; 0x30
 800398e:	70a9      	strb	r1, [r5, #2]
        selfSpo2[1] = (spo2/10%10)+'0';
 8003990:	9801      	ldr	r0, [sp, #4]
 8003992:	210a      	movs	r1, #10
 8003994:	f7fc fbcc 	bl	8000130 <__udivsi3>
 8003998:	210a      	movs	r1, #10
 800399a:	b2c0      	uxtb	r0, r0
 800399c:	f7fc fc4e 	bl	800023c <__aeabi_uidivmod>
        selfSpo2[0] = ' ';
 80039a0:	2320      	movs	r3, #32
        selfSpo2[1] = (spo2/10%10)+'0';
 80039a2:	3130      	adds	r1, #48	; 0x30
 80039a4:	7069      	strb	r1, [r5, #1]
        selfSpo2[0] = ' ';
 80039a6:	702b      	strb	r3, [r5, #0]
        selfSpo2[2] = (spo2%10)+'0';
        selfSpo2[1] = (spo2/10%10)+'0';
        selfSpo2[0] = (spo2/100%10)+'0';
    }

    if(!isSelfSetup)
 80039a8:	4e1a      	ldr	r6, [pc, #104]	; (8003a14 <user1Info+0xf4>)
 80039aa:	7833      	ldrb	r3, [r6, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d103      	bne.n	80039b8 <user1Info+0x98>
    {
    	setupScreen();
 80039b0:	f7ff fee0 	bl	8003774 <setupScreen>
    	isSelfSetup = 1;
 80039b4:	2301      	movs	r3, #1
 80039b6:	7033      	strb	r3, [r6, #0]
    }

    char user[1] = {'1'};
 80039b8:	2231      	movs	r2, #49	; 0x31
 80039ba:	ab03      	add	r3, sp, #12
 80039bc:	701a      	strb	r2, [r3, #0]
    updateScreen(selfHR, selfSpo2, fix, user);
 80039be:	0029      	movs	r1, r5
 80039c0:	4a15      	ldr	r2, [pc, #84]	; (8003a18 <user1Info+0xf8>)
 80039c2:	0020      	movs	r0, r4
 80039c4:	f7ff ff36 	bl	8003834 <updateScreen>
}
 80039c8:	b007      	add	sp, #28
 80039ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        selfHR[2] = (hr%10)+'0';
 80039cc:	f7fc fc36 	bl	800023c <__aeabi_uidivmod>
 80039d0:	3130      	adds	r1, #48	; 0x30
 80039d2:	70a1      	strb	r1, [r4, #2]
        selfHR[1] = (hr/10%10)+'0';
 80039d4:	0030      	movs	r0, r6
 80039d6:	210a      	movs	r1, #10
 80039d8:	f7fc fbaa 	bl	8000130 <__udivsi3>
 80039dc:	210a      	movs	r1, #10
 80039de:	b2c0      	uxtb	r0, r0
 80039e0:	f7fc fc2c 	bl	800023c <__aeabi_uidivmod>
        selfHR[0] = (hr/100%10)+'0';
 80039e4:	3730      	adds	r7, #48	; 0x30
        selfHR[1] = (hr/10%10)+'0';
 80039e6:	3130      	adds	r1, #48	; 0x30
 80039e8:	7061      	strb	r1, [r4, #1]
        selfHR[0] = (hr/100%10)+'0';
 80039ea:	7027      	strb	r7, [r4, #0]
 80039ec:	e7c3      	b.n	8003976 <user1Info+0x56>
        selfSpo2[2] = (spo2%10)+'0';
 80039ee:	f7fc fc25 	bl	800023c <__aeabi_uidivmod>
 80039f2:	3130      	adds	r1, #48	; 0x30
 80039f4:	70a9      	strb	r1, [r5, #2]
        selfSpo2[1] = (spo2/10%10)+'0';
 80039f6:	9801      	ldr	r0, [sp, #4]
 80039f8:	210a      	movs	r1, #10
 80039fa:	f7fc fb99 	bl	8000130 <__udivsi3>
 80039fe:	210a      	movs	r1, #10
 8003a00:	b2c0      	uxtb	r0, r0
 8003a02:	f7fc fc1b 	bl	800023c <__aeabi_uidivmod>
        selfSpo2[0] = (spo2/100%10)+'0';
 8003a06:	3630      	adds	r6, #48	; 0x30
        selfSpo2[1] = (spo2/10%10)+'0';
 8003a08:	3130      	adds	r1, #48	; 0x30
 8003a0a:	7069      	strb	r1, [r5, #1]
        selfSpo2[0] = (spo2/100%10)+'0';
 8003a0c:	702e      	strb	r6, [r5, #0]
 8003a0e:	e7cb      	b.n	80039a8 <user1Info+0x88>
 8003a10:	08003d9d 	.word	0x08003d9d
 8003a14:	20000613 	.word	0x20000613
 8003a18:	08003e14 	.word	0x08003e14

08003a1c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <HAL_MspInit+0x18>)
 8003a20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a22:	430a      	orrs	r2, r1
 8003a24:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a26:	2280      	movs	r2, #128	; 0x80
 8003a28:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003a2a:	0552      	lsls	r2, r2, #21
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a30:	4770      	bx	lr
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	40021000 	.word	0x40021000

08003a38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a38:	b510      	push	{r4, lr}
 8003a3a:	0004      	movs	r4, r0
 8003a3c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a3e:	2214      	movs	r2, #20
 8003a40:	2100      	movs	r1, #0
 8003a42:	a801      	add	r0, sp, #4
 8003a44:	f000 f96d 	bl	8003d22 <memset>
  if(hi2c->Instance==I2C1)
 8003a48:	4b10      	ldr	r3, [pc, #64]	; (8003a8c <HAL_I2C_MspInit+0x54>)
 8003a4a:	6822      	ldr	r2, [r4, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d11a      	bne.n	8003a86 <HAL_I2C_MspInit+0x4e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a50:	2102      	movs	r1, #2
 8003a52:	4c0f      	ldr	r4, [pc, #60]	; (8003a90 <HAL_I2C_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a54:	480f      	ldr	r0, [pc, #60]	; (8003a94 <HAL_I2C_MspInit+0x5c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	62e2      	str	r2, [r4, #44]	; 0x2c
 8003a5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5e:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a60:	400b      	ands	r3, r1
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a66:	23c0      	movs	r3, #192	; 0xc0
 8003a68:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a6a:	3bae      	subs	r3, #174	; 0xae
 8003a6c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a6e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a70:	3b11      	subs	r3, #17
 8003a72:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a74:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003a76:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a78:	f7fc ff6c 	bl	8000954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003a80:	039b      	lsls	r3, r3, #14
 8003a82:	4313      	orrs	r3, r2
 8003a84:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003a86:	b006      	add	sp, #24
 8003a88:	bd10      	pop	{r4, pc}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	40005400 	.word	0x40005400
 8003a90:	40021000 	.word	0x40021000
 8003a94:	50000400 	.word	0x50000400

08003a98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a98:	b510      	push	{r4, lr}
 8003a9a:	0004      	movs	r4, r0
 8003a9c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a9e:	2214      	movs	r2, #20
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	a803      	add	r0, sp, #12
 8003aa4:	f000 f93d 	bl	8003d22 <memset>
  if(hspi->Instance==SPI1)
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	4a1c      	ldr	r2, [pc, #112]	; (8003b1c <HAL_SPI_MspInit+0x84>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d11a      	bne.n	8003ae6 <HAL_SPI_MspInit+0x4e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ab0:	2280      	movs	r2, #128	; 0x80
 8003ab2:	4b1b      	ldr	r3, [pc, #108]	; (8003b20 <HAL_SPI_MspInit+0x88>)
 8003ab4:	0152      	lsls	r2, r2, #5
 8003ab6:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab8:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003aba:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003abc:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003abe:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	400b      	ands	r3, r1
 8003acc:	9301      	str	r3, [sp, #4]
 8003ace:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003ad0:	23e0      	movs	r3, #224	; 0xe0
 8003ad2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad4:	3bde      	subs	r3, #222	; 0xde
 8003ad6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad8:	185b      	adds	r3, r3, r1
 8003ada:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003adc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ade:	f7fc ff39 	bl	8000954 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003ae2:	b008      	add	sp, #32
 8003ae4:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8003ae6:	4a0f      	ldr	r2, [pc, #60]	; (8003b24 <HAL_SPI_MspInit+0x8c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d1fa      	bne.n	8003ae2 <HAL_SPI_MspInit+0x4a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003aec:	2280      	movs	r2, #128	; 0x80
 8003aee:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <HAL_SPI_MspInit+0x88>)
 8003af0:	01d2      	lsls	r2, r2, #7
 8003af2:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af4:	480c      	ldr	r0, [pc, #48]	; (8003b28 <HAL_SPI_MspInit+0x90>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003af6:	430a      	orrs	r2, r1
 8003af8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003afa:	2202      	movs	r2, #2
 8003afc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003afe:	4311      	orrs	r1, r2
 8003b00:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b04:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b06:	4013      	ands	r3, r2
 8003b08:	9302      	str	r3, [sp, #8]
 8003b0a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003b0c:	23a0      	movs	r3, #160	; 0xa0
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b12:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b14:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b16:	9306      	str	r3, [sp, #24]
 8003b18:	e7e1      	b.n	8003ade <HAL_SPI_MspInit+0x46>
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	40013000 	.word	0x40013000
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40003800 	.word	0x40003800
 8003b28:	50000400 	.word	0x50000400

08003b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b2c:	b570      	push	{r4, r5, r6, lr}
 8003b2e:	0005      	movs	r5, r0
 8003b30:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b32:	2214      	movs	r2, #20
 8003b34:	2100      	movs	r1, #0
 8003b36:	a801      	add	r0, sp, #4
 8003b38:	f000 f8f3 	bl	8003d22 <memset>
  if(huart->Instance==USART1)
 8003b3c:	4b1f      	ldr	r3, [pc, #124]	; (8003bbc <HAL_UART_MspInit+0x90>)
 8003b3e:	682a      	ldr	r2, [r5, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d139      	bne.n	8003bb8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b44:	2280      	movs	r2, #128	; 0x80
 8003b46:	4b1e      	ldr	r3, [pc, #120]	; (8003bc0 <HAL_UART_MspInit+0x94>)
 8003b48:	01d2      	lsls	r2, r2, #7
 8003b4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b4c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b4e:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b50:	2101      	movs	r1, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b52:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b56:	2603      	movs	r6, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b5e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b60:	400b      	ands	r3, r1
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b66:	23c0      	movs	r3, #192	; 0xc0
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b6e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b70:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003b72:	18db      	adds	r3, r3, r3
 8003b74:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b76:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b78:	f7fc feec 	bl	8000954 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8003b7c:	4c11      	ldr	r4, [pc, #68]	; (8003bc4 <HAL_UART_MspInit+0x98>)
 8003b7e:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <HAL_UART_MspInit+0x9c>)
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b80:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8003b82:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b84:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003b86:	0020      	movs	r0, r4
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8003b88:	6066      	str	r6, [r4, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b8a:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b8c:	60e3      	str	r3, [r4, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b8e:	6122      	str	r2, [r4, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b90:	6163      	str	r3, [r4, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b92:	61a3      	str	r3, [r4, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003b94:	61e3      	str	r3, [r4, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b96:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003b98:	f7fc fde8 	bl	800076c <HAL_DMA_Init>
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	d001      	beq.n	8003ba4 <HAL_UART_MspInit+0x78>
    {
      Error_Handler();
 8003ba0:	f7ff fcf4 	bl	800358c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	201b      	movs	r0, #27
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003ba8:	66ec      	str	r4, [r5, #108]	; 0x6c
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003baa:	0011      	movs	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003bac:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003bae:	f7fc fd89 	bl	80006c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003bb2:	201b      	movs	r0, #27
 8003bb4:	f7fc fdb6 	bl	8000724 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003bb8:	b006      	add	sp, #24
 8003bba:	bd70      	pop	{r4, r5, r6, pc}
 8003bbc:	40013800 	.word	0x40013800
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	20000714 	.word	0x20000714
 8003bc8:	40020030 	.word	0x40020030

08003bcc <NMI_Handler>:
 8003bcc:	4770      	bx	lr

08003bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bce:	e7fe      	b.n	8003bce <HardFault_Handler>

08003bd0 <SVC_Handler>:
 8003bd0:	4770      	bx	lr

08003bd2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bd2:	4770      	bx	lr

08003bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bd4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bd6:	f7fc fd57 	bl	8000688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bda:	bd10      	pop	{r4, pc}

08003bdc <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003bdc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003bde:	2001      	movs	r0, #1
 8003be0:	f7fc ff74 	bl	8000acc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003be4:	2002      	movs	r0, #2
 8003be6:	f7fc ff71 	bl	8000acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003bea:	bd10      	pop	{r4, pc}

08003bec <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003bec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003bee:	4802      	ldr	r0, [pc, #8]	; (8003bf8 <DMA1_Channel2_3_IRQHandler+0xc>)
 8003bf0:	f7fc fe64 	bl	80008bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003bf4:	bd10      	pop	{r4, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	20000714 	.word	0x20000714

08003bfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003bfc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003bfe:	4802      	ldr	r0, [pc, #8]	; (8003c08 <USART1_IRQHandler+0xc>)
 8003c00:	f7fe fab0 	bl	8002164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c04:	bd10      	pop	{r4, pc}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	2000075c 	.word	0x2000075c

08003c0c <EXTI4_15_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI4_15_IRQHandler(void)
{
	HAL_GPIO_EXTI_IRQHandler(HR_MFIO_Pin);
 8003c0c:	2080      	movs	r0, #128	; 0x80
{
 8003c0e:	b510      	push	{r4, lr}
	HAL_GPIO_EXTI_IRQHandler(HR_MFIO_Pin);
 8003c10:	0200      	lsls	r0, r0, #8
 8003c12:	f7fc ff5b 	bl	8000acc <HAL_GPIO_EXTI_IRQHandler>
}
 8003c16:	bd10      	pop	{r4, pc}

08003c18 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003c18:	2280      	movs	r2, #128	; 0x80
 8003c1a:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <SystemInit+0x44>)
 8003c1c:	0052      	lsls	r2, r2, #1
 8003c1e:	6819      	ldr	r1, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	490e      	ldr	r1, [pc, #56]	; (8003c60 <SystemInit+0x48>)
 8003c28:	400a      	ands	r2, r1
 8003c2a:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	490d      	ldr	r1, [pc, #52]	; (8003c64 <SystemInit+0x4c>)
 8003c30:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003c32:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003c34:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	438a      	bics	r2, r1
 8003c3a:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	490a      	ldr	r1, [pc, #40]	; (8003c68 <SystemInit+0x50>)
 8003c40:	400a      	ands	r2, r1
 8003c42:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	4909      	ldr	r1, [pc, #36]	; (8003c6c <SystemInit+0x54>)
 8003c48:	400a      	ands	r2, r1
 8003c4a:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c50:	2280      	movs	r2, #128	; 0x80
 8003c52:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <SystemInit+0x58>)
 8003c54:	0512      	lsls	r2, r2, #20
 8003c56:	609a      	str	r2, [r3, #8]
#endif
}
 8003c58:	4770      	bx	lr
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	88ff400c 	.word	0x88ff400c
 8003c64:	fef6fff6 	.word	0xfef6fff6
 8003c68:	fffbffff 	.word	0xfffbffff
 8003c6c:	ff02ffff 	.word	0xff02ffff
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003c74:	480d      	ldr	r0, [pc, #52]	; (8003cac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c76:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003c78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c7a:	e003      	b.n	8003c84 <LoopCopyDataInit>

08003c7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003c7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c82:	3104      	adds	r1, #4

08003c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c84:	480b      	ldr	r0, [pc, #44]	; (8003cb4 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003c86:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003c88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c8c:	d3f6      	bcc.n	8003c7c <CopyDataInit>
  ldr  r2, =_sbss
 8003c8e:	4a0b      	ldr	r2, [pc, #44]	; (8003cbc <LoopForever+0x12>)
  b  LoopFillZerobss
 8003c90:	e002      	b.n	8003c98 <LoopFillZerobss>

08003c92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003c92:	2300      	movs	r3, #0
  str  r3, [r2]
 8003c94:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c96:	3204      	adds	r2, #4

08003c98 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003c98:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <LoopForever+0x16>)
  cmp  r2, r3
 8003c9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c9c:	d3f9      	bcc.n	8003c92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003c9e:	f7ff ffbb 	bl	8003c18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ca2:	f000 f811 	bl	8003cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ca6:	f7ff fa45 	bl	8003134 <main>

08003caa <LoopForever>:

LoopForever:
    b LoopForever
 8003caa:	e7fe      	b.n	8003caa <LoopForever>
  ldr   r0, =_estack
 8003cac:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8003cb0:	08003e4c 	.word	0x08003e4c
  ldr  r0, =_sdata
 8003cb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003cb8:	2000055c 	.word	0x2000055c
  ldr  r2, =_sbss
 8003cbc:	2000055c 	.word	0x2000055c
  ldr  r3, = _ebss
 8003cc0:	200008a0 	.word	0x200008a0

08003cc4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cc4:	e7fe      	b.n	8003cc4 <ADC1_COMP_IRQHandler>
	...

08003cc8 <__libc_init_array>:
 8003cc8:	b570      	push	{r4, r5, r6, lr}
 8003cca:	2600      	movs	r6, #0
 8003ccc:	4d0c      	ldr	r5, [pc, #48]	; (8003d00 <__libc_init_array+0x38>)
 8003cce:	4c0d      	ldr	r4, [pc, #52]	; (8003d04 <__libc_init_array+0x3c>)
 8003cd0:	1b64      	subs	r4, r4, r5
 8003cd2:	10a4      	asrs	r4, r4, #2
 8003cd4:	42a6      	cmp	r6, r4
 8003cd6:	d109      	bne.n	8003cec <__libc_init_array+0x24>
 8003cd8:	2600      	movs	r6, #0
 8003cda:	f000 f83f 	bl	8003d5c <_init>
 8003cde:	4d0a      	ldr	r5, [pc, #40]	; (8003d08 <__libc_init_array+0x40>)
 8003ce0:	4c0a      	ldr	r4, [pc, #40]	; (8003d0c <__libc_init_array+0x44>)
 8003ce2:	1b64      	subs	r4, r4, r5
 8003ce4:	10a4      	asrs	r4, r4, #2
 8003ce6:	42a6      	cmp	r6, r4
 8003ce8:	d105      	bne.n	8003cf6 <__libc_init_array+0x2e>
 8003cea:	bd70      	pop	{r4, r5, r6, pc}
 8003cec:	00b3      	lsls	r3, r6, #2
 8003cee:	58eb      	ldr	r3, [r5, r3]
 8003cf0:	4798      	blx	r3
 8003cf2:	3601      	adds	r6, #1
 8003cf4:	e7ee      	b.n	8003cd4 <__libc_init_array+0xc>
 8003cf6:	00b3      	lsls	r3, r6, #2
 8003cf8:	58eb      	ldr	r3, [r5, r3]
 8003cfa:	4798      	blx	r3
 8003cfc:	3601      	adds	r6, #1
 8003cfe:	e7f2      	b.n	8003ce6 <__libc_init_array+0x1e>
 8003d00:	08003e44 	.word	0x08003e44
 8003d04:	08003e44 	.word	0x08003e44
 8003d08:	08003e44 	.word	0x08003e44
 8003d0c:	08003e48 	.word	0x08003e48

08003d10 <memcpy>:
 8003d10:	2300      	movs	r3, #0
 8003d12:	b510      	push	{r4, lr}
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d100      	bne.n	8003d1a <memcpy+0xa>
 8003d18:	bd10      	pop	{r4, pc}
 8003d1a:	5ccc      	ldrb	r4, [r1, r3]
 8003d1c:	54c4      	strb	r4, [r0, r3]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	e7f8      	b.n	8003d14 <memcpy+0x4>

08003d22 <memset>:
 8003d22:	0003      	movs	r3, r0
 8003d24:	1882      	adds	r2, r0, r2
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d100      	bne.n	8003d2c <memset+0xa>
 8003d2a:	4770      	bx	lr
 8003d2c:	7019      	strb	r1, [r3, #0]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	e7f9      	b.n	8003d26 <memset+0x4>

08003d32 <strcat>:
 8003d32:	0002      	movs	r2, r0
 8003d34:	b510      	push	{r4, lr}
 8003d36:	7813      	ldrb	r3, [r2, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d105      	bne.n	8003d48 <strcat+0x16>
 8003d3c:	5ccc      	ldrb	r4, [r1, r3]
 8003d3e:	54d4      	strb	r4, [r2, r3]
 8003d40:	3301      	adds	r3, #1
 8003d42:	2c00      	cmp	r4, #0
 8003d44:	d1fa      	bne.n	8003d3c <strcat+0xa>
 8003d46:	bd10      	pop	{r4, pc}
 8003d48:	3201      	adds	r2, #1
 8003d4a:	e7f4      	b.n	8003d36 <strcat+0x4>

08003d4c <strcpy>:
 8003d4c:	1c03      	adds	r3, r0, #0
 8003d4e:	780a      	ldrb	r2, [r1, #0]
 8003d50:	3101      	adds	r1, #1
 8003d52:	701a      	strb	r2, [r3, #0]
 8003d54:	3301      	adds	r3, #1
 8003d56:	2a00      	cmp	r2, #0
 8003d58:	d1f9      	bne.n	8003d4e <strcpy+0x2>
 8003d5a:	4770      	bx	lr

08003d5c <_init>:
 8003d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d62:	bc08      	pop	{r3}
 8003d64:	469e      	mov	lr, r3
 8003d66:	4770      	bx	lr

08003d68 <_fini>:
 8003d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6e:	bc08      	pop	{r3}
 8003d70:	469e      	mov	lr, r3
 8003d72:	4770      	bx	lr
