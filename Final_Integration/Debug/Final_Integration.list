
Final_Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003264  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003324  08003324  00013324  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080033b8  080033b8  000133b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080033c0  080033c0  000133c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080033c4  080033c4  000133c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000560  20000000  080033c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000039c  20000560  08003928  00020560  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200008fc  08003928  000208fc  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020560  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016f72  00000000  00000000  00020588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000300e  00000000  00000000  000374fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c98b  00000000  00000000  0003a508  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000de8  00000000  00000000  00046e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000013a8  00000000  00000000  00047c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000083d2  00000000  00000000  00049028  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004d37  00000000  00000000  000513fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00056131  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002c6c  00000000  00000000  000561b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000560 	.word	0x20000560
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800330c 	.word	0x0800330c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000564 	.word	0x20000564
 8000104:	0800330c 	.word	0x0800330c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uldivmod>:
 8000248:	2b00      	cmp	r3, #0
 800024a:	d111      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 800024c:	2a00      	cmp	r2, #0
 800024e:	d10f      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 8000250:	2900      	cmp	r1, #0
 8000252:	d100      	bne.n	8000256 <__aeabi_uldivmod+0xe>
 8000254:	2800      	cmp	r0, #0
 8000256:	d002      	beq.n	800025e <__aeabi_uldivmod+0x16>
 8000258:	2100      	movs	r1, #0
 800025a:	43c9      	mvns	r1, r1
 800025c:	1c08      	adds	r0, r1, #0
 800025e:	b407      	push	{r0, r1, r2}
 8000260:	4802      	ldr	r0, [pc, #8]	; (800026c <__aeabi_uldivmod+0x24>)
 8000262:	a102      	add	r1, pc, #8	; (adr r1, 800026c <__aeabi_uldivmod+0x24>)
 8000264:	1840      	adds	r0, r0, r1
 8000266:	9002      	str	r0, [sp, #8]
 8000268:	bd03      	pop	{r0, r1, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	ffffffd9 	.word	0xffffffd9
 8000270:	b403      	push	{r0, r1}
 8000272:	4668      	mov	r0, sp
 8000274:	b501      	push	{r0, lr}
 8000276:	9802      	ldr	r0, [sp, #8]
 8000278:	f000 f806 	bl	8000288 <__udivmoddi4>
 800027c:	9b01      	ldr	r3, [sp, #4]
 800027e:	469e      	mov	lr, r3
 8000280:	b002      	add	sp, #8
 8000282:	bc0c      	pop	{r2, r3}
 8000284:	4770      	bx	lr
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__udivmoddi4>:
 8000288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028a:	4657      	mov	r7, sl
 800028c:	464e      	mov	r6, r9
 800028e:	4645      	mov	r5, r8
 8000290:	46de      	mov	lr, fp
 8000292:	b5e0      	push	{r5, r6, r7, lr}
 8000294:	0004      	movs	r4, r0
 8000296:	b083      	sub	sp, #12
 8000298:	000d      	movs	r5, r1
 800029a:	4692      	mov	sl, r2
 800029c:	4699      	mov	r9, r3
 800029e:	428b      	cmp	r3, r1
 80002a0:	d82f      	bhi.n	8000302 <__udivmoddi4+0x7a>
 80002a2:	d02c      	beq.n	80002fe <__udivmoddi4+0x76>
 80002a4:	4649      	mov	r1, r9
 80002a6:	4650      	mov	r0, sl
 80002a8:	f000 f8ae 	bl	8000408 <__clzdi2>
 80002ac:	0029      	movs	r1, r5
 80002ae:	0006      	movs	r6, r0
 80002b0:	0020      	movs	r0, r4
 80002b2:	f000 f8a9 	bl	8000408 <__clzdi2>
 80002b6:	1a33      	subs	r3, r6, r0
 80002b8:	4698      	mov	r8, r3
 80002ba:	3b20      	subs	r3, #32
 80002bc:	469b      	mov	fp, r3
 80002be:	d500      	bpl.n	80002c2 <__udivmoddi4+0x3a>
 80002c0:	e074      	b.n	80003ac <__udivmoddi4+0x124>
 80002c2:	4653      	mov	r3, sl
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	001f      	movs	r7, r3
 80002ca:	4653      	mov	r3, sl
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	001e      	movs	r6, r3
 80002d2:	42af      	cmp	r7, r5
 80002d4:	d829      	bhi.n	800032a <__udivmoddi4+0xa2>
 80002d6:	d026      	beq.n	8000326 <__udivmoddi4+0x9e>
 80002d8:	465b      	mov	r3, fp
 80002da:	1ba4      	subs	r4, r4, r6
 80002dc:	41bd      	sbcs	r5, r7
 80002de:	2b00      	cmp	r3, #0
 80002e0:	da00      	bge.n	80002e4 <__udivmoddi4+0x5c>
 80002e2:	e079      	b.n	80003d8 <__udivmoddi4+0x150>
 80002e4:	2200      	movs	r2, #0
 80002e6:	2300      	movs	r3, #0
 80002e8:	9200      	str	r2, [sp, #0]
 80002ea:	9301      	str	r3, [sp, #4]
 80002ec:	2301      	movs	r3, #1
 80002ee:	465a      	mov	r2, fp
 80002f0:	4093      	lsls	r3, r2
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	2301      	movs	r3, #1
 80002f6:	4642      	mov	r2, r8
 80002f8:	4093      	lsls	r3, r2
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	e019      	b.n	8000332 <__udivmoddi4+0xaa>
 80002fe:	4282      	cmp	r2, r0
 8000300:	d9d0      	bls.n	80002a4 <__udivmoddi4+0x1c>
 8000302:	2200      	movs	r2, #0
 8000304:	2300      	movs	r3, #0
 8000306:	9200      	str	r2, [sp, #0]
 8000308:	9301      	str	r3, [sp, #4]
 800030a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <__udivmoddi4+0x8c>
 8000310:	601c      	str	r4, [r3, #0]
 8000312:	605d      	str	r5, [r3, #4]
 8000314:	9800      	ldr	r0, [sp, #0]
 8000316:	9901      	ldr	r1, [sp, #4]
 8000318:	b003      	add	sp, #12
 800031a:	bc3c      	pop	{r2, r3, r4, r5}
 800031c:	4690      	mov	r8, r2
 800031e:	4699      	mov	r9, r3
 8000320:	46a2      	mov	sl, r4
 8000322:	46ab      	mov	fp, r5
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	42a3      	cmp	r3, r4
 8000328:	d9d6      	bls.n	80002d8 <__udivmoddi4+0x50>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	4643      	mov	r3, r8
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0e8      	beq.n	800030a <__udivmoddi4+0x82>
 8000338:	07fb      	lsls	r3, r7, #31
 800033a:	0872      	lsrs	r2, r6, #1
 800033c:	431a      	orrs	r2, r3
 800033e:	4646      	mov	r6, r8
 8000340:	087b      	lsrs	r3, r7, #1
 8000342:	e00e      	b.n	8000362 <__udivmoddi4+0xda>
 8000344:	42ab      	cmp	r3, r5
 8000346:	d101      	bne.n	800034c <__udivmoddi4+0xc4>
 8000348:	42a2      	cmp	r2, r4
 800034a:	d80c      	bhi.n	8000366 <__udivmoddi4+0xde>
 800034c:	1aa4      	subs	r4, r4, r2
 800034e:	419d      	sbcs	r5, r3
 8000350:	2001      	movs	r0, #1
 8000352:	1924      	adds	r4, r4, r4
 8000354:	416d      	adcs	r5, r5
 8000356:	2100      	movs	r1, #0
 8000358:	3e01      	subs	r6, #1
 800035a:	1824      	adds	r4, r4, r0
 800035c:	414d      	adcs	r5, r1
 800035e:	2e00      	cmp	r6, #0
 8000360:	d006      	beq.n	8000370 <__udivmoddi4+0xe8>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d9ee      	bls.n	8000344 <__udivmoddi4+0xbc>
 8000366:	3e01      	subs	r6, #1
 8000368:	1924      	adds	r4, r4, r4
 800036a:	416d      	adcs	r5, r5
 800036c:	2e00      	cmp	r6, #0
 800036e:	d1f8      	bne.n	8000362 <__udivmoddi4+0xda>
 8000370:	465b      	mov	r3, fp
 8000372:	9800      	ldr	r0, [sp, #0]
 8000374:	9901      	ldr	r1, [sp, #4]
 8000376:	1900      	adds	r0, r0, r4
 8000378:	4169      	adcs	r1, r5
 800037a:	2b00      	cmp	r3, #0
 800037c:	db22      	blt.n	80003c4 <__udivmoddi4+0x13c>
 800037e:	002b      	movs	r3, r5
 8000380:	465a      	mov	r2, fp
 8000382:	40d3      	lsrs	r3, r2
 8000384:	002a      	movs	r2, r5
 8000386:	4644      	mov	r4, r8
 8000388:	40e2      	lsrs	r2, r4
 800038a:	001c      	movs	r4, r3
 800038c:	465b      	mov	r3, fp
 800038e:	0015      	movs	r5, r2
 8000390:	2b00      	cmp	r3, #0
 8000392:	db2c      	blt.n	80003ee <__udivmoddi4+0x166>
 8000394:	0026      	movs	r6, r4
 8000396:	409e      	lsls	r6, r3
 8000398:	0033      	movs	r3, r6
 800039a:	0026      	movs	r6, r4
 800039c:	4647      	mov	r7, r8
 800039e:	40be      	lsls	r6, r7
 80003a0:	0032      	movs	r2, r6
 80003a2:	1a80      	subs	r0, r0, r2
 80003a4:	4199      	sbcs	r1, r3
 80003a6:	9000      	str	r0, [sp, #0]
 80003a8:	9101      	str	r1, [sp, #4]
 80003aa:	e7ae      	b.n	800030a <__udivmoddi4+0x82>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	1a9b      	subs	r3, r3, r2
 80003b2:	4652      	mov	r2, sl
 80003b4:	40da      	lsrs	r2, r3
 80003b6:	4641      	mov	r1, r8
 80003b8:	0013      	movs	r3, r2
 80003ba:	464a      	mov	r2, r9
 80003bc:	408a      	lsls	r2, r1
 80003be:	0017      	movs	r7, r2
 80003c0:	431f      	orrs	r7, r3
 80003c2:	e782      	b.n	80002ca <__udivmoddi4+0x42>
 80003c4:	4642      	mov	r2, r8
 80003c6:	2320      	movs	r3, #32
 80003c8:	1a9b      	subs	r3, r3, r2
 80003ca:	002a      	movs	r2, r5
 80003cc:	4646      	mov	r6, r8
 80003ce:	409a      	lsls	r2, r3
 80003d0:	0023      	movs	r3, r4
 80003d2:	40f3      	lsrs	r3, r6
 80003d4:	4313      	orrs	r3, r2
 80003d6:	e7d5      	b.n	8000384 <__udivmoddi4+0xfc>
 80003d8:	4642      	mov	r2, r8
 80003da:	2320      	movs	r3, #32
 80003dc:	2100      	movs	r1, #0
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	9100      	str	r1, [sp, #0]
 80003e4:	9201      	str	r2, [sp, #4]
 80003e6:	2201      	movs	r2, #1
 80003e8:	40da      	lsrs	r2, r3
 80003ea:	9201      	str	r2, [sp, #4]
 80003ec:	e782      	b.n	80002f4 <__udivmoddi4+0x6c>
 80003ee:	4642      	mov	r2, r8
 80003f0:	2320      	movs	r3, #32
 80003f2:	0026      	movs	r6, r4
 80003f4:	1a9b      	subs	r3, r3, r2
 80003f6:	40de      	lsrs	r6, r3
 80003f8:	002f      	movs	r7, r5
 80003fa:	46b4      	mov	ip, r6
 80003fc:	4097      	lsls	r7, r2
 80003fe:	4666      	mov	r6, ip
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7c9      	b.n	800039a <__udivmoddi4+0x112>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	1c08      	adds	r0, r1, #0
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800045c:	21fa      	movs	r1, #250	; 0xfa
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <HAL_InitTick+0x2c>)
{
 8000460:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000462:	0089      	lsls	r1, r1, #2
{
 8000464:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000466:	6818      	ldr	r0, [r3, #0]
 8000468:	f7ff fe62 	bl	8000130 <__udivsi3>
 800046c:	f000 f87a 	bl	8000564 <HAL_SYSTICK_Config>
 8000470:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8000472:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000474:	2c00      	cmp	r4, #0
 8000476:	d105      	bne.n	8000484 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000478:	3802      	subs	r0, #2
 800047a:	0022      	movs	r2, r4
 800047c:	0029      	movs	r1, r5
 800047e:	f000 f837 	bl	80004f0 <HAL_NVIC_SetPriority>
 8000482:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	2000055c 	.word	0x2000055c

0800048c <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800048c:	2340      	movs	r3, #64	; 0x40
 800048e:	4a08      	ldr	r2, [pc, #32]	; (80004b0 <HAL_Init+0x24>)
{
 8000490:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000492:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000494:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000496:	430b      	orrs	r3, r1
 8000498:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800049a:	f7ff ffdf 	bl	800045c <HAL_InitTick>
 800049e:	1e04      	subs	r4, r0, #0
 80004a0:	d103      	bne.n	80004aa <HAL_Init+0x1e>
    HAL_MspInit();
 80004a2:	f002 fd97 	bl	8002fd4 <HAL_MspInit>
}
 80004a6:	0020      	movs	r0, r4
 80004a8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80004aa:	2401      	movs	r4, #1
 80004ac:	e7fb      	b.n	80004a6 <HAL_Init+0x1a>
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	40022000 	.word	0x40022000

080004b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80004b4:	4a02      	ldr	r2, [pc, #8]	; (80004c0 <HAL_IncTick+0xc>)
 80004b6:	6813      	ldr	r3, [r2, #0]
 80004b8:	3301      	adds	r3, #1
 80004ba:	6013      	str	r3, [r2, #0]
}
 80004bc:	4770      	bx	lr
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	20000680 	.word	0x20000680

080004c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004c4:	4b01      	ldr	r3, [pc, #4]	; (80004cc <HAL_GetTick+0x8>)
 80004c6:	6818      	ldr	r0, [r3, #0]
}
 80004c8:	4770      	bx	lr
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	20000680 	.word	0x20000680

080004d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80004d4:	f7ff fff6 	bl	80004c4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 80004d8:	1c63      	adds	r3, r4, #1
 80004da:	1e5a      	subs	r2, r3, #1
 80004dc:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 80004de:	0005      	movs	r5, r0
    wait++;
 80004e0:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80004e2:	f7ff ffef 	bl	80004c4 <HAL_GetTick>
 80004e6:	1b40      	subs	r0, r0, r5
 80004e8:	4284      	cmp	r4, r0
 80004ea:	d8fa      	bhi.n	80004e2 <HAL_Delay+0x12>
  {
  }
}
 80004ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080004f0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80004f4:	2800      	cmp	r0, #0
 80004f6:	da14      	bge.n	8000522 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f8:	230f      	movs	r3, #15
 80004fa:	b2c0      	uxtb	r0, r0
 80004fc:	4003      	ands	r3, r0
 80004fe:	3b08      	subs	r3, #8
 8000500:	4a11      	ldr	r2, [pc, #68]	; (8000548 <HAL_NVIC_SetPriority+0x58>)
 8000502:	089b      	lsrs	r3, r3, #2
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	189b      	adds	r3, r3, r2
 8000508:	2203      	movs	r2, #3
 800050a:	4010      	ands	r0, r2
 800050c:	4090      	lsls	r0, r2
 800050e:	32fc      	adds	r2, #252	; 0xfc
 8000510:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000512:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000514:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000516:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000518:	69dc      	ldr	r4, [r3, #28]
 800051a:	43ac      	bics	r4, r5
 800051c:	4321      	orrs	r1, r4
 800051e:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000520:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000522:	2503      	movs	r5, #3
 8000524:	0883      	lsrs	r3, r0, #2
 8000526:	4028      	ands	r0, r5
 8000528:	40a8      	lsls	r0, r5
 800052a:	35fc      	adds	r5, #252	; 0xfc
 800052c:	002e      	movs	r6, r5
 800052e:	4a07      	ldr	r2, [pc, #28]	; (800054c <HAL_NVIC_SetPriority+0x5c>)
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	189b      	adds	r3, r3, r2
 8000534:	22c0      	movs	r2, #192	; 0xc0
 8000536:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000538:	4029      	ands	r1, r5
 800053a:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800053c:	0092      	lsls	r2, r2, #2
 800053e:	589c      	ldr	r4, [r3, r2]
 8000540:	43b4      	bics	r4, r6
 8000542:	4321      	orrs	r1, r4
 8000544:	5099      	str	r1, [r3, r2]
 8000546:	e7eb      	b.n	8000520 <HAL_NVIC_SetPriority+0x30>
 8000548:	e000ed00 	.word	0xe000ed00
 800054c:	e000e100 	.word	0xe000e100

08000550 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000550:	231f      	movs	r3, #31
 8000552:	4018      	ands	r0, r3
 8000554:	3b1e      	subs	r3, #30
 8000556:	4083      	lsls	r3, r0
 8000558:	4a01      	ldr	r2, [pc, #4]	; (8000560 <HAL_NVIC_EnableIRQ+0x10>)
 800055a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800055c:	4770      	bx	lr
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	e000e100 	.word	0xe000e100

08000564 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000564:	4a09      	ldr	r2, [pc, #36]	; (800058c <HAL_SYSTICK_Config+0x28>)
 8000566:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000568:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800056a:	4293      	cmp	r3, r2
 800056c:	d80d      	bhi.n	800058a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800056e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000570:	4a07      	ldr	r2, [pc, #28]	; (8000590 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000572:	4808      	ldr	r0, [pc, #32]	; (8000594 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000574:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000576:	6a03      	ldr	r3, [r0, #32]
 8000578:	0609      	lsls	r1, r1, #24
 800057a:	021b      	lsls	r3, r3, #8
 800057c:	0a1b      	lsrs	r3, r3, #8
 800057e:	430b      	orrs	r3, r1
 8000580:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000582:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000584:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000586:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000588:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800058a:	4770      	bx	lr
 800058c:	00ffffff 	.word	0x00ffffff
 8000590:	e000e010 	.word	0xe000e010
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000598:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800059a:	1d84      	adds	r4, r0, #6
 800059c:	7fe3      	ldrb	r3, [r4, #31]
 800059e:	2b02      	cmp	r3, #2
 80005a0:	d004      	beq.n	80005ac <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80005a2:	2304      	movs	r3, #4
 80005a4:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 80005a6:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 80005a8:	0018      	movs	r0, r3
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80005ac:	210e      	movs	r1, #14
 80005ae:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80005b0:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	438a      	bics	r2, r1
 80005b6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80005b8:	2201      	movs	r2, #1
 80005ba:	6819      	ldr	r1, [r3, #0]
 80005bc:	4391      	bics	r1, r2
 80005be:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80005c0:	231c      	movs	r3, #28
 80005c2:	402b      	ands	r3, r5
 80005c4:	0015      	movs	r5, r2
 80005c6:	409d      	lsls	r5, r3
 80005c8:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 80005ca:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80005cc:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80005ce:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80005d0:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 80005d2:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80005d4:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 80005d6:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 80005d8:	42a2      	cmp	r2, r4
 80005da:	d0e5      	beq.n	80005a8 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80005dc:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80005de:	0023      	movs	r3, r4
 80005e0:	e7e2      	b.n	80005a8 <HAL_DMA_Abort_IT+0x10>
	...

080005e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005e4:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80005e6:	4a53      	ldr	r2, [pc, #332]	; (8000734 <HAL_GPIO_Init+0x150>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80005e8:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80005ea:	1882      	adds	r2, r0, r2
 80005ec:	1e54      	subs	r4, r2, #1
 80005ee:	41a2      	sbcs	r2, r4
{
 80005f0:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 80005f2:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 80005f4:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80005f6:	3205      	adds	r2, #5
 80005f8:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 80005fa:	9a01      	ldr	r2, [sp, #4]
 80005fc:	40da      	lsrs	r2, r3
 80005fe:	d101      	bne.n	8000604 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000600:	b005      	add	sp, #20
 8000602:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000604:	2501      	movs	r5, #1
 8000606:	409d      	lsls	r5, r3
 8000608:	9a01      	ldr	r2, [sp, #4]
 800060a:	402a      	ands	r2, r5
 800060c:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 800060e:	d100      	bne.n	8000612 <HAL_GPIO_Init+0x2e>
 8000610:	e08d      	b.n	800072e <HAL_GPIO_Init+0x14a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000612:	684a      	ldr	r2, [r1, #4]
 8000614:	4694      	mov	ip, r2
 8000616:	2210      	movs	r2, #16
 8000618:	4664      	mov	r4, ip
 800061a:	4394      	bics	r4, r2
 800061c:	0022      	movs	r2, r4
 800061e:	3c01      	subs	r4, #1
 8000620:	2a02      	cmp	r2, #2
 8000622:	d11f      	bne.n	8000664 <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000624:	2407      	movs	r4, #7
 8000626:	270f      	movs	r7, #15
 8000628:	401c      	ands	r4, r3
 800062a:	00a4      	lsls	r4, r4, #2
 800062c:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 800062e:	08da      	lsrs	r2, r3, #3
 8000630:	0092      	lsls	r2, r2, #2
 8000632:	1882      	adds	r2, r0, r2
 8000634:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000636:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000638:	690f      	ldr	r7, [r1, #16]
 800063a:	40a7      	lsls	r7, r4
 800063c:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 800063e:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000640:	2403      	movs	r4, #3
 8000642:	005e      	lsls	r6, r3, #1
 8000644:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 8000646:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000648:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800064a:	68cc      	ldr	r4, [r1, #12]
 800064c:	40b4      	lsls	r4, r6
 800064e:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 8000650:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000652:	4662      	mov	r2, ip
 8000654:	06d2      	lsls	r2, r2, #27
 8000656:	0fd2      	lsrs	r2, r2, #31
 8000658:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 800065a:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800065c:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800065e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000660:	6042      	str	r2, [r0, #4]
 8000662:	e001      	b.n	8000668 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000664:	2c01      	cmp	r4, #1
 8000666:	d9eb      	bls.n	8000640 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000668:	2603      	movs	r6, #3
 800066a:	0034      	movs	r4, r6
 800066c:	005d      	lsls	r5, r3, #1
 800066e:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000670:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000672:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000674:	4032      	ands	r2, r6
 8000676:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 8000678:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800067a:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800067c:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 800067e:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 8000680:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000682:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000684:	688a      	ldr	r2, [r1, #8]
 8000686:	40aa      	lsls	r2, r5
 8000688:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800068a:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 800068c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800068e:	00d2      	lsls	r2, r2, #3
 8000690:	d54d      	bpl.n	800072e <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000692:	2501      	movs	r5, #1
 8000694:	4c28      	ldr	r4, [pc, #160]	; (8000738 <HAL_GPIO_Init+0x154>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000696:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000698:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800069a:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800069c:	001d      	movs	r5, r3
 800069e:	4035      	ands	r5, r6
 80006a0:	00ad      	lsls	r5, r5, #2
 80006a2:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a4:	6362      	str	r2, [r4, #52]	; 0x34
 80006a6:	4a25      	ldr	r2, [pc, #148]	; (800073c <HAL_GPIO_Init+0x158>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80006a8:	089c      	lsrs	r4, r3, #2
 80006aa:	00a4      	lsls	r4, r4, #2
 80006ac:	18a4      	adds	r4, r4, r2
 80006ae:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80006b0:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80006b2:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80006b4:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80006b6:	05ff      	lsls	r7, r7, #23
 80006b8:	2200      	movs	r2, #0
 80006ba:	42b8      	cmp	r0, r7
 80006bc:	d00c      	beq.n	80006d8 <HAL_GPIO_Init+0xf4>
 80006be:	4f20      	ldr	r7, [pc, #128]	; (8000740 <HAL_GPIO_Init+0x15c>)
 80006c0:	3201      	adds	r2, #1
 80006c2:	42b8      	cmp	r0, r7
 80006c4:	d008      	beq.n	80006d8 <HAL_GPIO_Init+0xf4>
 80006c6:	4f1f      	ldr	r7, [pc, #124]	; (8000744 <HAL_GPIO_Init+0x160>)
 80006c8:	3201      	adds	r2, #1
 80006ca:	42b8      	cmp	r0, r7
 80006cc:	d004      	beq.n	80006d8 <HAL_GPIO_Init+0xf4>
 80006ce:	4f1e      	ldr	r7, [pc, #120]	; (8000748 <HAL_GPIO_Init+0x164>)
 80006d0:	0032      	movs	r2, r6
 80006d2:	42b8      	cmp	r0, r7
 80006d4:	d000      	beq.n	80006d8 <HAL_GPIO_Init+0xf4>
 80006d6:	9a03      	ldr	r2, [sp, #12]
 80006d8:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006da:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80006dc:	9d02      	ldr	r5, [sp, #8]
 80006de:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80006e0:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80006e2:	4a1a      	ldr	r2, [pc, #104]	; (800074c <HAL_GPIO_Init+0x168>)
        temp &= ~((uint32_t)iocurrent);
 80006e4:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 80006e6:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 80006e8:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 80006ea:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80006ec:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006ee:	03ff      	lsls	r7, r7, #15
 80006f0:	d401      	bmi.n	80006f6 <HAL_GPIO_Init+0x112>
        temp &= ~((uint32_t)iocurrent);
 80006f2:	0035      	movs	r5, r6
 80006f4:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006f6:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 80006f8:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80006fa:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80006fc:	9d00      	ldr	r5, [sp, #0]
 80006fe:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000700:	03bf      	lsls	r7, r7, #14
 8000702:	d401      	bmi.n	8000708 <HAL_GPIO_Init+0x124>
        temp &= ~((uint32_t)iocurrent);
 8000704:	0035      	movs	r5, r6
 8000706:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000708:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800070a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800070c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800070e:	9d00      	ldr	r5, [sp, #0]
 8000710:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000712:	02ff      	lsls	r7, r7, #11
 8000714:	d401      	bmi.n	800071a <HAL_GPIO_Init+0x136>
        temp &= ~((uint32_t)iocurrent);
 8000716:	0035      	movs	r5, r6
 8000718:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800071a:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 800071c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800071e:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000720:	9e00      	ldr	r6, [sp, #0]
 8000722:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000724:	02bf      	lsls	r7, r7, #10
 8000726:	d401      	bmi.n	800072c <HAL_GPIO_Init+0x148>
        temp &= ~((uint32_t)iocurrent);
 8000728:	4025      	ands	r5, r4
 800072a:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 800072c:	60d6      	str	r6, [r2, #12]
    position++;
 800072e:	3301      	adds	r3, #1
 8000730:	e763      	b.n	80005fa <HAL_GPIO_Init+0x16>
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	afffe400 	.word	0xafffe400
 8000738:	40021000 	.word	0x40021000
 800073c:	40010000 	.word	0x40010000
 8000740:	50000400 	.word	0x50000400
 8000744:	50000800 	.word	0x50000800
 8000748:	50000c00 	.word	0x50000c00
 800074c:	40010400 	.word	0x40010400

08000750 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000750:	2a00      	cmp	r2, #0
 8000752:	d001      	beq.n	8000758 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000754:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000756:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000758:	6281      	str	r1, [r0, #40]	; 0x28
}
 800075a:	e7fc      	b.n	8000756 <HAL_GPIO_WritePin+0x6>

0800075c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800075e:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000760:	695a      	ldr	r2, [r3, #20]
 8000762:	4210      	tst	r0, r2
 8000764:	d002      	beq.n	800076c <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000766:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000768:	f002 fa08 	bl	8002b7c <HAL_GPIO_EXTI_Callback>
  }
}
 800076c:	bd10      	pop	{r4, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	40010400 	.word	0x40010400

08000774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8000778:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800077a:	2c00      	cmp	r4, #0
 800077c:	d03f      	beq.n	80007fe <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800077e:	0025      	movs	r5, r4
 8000780:	3541      	adds	r5, #65	; 0x41
 8000782:	782b      	ldrb	r3, [r5, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d105      	bne.n	8000796 <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800078a:	0022      	movs	r2, r4
 800078c:	3240      	adds	r2, #64	; 0x40
 800078e:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000790:	0020      	movs	r0, r4
 8000792:	f002 fc2d 	bl	8002ff0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000796:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000798:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800079a:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 800079c:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800079e:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	68a6      	ldr	r6, [r4, #8]
 80007a4:	438a      	bics	r2, r1
 80007a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80007a8:	6861      	ldr	r1, [r4, #4]
 80007aa:	4a1a      	ldr	r2, [pc, #104]	; (8000814 <HAL_I2C_Init+0xa0>)
 80007ac:	400a      	ands	r2, r1
 80007ae:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80007b0:	6899      	ldr	r1, [r3, #8]
 80007b2:	4a19      	ldr	r2, [pc, #100]	; (8000818 <HAL_I2C_Init+0xa4>)
 80007b4:	4011      	ands	r1, r2
 80007b6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80007b8:	2801      	cmp	r0, #1
 80007ba:	d121      	bne.n	8000800 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	0209      	lsls	r1, r1, #8
 80007c0:	4331      	orrs	r1, r6
 80007c2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80007c4:	6858      	ldr	r0, [r3, #4]
 80007c6:	4915      	ldr	r1, [pc, #84]	; (800081c <HAL_I2C_Init+0xa8>)
 80007c8:	4301      	orrs	r1, r0
 80007ca:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80007cc:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80007ce:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80007d0:	400a      	ands	r2, r1
 80007d2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80007d4:	6961      	ldr	r1, [r4, #20]
 80007d6:	6922      	ldr	r2, [r4, #16]
 80007d8:	430a      	orrs	r2, r1
 80007da:	69a1      	ldr	r1, [r4, #24]
 80007dc:	0209      	lsls	r1, r1, #8
 80007de:	430a      	orrs	r2, r1
 80007e0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80007e2:	6a21      	ldr	r1, [r4, #32]
 80007e4:	69e2      	ldr	r2, [r4, #28]
 80007e6:	430a      	orrs	r2, r1
 80007e8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80007ea:	2201      	movs	r2, #1
 80007ec:	6819      	ldr	r1, [r3, #0]
 80007ee:	430a      	orrs	r2, r1
 80007f0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80007f2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80007f4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80007f6:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80007f8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80007fa:	3442      	adds	r4, #66	; 0x42
 80007fc:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80007fe:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000800:	2184      	movs	r1, #132	; 0x84
 8000802:	0209      	lsls	r1, r1, #8
 8000804:	4331      	orrs	r1, r6
 8000806:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000808:	2802      	cmp	r0, #2
 800080a:	d1db      	bne.n	80007c4 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	0109      	lsls	r1, r1, #4
 8000810:	6059      	str	r1, [r3, #4]
 8000812:	e7d7      	b.n	80007c4 <HAL_I2C_Init+0x50>
 8000814:	f0ffffff 	.word	0xf0ffffff
 8000818:	ffff7fff 	.word	0xffff7fff
 800081c:	02008000 	.word	0x02008000

08000820 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000820:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000822:	0004      	movs	r4, r0
 8000824:	3441      	adds	r4, #65	; 0x41
 8000826:	7822      	ldrb	r2, [r4, #0]
{
 8000828:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800082a:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800082c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800082e:	2a20      	cmp	r2, #32
 8000830:	d118      	bne.n	8000864 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8000832:	001d      	movs	r5, r3
 8000834:	3540      	adds	r5, #64	; 0x40
 8000836:	782e      	ldrb	r6, [r5, #0]
 8000838:	2e01      	cmp	r6, #1
 800083a:	d013      	beq.n	8000864 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 800083c:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800083e:	3022      	adds	r0, #34	; 0x22
 8000840:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000842:	681e      	ldr	r6, [r3, #0]
 8000844:	3823      	subs	r0, #35	; 0x23
 8000846:	4386      	bics	r6, r0
 8000848:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800084a:	681e      	ldr	r6, [r3, #0]
 800084c:	4f06      	ldr	r7, [pc, #24]	; (8000868 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 800084e:	403e      	ands	r6, r7
 8000850:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000852:	681e      	ldr	r6, [r3, #0]
 8000854:	4331      	orrs	r1, r6
 8000856:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000858:	6819      	ldr	r1, [r3, #0]
 800085a:	4308      	orrs	r0, r1
 800085c:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800085e:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000860:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8000862:	7028      	strb	r0, [r5, #0]
  }
}
 8000864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	ffffefff 	.word	0xffffefff

0800086c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800086c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800086e:	0005      	movs	r5, r0
 8000870:	3541      	adds	r5, #65	; 0x41
 8000872:	782a      	ldrb	r2, [r5, #0]
{
 8000874:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000876:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000878:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800087a:	2a20      	cmp	r2, #32
 800087c:	d117      	bne.n	80008ae <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800087e:	001c      	movs	r4, r3
 8000880:	3440      	adds	r4, #64	; 0x40
 8000882:	7826      	ldrb	r6, [r4, #0]
 8000884:	2e01      	cmp	r6, #1
 8000886:	d012      	beq.n	80008ae <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000888:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800088a:	3022      	adds	r0, #34	; 0x22
 800088c:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 800088e:	681e      	ldr	r6, [r3, #0]
 8000890:	3823      	subs	r0, #35	; 0x23
 8000892:	4386      	bics	r6, r0
 8000894:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8000896:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000898:	4f05      	ldr	r7, [pc, #20]	; (80008b0 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 800089a:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 800089c:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 800089e:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80008a0:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80008a2:	6819      	ldr	r1, [r3, #0]
 80008a4:	4308      	orrs	r0, r1
 80008a6:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80008a8:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80008aa:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80008ac:	7020      	strb	r0, [r4, #0]
  }
}
 80008ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b0:	fffff0ff 	.word	0xfffff0ff

080008b4 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80008b4:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80008b8:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80008ba:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80008bc:	400a      	ands	r2, r1
 80008be:	2a08      	cmp	r2, #8
 80008c0:	d026      	beq.n	8000910 <HAL_RCC_GetSysClockFreq+0x5c>
 80008c2:	2a0c      	cmp	r2, #12
 80008c4:	d006      	beq.n	80008d4 <HAL_RCC_GetSysClockFreq+0x20>
 80008c6:	2a04      	cmp	r2, #4
 80008c8:	d11a      	bne.n	8000900 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	06db      	lsls	r3, r3, #27
 80008ce:	d421      	bmi.n	8000914 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80008d0:	4812      	ldr	r0, [pc, #72]	; (800091c <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80008d2:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80008d4:	028a      	lsls	r2, r1, #10
 80008d6:	4812      	ldr	r0, [pc, #72]	; (8000920 <HAL_RCC_GetSysClockFreq+0x6c>)
 80008d8:	0f12      	lsrs	r2, r2, #28
 80008da:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80008dc:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80008de:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80008e0:	0f89      	lsrs	r1, r1, #30
 80008e2:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80008e4:	03c0      	lsls	r0, r0, #15
 80008e6:	d504      	bpl.n	80008f2 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 80008e8:	480e      	ldr	r0, [pc, #56]	; (8000924 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80008ea:	4350      	muls	r0, r2
 80008ec:	f7ff fc20 	bl	8000130 <__udivsi3>
 80008f0:	e7ef      	b.n	80008d2 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	06db      	lsls	r3, r3, #27
 80008f6:	d501      	bpl.n	80008fc <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80008f8:	480b      	ldr	r0, [pc, #44]	; (8000928 <HAL_RCC_GetSysClockFreq+0x74>)
 80008fa:	e7f6      	b.n	80008ea <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 80008fc:	4807      	ldr	r0, [pc, #28]	; (800091c <HAL_RCC_GetSysClockFreq+0x68>)
 80008fe:	e7f4      	b.n	80008ea <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000900:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000902:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000904:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000906:	041b      	lsls	r3, r3, #16
 8000908:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800090a:	3301      	adds	r3, #1
 800090c:	4098      	lsls	r0, r3
 800090e:	e7e0      	b.n	80008d2 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <HAL_RCC_GetSysClockFreq+0x70>)
 8000912:	e7de      	b.n	80008d2 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000916:	e7dc      	b.n	80008d2 <HAL_RCC_GetSysClockFreq+0x1e>
 8000918:	40021000 	.word	0x40021000
 800091c:	00f42400 	.word	0x00f42400
 8000920:	080033ad 	.word	0x080033ad
 8000924:	007a1200 	.word	0x007a1200
 8000928:	003d0900 	.word	0x003d0900

0800092c <HAL_RCC_OscConfig>:
{
 800092c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800092e:	0005      	movs	r5, r0
 8000930:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8000932:	2800      	cmp	r0, #0
 8000934:	d102      	bne.n	800093c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000936:	2001      	movs	r0, #1
}
 8000938:	b007      	add	sp, #28
 800093a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800093c:	230c      	movs	r3, #12
 800093e:	4cbe      	ldr	r4, [pc, #760]	; (8000c38 <HAL_RCC_OscConfig+0x30c>)
 8000940:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000942:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000944:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000946:	2380      	movs	r3, #128	; 0x80
 8000948:	025b      	lsls	r3, r3, #9
 800094a:	401a      	ands	r2, r3
 800094c:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800094e:	6802      	ldr	r2, [r0, #0]
 8000950:	07d2      	lsls	r2, r2, #31
 8000952:	d441      	bmi.n	80009d8 <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000954:	682b      	ldr	r3, [r5, #0]
 8000956:	079b      	lsls	r3, r3, #30
 8000958:	d500      	bpl.n	800095c <HAL_RCC_OscConfig+0x30>
 800095a:	e087      	b.n	8000a6c <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800095c:	682b      	ldr	r3, [r5, #0]
 800095e:	06db      	lsls	r3, r3, #27
 8000960:	d528      	bpl.n	80009b4 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000962:	2e00      	cmp	r6, #0
 8000964:	d000      	beq.n	8000968 <HAL_RCC_OscConfig+0x3c>
 8000966:	e0d9      	b.n	8000b1c <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000968:	6823      	ldr	r3, [r4, #0]
 800096a:	059b      	lsls	r3, r3, #22
 800096c:	d502      	bpl.n	8000974 <HAL_RCC_OscConfig+0x48>
 800096e:	69eb      	ldr	r3, [r5, #28]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d0e0      	beq.n	8000936 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000974:	6862      	ldr	r2, [r4, #4]
 8000976:	49b1      	ldr	r1, [pc, #708]	; (8000c3c <HAL_RCC_OscConfig+0x310>)
 8000978:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800097a:	400a      	ands	r2, r1
 800097c:	431a      	orrs	r2, r3
 800097e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000980:	6861      	ldr	r1, [r4, #4]
 8000982:	6a2a      	ldr	r2, [r5, #32]
 8000984:	0209      	lsls	r1, r1, #8
 8000986:	0a09      	lsrs	r1, r1, #8
 8000988:	0612      	lsls	r2, r2, #24
 800098a:	430a      	orrs	r2, r1
 800098c:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800098e:	2280      	movs	r2, #128	; 0x80
 8000990:	0b5b      	lsrs	r3, r3, #13
 8000992:	3301      	adds	r3, #1
 8000994:	0212      	lsls	r2, r2, #8
 8000996:	409a      	lsls	r2, r3
 8000998:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800099a:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800099c:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800099e:	060a      	lsls	r2, r1, #24
 80009a0:	49a7      	ldr	r1, [pc, #668]	; (8000c40 <HAL_RCC_OscConfig+0x314>)
 80009a2:	0f12      	lsrs	r2, r2, #28
 80009a4:	5c8a      	ldrb	r2, [r1, r2]
 80009a6:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80009a8:	4aa6      	ldr	r2, [pc, #664]	; (8000c44 <HAL_RCC_OscConfig+0x318>)
 80009aa:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80009ac:	f7ff fd56 	bl	800045c <HAL_InitTick>
        if(status != HAL_OK)
 80009b0:	2800      	cmp	r0, #0
 80009b2:	d1c1      	bne.n	8000938 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009b4:	682b      	ldr	r3, [r5, #0]
 80009b6:	071b      	lsls	r3, r3, #28
 80009b8:	d500      	bpl.n	80009bc <HAL_RCC_OscConfig+0x90>
 80009ba:	e0e6      	b.n	8000b8a <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009bc:	682b      	ldr	r3, [r5, #0]
 80009be:	075b      	lsls	r3, r3, #29
 80009c0:	d500      	bpl.n	80009c4 <HAL_RCC_OscConfig+0x98>
 80009c2:	e108      	b.n	8000bd6 <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80009c4:	682b      	ldr	r3, [r5, #0]
 80009c6:	069b      	lsls	r3, r3, #26
 80009c8:	d500      	bpl.n	80009cc <HAL_RCC_OscConfig+0xa0>
 80009ca:	e18d      	b.n	8000ce8 <HAL_RCC_OscConfig+0x3bc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d000      	beq.n	80009d4 <HAL_RCC_OscConfig+0xa8>
 80009d2:	e1bc      	b.n	8000d4e <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 80009d4:	2000      	movs	r0, #0
 80009d6:	e7af      	b.n	8000938 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80009d8:	2e08      	cmp	r6, #8
 80009da:	d004      	beq.n	80009e6 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80009dc:	2e0c      	cmp	r6, #12
 80009de:	d109      	bne.n	80009f4 <HAL_RCC_OscConfig+0xc8>
 80009e0:	9a01      	ldr	r2, [sp, #4]
 80009e2:	2a00      	cmp	r2, #0
 80009e4:	d006      	beq.n	80009f4 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009e6:	6823      	ldr	r3, [r4, #0]
 80009e8:	039b      	lsls	r3, r3, #14
 80009ea:	d5b3      	bpl.n	8000954 <HAL_RCC_OscConfig+0x28>
 80009ec:	686b      	ldr	r3, [r5, #4]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d1b0      	bne.n	8000954 <HAL_RCC_OscConfig+0x28>
 80009f2:	e7a0      	b.n	8000936 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009f4:	686a      	ldr	r2, [r5, #4]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d111      	bne.n	8000a1e <HAL_RCC_OscConfig+0xf2>
 80009fa:	6822      	ldr	r2, [r4, #0]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a00:	f7ff fd60 	bl	80004c4 <HAL_GetTick>
 8000a04:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a06:	2280      	movs	r2, #128	; 0x80
 8000a08:	6823      	ldr	r3, [r4, #0]
 8000a0a:	0292      	lsls	r2, r2, #10
 8000a0c:	4213      	tst	r3, r2
 8000a0e:	d1a1      	bne.n	8000954 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a10:	f7ff fd58 	bl	80004c4 <HAL_GetTick>
 8000a14:	1bc0      	subs	r0, r0, r7
 8000a16:	2864      	cmp	r0, #100	; 0x64
 8000a18:	d9f5      	bls.n	8000a06 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 8000a1a:	2003      	movs	r0, #3
 8000a1c:	e78c      	b.n	8000938 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a1e:	21a0      	movs	r1, #160	; 0xa0
 8000a20:	02c9      	lsls	r1, r1, #11
 8000a22:	428a      	cmp	r2, r1
 8000a24:	d105      	bne.n	8000a32 <HAL_RCC_OscConfig+0x106>
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	6821      	ldr	r1, [r4, #0]
 8000a2a:	02d2      	lsls	r2, r2, #11
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	6022      	str	r2, [r4, #0]
 8000a30:	e7e3      	b.n	80009fa <HAL_RCC_OscConfig+0xce>
 8000a32:	6821      	ldr	r1, [r4, #0]
 8000a34:	4884      	ldr	r0, [pc, #528]	; (8000c48 <HAL_RCC_OscConfig+0x31c>)
 8000a36:	4001      	ands	r1, r0
 8000a38:	6021      	str	r1, [r4, #0]
 8000a3a:	6821      	ldr	r1, [r4, #0]
 8000a3c:	400b      	ands	r3, r1
 8000a3e:	9305      	str	r3, [sp, #20]
 8000a40:	9b05      	ldr	r3, [sp, #20]
 8000a42:	4982      	ldr	r1, [pc, #520]	; (8000c4c <HAL_RCC_OscConfig+0x320>)
 8000a44:	6823      	ldr	r3, [r4, #0]
 8000a46:	400b      	ands	r3, r1
 8000a48:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a4a:	2a00      	cmp	r2, #0
 8000a4c:	d1d8      	bne.n	8000a00 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8000a4e:	f7ff fd39 	bl	80004c4 <HAL_GetTick>
 8000a52:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000a54:	2280      	movs	r2, #128	; 0x80
 8000a56:	6823      	ldr	r3, [r4, #0]
 8000a58:	0292      	lsls	r2, r2, #10
 8000a5a:	4213      	tst	r3, r2
 8000a5c:	d100      	bne.n	8000a60 <HAL_RCC_OscConfig+0x134>
 8000a5e:	e779      	b.n	8000954 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a60:	f7ff fd30 	bl	80004c4 <HAL_GetTick>
 8000a64:	1bc0      	subs	r0, r0, r7
 8000a66:	2864      	cmp	r0, #100	; 0x64
 8000a68:	d9f4      	bls.n	8000a54 <HAL_RCC_OscConfig+0x128>
 8000a6a:	e7d6      	b.n	8000a1a <HAL_RCC_OscConfig+0xee>
    hsi_state = RCC_OscInitStruct->HSIState;
 8000a6c:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a6e:	2e04      	cmp	r6, #4
 8000a70:	d004      	beq.n	8000a7c <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000a72:	2e0c      	cmp	r6, #12
 8000a74:	d125      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x196>
 8000a76:	9b01      	ldr	r3, [sp, #4]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d122      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000a7c:	6823      	ldr	r3, [r4, #0]
 8000a7e:	075b      	lsls	r3, r3, #29
 8000a80:	d502      	bpl.n	8000a88 <HAL_RCC_OscConfig+0x15c>
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d100      	bne.n	8000a88 <HAL_RCC_OscConfig+0x15c>
 8000a86:	e756      	b.n	8000936 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a88:	6861      	ldr	r1, [r4, #4]
 8000a8a:	692b      	ldr	r3, [r5, #16]
 8000a8c:	4870      	ldr	r0, [pc, #448]	; (8000c50 <HAL_RCC_OscConfig+0x324>)
 8000a8e:	021b      	lsls	r3, r3, #8
 8000a90:	4001      	ands	r1, r0
 8000a92:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000a94:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a96:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000a98:	6823      	ldr	r3, [r4, #0]
 8000a9a:	438b      	bics	r3, r1
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000aa0:	f7ff ff08 	bl	80008b4 <HAL_RCC_GetSysClockFreq>
 8000aa4:	68e3      	ldr	r3, [r4, #12]
 8000aa6:	4a66      	ldr	r2, [pc, #408]	; (8000c40 <HAL_RCC_OscConfig+0x314>)
 8000aa8:	061b      	lsls	r3, r3, #24
 8000aaa:	0f1b      	lsrs	r3, r3, #28
 8000aac:	5cd3      	ldrb	r3, [r2, r3]
 8000aae:	40d8      	lsrs	r0, r3
 8000ab0:	4b64      	ldr	r3, [pc, #400]	; (8000c44 <HAL_RCC_OscConfig+0x318>)
 8000ab2:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f7ff fcd1 	bl	800045c <HAL_InitTick>
      if(status != HAL_OK)
 8000aba:	2800      	cmp	r0, #0
 8000abc:	d100      	bne.n	8000ac0 <HAL_RCC_OscConfig+0x194>
 8000abe:	e74d      	b.n	800095c <HAL_RCC_OscConfig+0x30>
 8000ac0:	e73a      	b.n	8000938 <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ac2:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	d018      	beq.n	8000afa <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ac8:	2109      	movs	r1, #9
 8000aca:	438b      	bics	r3, r1
 8000acc:	4313      	orrs	r3, r2
 8000ace:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ad0:	f7ff fcf8 	bl	80004c4 <HAL_GetTick>
 8000ad4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	6823      	ldr	r3, [r4, #0]
 8000ada:	4213      	tst	r3, r2
 8000adc:	d007      	beq.n	8000aee <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ade:	6862      	ldr	r2, [r4, #4]
 8000ae0:	692b      	ldr	r3, [r5, #16]
 8000ae2:	495b      	ldr	r1, [pc, #364]	; (8000c50 <HAL_RCC_OscConfig+0x324>)
 8000ae4:	021b      	lsls	r3, r3, #8
 8000ae6:	400a      	ands	r2, r1
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	6063      	str	r3, [r4, #4]
 8000aec:	e736      	b.n	800095c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aee:	f7ff fce9 	bl	80004c4 <HAL_GetTick>
 8000af2:	1bc0      	subs	r0, r0, r7
 8000af4:	2802      	cmp	r0, #2
 8000af6:	d9ee      	bls.n	8000ad6 <HAL_RCC_OscConfig+0x1aa>
 8000af8:	e78f      	b.n	8000a1a <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8000afa:	2201      	movs	r2, #1
 8000afc:	4393      	bics	r3, r2
 8000afe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b00:	f7ff fce0 	bl	80004c4 <HAL_GetTick>
 8000b04:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000b06:	2204      	movs	r2, #4
 8000b08:	6823      	ldr	r3, [r4, #0]
 8000b0a:	4213      	tst	r3, r2
 8000b0c:	d100      	bne.n	8000b10 <HAL_RCC_OscConfig+0x1e4>
 8000b0e:	e725      	b.n	800095c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b10:	f7ff fcd8 	bl	80004c4 <HAL_GetTick>
 8000b14:	1bc0      	subs	r0, r0, r7
 8000b16:	2802      	cmp	r0, #2
 8000b18:	d9f5      	bls.n	8000b06 <HAL_RCC_OscConfig+0x1da>
 8000b1a:	e77e      	b.n	8000a1a <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000b1c:	69eb      	ldr	r3, [r5, #28]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d020      	beq.n	8000b64 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 8000b22:	2380      	movs	r3, #128	; 0x80
 8000b24:	6822      	ldr	r2, [r4, #0]
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b2c:	f7ff fcca 	bl	80004c4 <HAL_GetTick>
 8000b30:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000b32:	2280      	movs	r2, #128	; 0x80
 8000b34:	6823      	ldr	r3, [r4, #0]
 8000b36:	0092      	lsls	r2, r2, #2
 8000b38:	4213      	tst	r3, r2
 8000b3a:	d00d      	beq.n	8000b58 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b3c:	6863      	ldr	r3, [r4, #4]
 8000b3e:	4a3f      	ldr	r2, [pc, #252]	; (8000c3c <HAL_RCC_OscConfig+0x310>)
 8000b40:	4013      	ands	r3, r2
 8000b42:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000b44:	4313      	orrs	r3, r2
 8000b46:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b48:	6862      	ldr	r2, [r4, #4]
 8000b4a:	6a2b      	ldr	r3, [r5, #32]
 8000b4c:	0212      	lsls	r2, r2, #8
 8000b4e:	061b      	lsls	r3, r3, #24
 8000b50:	0a12      	lsrs	r2, r2, #8
 8000b52:	4313      	orrs	r3, r2
 8000b54:	6063      	str	r3, [r4, #4]
 8000b56:	e72d      	b.n	80009b4 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b58:	f7ff fcb4 	bl	80004c4 <HAL_GetTick>
 8000b5c:	1bc0      	subs	r0, r0, r7
 8000b5e:	2802      	cmp	r0, #2
 8000b60:	d9e7      	bls.n	8000b32 <HAL_RCC_OscConfig+0x206>
 8000b62:	e75a      	b.n	8000a1a <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8000b64:	6823      	ldr	r3, [r4, #0]
 8000b66:	4a3b      	ldr	r2, [pc, #236]	; (8000c54 <HAL_RCC_OscConfig+0x328>)
 8000b68:	4013      	ands	r3, r2
 8000b6a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b6c:	f7ff fcaa 	bl	80004c4 <HAL_GetTick>
 8000b70:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000b72:	2280      	movs	r2, #128	; 0x80
 8000b74:	6823      	ldr	r3, [r4, #0]
 8000b76:	0092      	lsls	r2, r2, #2
 8000b78:	4213      	tst	r3, r2
 8000b7a:	d100      	bne.n	8000b7e <HAL_RCC_OscConfig+0x252>
 8000b7c:	e71a      	b.n	80009b4 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b7e:	f7ff fca1 	bl	80004c4 <HAL_GetTick>
 8000b82:	1bc0      	subs	r0, r0, r7
 8000b84:	2802      	cmp	r0, #2
 8000b86:	d9f4      	bls.n	8000b72 <HAL_RCC_OscConfig+0x246>
 8000b88:	e747      	b.n	8000a1a <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b8a:	696a      	ldr	r2, [r5, #20]
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	2a00      	cmp	r2, #0
 8000b90:	d010      	beq.n	8000bb4 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8000b92:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000b94:	4313      	orrs	r3, r2
 8000b96:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000b98:	f7ff fc94 	bl	80004c4 <HAL_GetTick>
 8000b9c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ba2:	4213      	tst	r3, r2
 8000ba4:	d000      	beq.n	8000ba8 <HAL_RCC_OscConfig+0x27c>
 8000ba6:	e709      	b.n	80009bc <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ba8:	f7ff fc8c 	bl	80004c4 <HAL_GetTick>
 8000bac:	1bc0      	subs	r0, r0, r7
 8000bae:	2802      	cmp	r0, #2
 8000bb0:	d9f5      	bls.n	8000b9e <HAL_RCC_OscConfig+0x272>
 8000bb2:	e732      	b.n	8000a1a <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 8000bb4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000bb6:	439a      	bics	r2, r3
 8000bb8:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000bba:	f7ff fc83 	bl	80004c4 <HAL_GetTick>
 8000bbe:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000bc4:	4213      	tst	r3, r2
 8000bc6:	d100      	bne.n	8000bca <HAL_RCC_OscConfig+0x29e>
 8000bc8:	e6f8      	b.n	80009bc <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bca:	f7ff fc7b 	bl	80004c4 <HAL_GetTick>
 8000bce:	1bc0      	subs	r0, r0, r7
 8000bd0:	2802      	cmp	r0, #2
 8000bd2:	d9f5      	bls.n	8000bc0 <HAL_RCC_OscConfig+0x294>
 8000bd4:	e721      	b.n	8000a1a <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bd6:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000bd8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000bdc:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8000bde:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000be0:	421a      	tst	r2, r3
 8000be2:	d104      	bne.n	8000bee <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000be4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000be6:	4313      	orrs	r3, r2
 8000be8:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000bea:	2301      	movs	r3, #1
 8000bec:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bee:	2280      	movs	r2, #128	; 0x80
 8000bf0:	4f19      	ldr	r7, [pc, #100]	; (8000c58 <HAL_RCC_OscConfig+0x32c>)
 8000bf2:	0052      	lsls	r2, r2, #1
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	4213      	tst	r3, r2
 8000bf8:	d008      	beq.n	8000c0c <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bfa:	2280      	movs	r2, #128	; 0x80
 8000bfc:	68ab      	ldr	r3, [r5, #8]
 8000bfe:	0052      	lsls	r2, r2, #1
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d12b      	bne.n	8000c5c <HAL_RCC_OscConfig+0x330>
 8000c04:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000c06:	4313      	orrs	r3, r2
 8000c08:	6523      	str	r3, [r4, #80]	; 0x50
 8000c0a:	e04c      	b.n	8000ca6 <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	0052      	lsls	r2, r2, #1
 8000c12:	4313      	orrs	r3, r2
 8000c14:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000c16:	f7ff fc55 	bl	80004c4 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8000c1e:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c20:	9303      	str	r3, [sp, #12]
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	9a03      	ldr	r2, [sp, #12]
 8000c26:	4213      	tst	r3, r2
 8000c28:	d1e7      	bne.n	8000bfa <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c2a:	f7ff fc4b 	bl	80004c4 <HAL_GetTick>
 8000c2e:	9b02      	ldr	r3, [sp, #8]
 8000c30:	1ac0      	subs	r0, r0, r3
 8000c32:	2864      	cmp	r0, #100	; 0x64
 8000c34:	d9f5      	bls.n	8000c22 <HAL_RCC_OscConfig+0x2f6>
 8000c36:	e6f0      	b.n	8000a1a <HAL_RCC_OscConfig+0xee>
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	ffff1fff 	.word	0xffff1fff
 8000c40:	08003395 	.word	0x08003395
 8000c44:	2000055c 	.word	0x2000055c
 8000c48:	fffeffff 	.word	0xfffeffff
 8000c4c:	fffbffff 	.word	0xfffbffff
 8000c50:	ffffe0ff 	.word	0xffffe0ff
 8000c54:	fffffeff 	.word	0xfffffeff
 8000c58:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d116      	bne.n	8000c8e <HAL_RCC_OscConfig+0x362>
 8000c60:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000c62:	4a6c      	ldr	r2, [pc, #432]	; (8000e14 <HAL_RCC_OscConfig+0x4e8>)
 8000c64:	4013      	ands	r3, r2
 8000c66:	6523      	str	r3, [r4, #80]	; 0x50
 8000c68:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000c6a:	4a6b      	ldr	r2, [pc, #428]	; (8000e18 <HAL_RCC_OscConfig+0x4ec>)
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000c70:	f7ff fc28 	bl	80004c4 <HAL_GetTick>
 8000c74:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000c76:	2280      	movs	r2, #128	; 0x80
 8000c78:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000c7a:	0092      	lsls	r2, r2, #2
 8000c7c:	4213      	tst	r3, r2
 8000c7e:	d02a      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x3aa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c80:	f7ff fc20 	bl	80004c4 <HAL_GetTick>
 8000c84:	4b65      	ldr	r3, [pc, #404]	; (8000e1c <HAL_RCC_OscConfig+0x4f0>)
 8000c86:	1bc0      	subs	r0, r0, r7
 8000c88:	4298      	cmp	r0, r3
 8000c8a:	d9f4      	bls.n	8000c76 <HAL_RCC_OscConfig+0x34a>
 8000c8c:	e6c5      	b.n	8000a1a <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c8e:	21a0      	movs	r1, #160	; 0xa0
 8000c90:	00c9      	lsls	r1, r1, #3
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d10b      	bne.n	8000cae <HAL_RCC_OscConfig+0x382>
 8000c96:	2380      	movs	r3, #128	; 0x80
 8000c98:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	430b      	orrs	r3, r1
 8000c9e:	6523      	str	r3, [r4, #80]	; 0x50
 8000ca0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ca2:	431a      	orrs	r2, r3
 8000ca4:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000ca6:	f7ff fc0d 	bl	80004c4 <HAL_GetTick>
 8000caa:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000cac:	e00e      	b.n	8000ccc <HAL_RCC_OscConfig+0x3a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000cb0:	4a58      	ldr	r2, [pc, #352]	; (8000e14 <HAL_RCC_OscConfig+0x4e8>)
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	6523      	str	r3, [r4, #80]	; 0x50
 8000cb6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000cb8:	4a57      	ldr	r2, [pc, #348]	; (8000e18 <HAL_RCC_OscConfig+0x4ec>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	e7a4      	b.n	8000c08 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cbe:	f7ff fc01 	bl	80004c4 <HAL_GetTick>
 8000cc2:	4b56      	ldr	r3, [pc, #344]	; (8000e1c <HAL_RCC_OscConfig+0x4f0>)
 8000cc4:	1bc0      	subs	r0, r0, r7
 8000cc6:	4298      	cmp	r0, r3
 8000cc8:	d900      	bls.n	8000ccc <HAL_RCC_OscConfig+0x3a0>
 8000cca:	e6a6      	b.n	8000a1a <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000ccc:	2280      	movs	r2, #128	; 0x80
 8000cce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000cd0:	0092      	lsls	r2, r2, #2
 8000cd2:	4213      	tst	r3, r2
 8000cd4:	d0f3      	beq.n	8000cbe <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 8000cd6:	9b01      	ldr	r3, [sp, #4]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d000      	beq.n	8000cde <HAL_RCC_OscConfig+0x3b2>
 8000cdc:	e672      	b.n	80009c4 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ce0:	4a4f      	ldr	r2, [pc, #316]	; (8000e20 <HAL_RCC_OscConfig+0x4f4>)
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	63a3      	str	r3, [r4, #56]	; 0x38
 8000ce6:	e66d      	b.n	80009c4 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000ce8:	69a9      	ldr	r1, [r5, #24]
 8000cea:	2301      	movs	r3, #1
 8000cec:	4a4d      	ldr	r2, [pc, #308]	; (8000e24 <HAL_RCC_OscConfig+0x4f8>)
 8000cee:	2900      	cmp	r1, #0
 8000cf0:	d018      	beq.n	8000d24 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_HSI48_ENABLE();
 8000cf2:	68a1      	ldr	r1, [r4, #8]
 8000cf4:	4319      	orrs	r1, r3
 8000cf6:	60a1      	str	r1, [r4, #8]
 8000cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cfa:	430b      	orrs	r3, r1
 8000cfc:	6363      	str	r3, [r4, #52]	; 0x34
 8000cfe:	2380      	movs	r3, #128	; 0x80
 8000d00:	6a11      	ldr	r1, [r2, #32]
 8000d02:	019b      	lsls	r3, r3, #6
 8000d04:	430b      	orrs	r3, r1
 8000d06:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000d08:	f7ff fbdc 	bl	80004c4 <HAL_GetTick>
 8000d0c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000d0e:	2202      	movs	r2, #2
 8000d10:	68a3      	ldr	r3, [r4, #8]
 8000d12:	4213      	tst	r3, r2
 8000d14:	d000      	beq.n	8000d18 <HAL_RCC_OscConfig+0x3ec>
 8000d16:	e659      	b.n	80009cc <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d18:	f7ff fbd4 	bl	80004c4 <HAL_GetTick>
 8000d1c:	1bc0      	subs	r0, r0, r7
 8000d1e:	2802      	cmp	r0, #2
 8000d20:	d9f5      	bls.n	8000d0e <HAL_RCC_OscConfig+0x3e2>
 8000d22:	e67a      	b.n	8000a1a <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 8000d24:	68a1      	ldr	r1, [r4, #8]
 8000d26:	4399      	bics	r1, r3
 8000d28:	60a1      	str	r1, [r4, #8]
 8000d2a:	6a13      	ldr	r3, [r2, #32]
 8000d2c:	493e      	ldr	r1, [pc, #248]	; (8000e28 <HAL_RCC_OscConfig+0x4fc>)
 8000d2e:	400b      	ands	r3, r1
 8000d30:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000d32:	f7ff fbc7 	bl	80004c4 <HAL_GetTick>
 8000d36:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000d38:	2202      	movs	r2, #2
 8000d3a:	68a3      	ldr	r3, [r4, #8]
 8000d3c:	4213      	tst	r3, r2
 8000d3e:	d100      	bne.n	8000d42 <HAL_RCC_OscConfig+0x416>
 8000d40:	e644      	b.n	80009cc <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d42:	f7ff fbbf 	bl	80004c4 <HAL_GetTick>
 8000d46:	1bc0      	subs	r0, r0, r7
 8000d48:	2802      	cmp	r0, #2
 8000d4a:	d9f5      	bls.n	8000d38 <HAL_RCC_OscConfig+0x40c>
 8000d4c:	e665      	b.n	8000a1a <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d4e:	2e0c      	cmp	r6, #12
 8000d50:	d043      	beq.n	8000dda <HAL_RCC_OscConfig+0x4ae>
 8000d52:	4a36      	ldr	r2, [pc, #216]	; (8000e2c <HAL_RCC_OscConfig+0x500>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d12e      	bne.n	8000db6 <HAL_RCC_OscConfig+0x48a>
        __HAL_RCC_PLL_DISABLE();
 8000d58:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000d5a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d60:	f7ff fbb0 	bl	80004c4 <HAL_GetTick>
 8000d64:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000d66:	04b6      	lsls	r6, r6, #18
 8000d68:	6823      	ldr	r3, [r4, #0]
 8000d6a:	4233      	tst	r3, r6
 8000d6c:	d11d      	bne.n	8000daa <HAL_RCC_OscConfig+0x47e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d6e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000d70:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000d72:	68e2      	ldr	r2, [r4, #12]
 8000d74:	430b      	orrs	r3, r1
 8000d76:	492e      	ldr	r1, [pc, #184]	; (8000e30 <HAL_RCC_OscConfig+0x504>)
 8000d78:	400a      	ands	r2, r1
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000d7e:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d80:	4313      	orrs	r3, r2
 8000d82:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	6822      	ldr	r2, [r4, #0]
 8000d88:	045b      	lsls	r3, r3, #17
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d8e:	f7ff fb99 	bl	80004c4 <HAL_GetTick>
 8000d92:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000d94:	04ad      	lsls	r5, r5, #18
 8000d96:	6823      	ldr	r3, [r4, #0]
 8000d98:	422b      	tst	r3, r5
 8000d9a:	d000      	beq.n	8000d9e <HAL_RCC_OscConfig+0x472>
 8000d9c:	e61a      	b.n	80009d4 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d9e:	f7ff fb91 	bl	80004c4 <HAL_GetTick>
 8000da2:	1b80      	subs	r0, r0, r6
 8000da4:	2802      	cmp	r0, #2
 8000da6:	d9f6      	bls.n	8000d96 <HAL_RCC_OscConfig+0x46a>
 8000da8:	e637      	b.n	8000a1a <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000daa:	f7ff fb8b 	bl	80004c4 <HAL_GetTick>
 8000dae:	1bc0      	subs	r0, r0, r7
 8000db0:	2802      	cmp	r0, #2
 8000db2:	d9d9      	bls.n	8000d68 <HAL_RCC_OscConfig+0x43c>
 8000db4:	e631      	b.n	8000a1a <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 8000db6:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000db8:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000dba:	4013      	ands	r3, r2
 8000dbc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000dbe:	f7ff fb81 	bl	80004c4 <HAL_GetTick>
 8000dc2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000dc4:	04ad      	lsls	r5, r5, #18
 8000dc6:	6823      	ldr	r3, [r4, #0]
 8000dc8:	422b      	tst	r3, r5
 8000dca:	d100      	bne.n	8000dce <HAL_RCC_OscConfig+0x4a2>
 8000dcc:	e602      	b.n	80009d4 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dce:	f7ff fb79 	bl	80004c4 <HAL_GetTick>
 8000dd2:	1b80      	subs	r0, r0, r6
 8000dd4:	2802      	cmp	r0, #2
 8000dd6:	d9f6      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x49a>
 8000dd8:	e61f      	b.n	8000a1a <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 8000dda:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d100      	bne.n	8000de2 <HAL_RCC_OscConfig+0x4b6>
 8000de0:	e5aa      	b.n	8000938 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000de2:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8000de4:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000de6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8000de8:	0252      	lsls	r2, r2, #9
 8000dea:	401a      	ands	r2, r3
        return HAL_ERROR;
 8000dec:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dee:	428a      	cmp	r2, r1
 8000df0:	d000      	beq.n	8000df4 <HAL_RCC_OscConfig+0x4c8>
 8000df2:	e5a1      	b.n	8000938 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000df4:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000df6:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000df8:	0392      	lsls	r2, r2, #14
 8000dfa:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dfc:	428a      	cmp	r2, r1
 8000dfe:	d000      	beq.n	8000e02 <HAL_RCC_OscConfig+0x4d6>
 8000e00:	e59a      	b.n	8000938 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000e02:	20c0      	movs	r0, #192	; 0xc0
 8000e04:	0400      	lsls	r0, r0, #16
 8000e06:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000e08:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000e0a:	1a18      	subs	r0, r3, r0
 8000e0c:	1e43      	subs	r3, r0, #1
 8000e0e:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8000e10:	b2c0      	uxtb	r0, r0
 8000e12:	e591      	b.n	8000938 <HAL_RCC_OscConfig+0xc>
 8000e14:	fffffeff 	.word	0xfffffeff
 8000e18:	fffffbff 	.word	0xfffffbff
 8000e1c:	00001388 	.word	0x00001388
 8000e20:	efffffff 	.word	0xefffffff
 8000e24:	40010000 	.word	0x40010000
 8000e28:	ffffdfff 	.word	0xffffdfff
 8000e2c:	feffffff 	.word	0xfeffffff
 8000e30:	ff02ffff 	.word	0xff02ffff

08000e34 <HAL_RCC_ClockConfig>:
{
 8000e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000e36:	1e06      	subs	r6, r0, #0
 8000e38:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8000e3a:	d101      	bne.n	8000e40 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8000e3c:	2001      	movs	r0, #1
}
 8000e3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e40:	2201      	movs	r2, #1
 8000e42:	4c51      	ldr	r4, [pc, #324]	; (8000f88 <HAL_RCC_ClockConfig+0x154>)
 8000e44:	9901      	ldr	r1, [sp, #4]
 8000e46:	6823      	ldr	r3, [r4, #0]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d327      	bcc.n	8000e9e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e4e:	6832      	ldr	r2, [r6, #0]
 8000e50:	0793      	lsls	r3, r2, #30
 8000e52:	d42f      	bmi.n	8000eb4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e54:	07d3      	lsls	r3, r2, #31
 8000e56:	d435      	bmi.n	8000ec4 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e58:	2301      	movs	r3, #1
 8000e5a:	6822      	ldr	r2, [r4, #0]
 8000e5c:	9901      	ldr	r1, [sp, #4]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	4291      	cmp	r1, r2
 8000e62:	d200      	bcs.n	8000e66 <HAL_RCC_ClockConfig+0x32>
 8000e64:	e081      	b.n	8000f6a <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e66:	6832      	ldr	r2, [r6, #0]
 8000e68:	4c48      	ldr	r4, [pc, #288]	; (8000f8c <HAL_RCC_ClockConfig+0x158>)
 8000e6a:	0753      	lsls	r3, r2, #29
 8000e6c:	d500      	bpl.n	8000e70 <HAL_RCC_ClockConfig+0x3c>
 8000e6e:	e084      	b.n	8000f7a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e70:	0713      	lsls	r3, r2, #28
 8000e72:	d506      	bpl.n	8000e82 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e74:	68e2      	ldr	r2, [r4, #12]
 8000e76:	6933      	ldr	r3, [r6, #16]
 8000e78:	4945      	ldr	r1, [pc, #276]	; (8000f90 <HAL_RCC_ClockConfig+0x15c>)
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	400a      	ands	r2, r1
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e82:	f7ff fd17 	bl	80008b4 <HAL_RCC_GetSysClockFreq>
 8000e86:	68e3      	ldr	r3, [r4, #12]
 8000e88:	4a42      	ldr	r2, [pc, #264]	; (8000f94 <HAL_RCC_ClockConfig+0x160>)
 8000e8a:	061b      	lsls	r3, r3, #24
 8000e8c:	0f1b      	lsrs	r3, r3, #28
 8000e8e:	5cd3      	ldrb	r3, [r2, r3]
 8000e90:	40d8      	lsrs	r0, r3
 8000e92:	4b41      	ldr	r3, [pc, #260]	; (8000f98 <HAL_RCC_ClockConfig+0x164>)
 8000e94:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff fae0 	bl	800045c <HAL_InitTick>
 8000e9c:	e7cf      	b.n	8000e3e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	9901      	ldr	r1, [sp, #4]
 8000ea2:	4393      	bics	r3, r2
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	9a01      	ldr	r2, [sp, #4]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d1c4      	bne.n	8000e3c <HAL_RCC_ClockConfig+0x8>
 8000eb2:	e7cc      	b.n	8000e4e <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000eb4:	20f0      	movs	r0, #240	; 0xf0
 8000eb6:	4935      	ldr	r1, [pc, #212]	; (8000f8c <HAL_RCC_ClockConfig+0x158>)
 8000eb8:	68cb      	ldr	r3, [r1, #12]
 8000eba:	4383      	bics	r3, r0
 8000ebc:	68b0      	ldr	r0, [r6, #8]
 8000ebe:	4303      	orrs	r3, r0
 8000ec0:	60cb      	str	r3, [r1, #12]
 8000ec2:	e7c7      	b.n	8000e54 <HAL_RCC_ClockConfig+0x20>
 8000ec4:	4d31      	ldr	r5, [pc, #196]	; (8000f8c <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ec6:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ec8:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eca:	2a02      	cmp	r2, #2
 8000ecc:	d119      	bne.n	8000f02 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ece:	039b      	lsls	r3, r3, #14
 8000ed0:	d5b4      	bpl.n	8000e3c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ed2:	2103      	movs	r1, #3
 8000ed4:	68eb      	ldr	r3, [r5, #12]
 8000ed6:	438b      	bics	r3, r1
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000edc:	f7ff faf2 	bl	80004c4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ee0:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000ee2:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d119      	bne.n	8000f1c <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ee8:	220c      	movs	r2, #12
 8000eea:	68eb      	ldr	r3, [r5, #12]
 8000eec:	4013      	ands	r3, r2
 8000eee:	2b08      	cmp	r3, #8
 8000ef0:	d0b2      	beq.n	8000e58 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ef2:	f7ff fae7 	bl	80004c4 <HAL_GetTick>
 8000ef6:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <HAL_RCC_ClockConfig+0x168>)
 8000ef8:	1bc0      	subs	r0, r0, r7
 8000efa:	4298      	cmp	r0, r3
 8000efc:	d9f4      	bls.n	8000ee8 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8000efe:	2003      	movs	r0, #3
 8000f00:	e79d      	b.n	8000e3e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f02:	2a03      	cmp	r2, #3
 8000f04:	d102      	bne.n	8000f0c <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000f06:	019b      	lsls	r3, r3, #6
 8000f08:	d4e3      	bmi.n	8000ed2 <HAL_RCC_ClockConfig+0x9e>
 8000f0a:	e797      	b.n	8000e3c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000f0c:	2a01      	cmp	r2, #1
 8000f0e:	d102      	bne.n	8000f16 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f10:	075b      	lsls	r3, r3, #29
 8000f12:	d4de      	bmi.n	8000ed2 <HAL_RCC_ClockConfig+0x9e>
 8000f14:	e792      	b.n	8000e3c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f16:	059b      	lsls	r3, r3, #22
 8000f18:	d4db      	bmi.n	8000ed2 <HAL_RCC_ClockConfig+0x9e>
 8000f1a:	e78f      	b.n	8000e3c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d10b      	bne.n	8000f38 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f20:	220c      	movs	r2, #12
 8000f22:	68eb      	ldr	r3, [r5, #12]
 8000f24:	4013      	ands	r3, r2
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d096      	beq.n	8000e58 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f2a:	f7ff facb 	bl	80004c4 <HAL_GetTick>
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <HAL_RCC_ClockConfig+0x168>)
 8000f30:	1bc0      	subs	r0, r0, r7
 8000f32:	4298      	cmp	r0, r3
 8000f34:	d9f4      	bls.n	8000f20 <HAL_RCC_ClockConfig+0xec>
 8000f36:	e7e2      	b.n	8000efe <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d010      	beq.n	8000f5e <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000f3c:	220c      	movs	r2, #12
 8000f3e:	68eb      	ldr	r3, [r5, #12]
 8000f40:	4213      	tst	r3, r2
 8000f42:	d089      	beq.n	8000e58 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f44:	f7ff fabe 	bl	80004c4 <HAL_GetTick>
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_RCC_ClockConfig+0x168>)
 8000f4a:	1bc0      	subs	r0, r0, r7
 8000f4c:	4298      	cmp	r0, r3
 8000f4e:	d9f5      	bls.n	8000f3c <HAL_RCC_ClockConfig+0x108>
 8000f50:	e7d5      	b.n	8000efe <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f52:	f7ff fab7 	bl	80004c4 <HAL_GetTick>
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_RCC_ClockConfig+0x168>)
 8000f58:	1bc0      	subs	r0, r0, r7
 8000f5a:	4298      	cmp	r0, r3
 8000f5c:	d8cf      	bhi.n	8000efe <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	68eb      	ldr	r3, [r5, #12]
 8000f62:	4013      	ands	r3, r2
 8000f64:	2b04      	cmp	r3, #4
 8000f66:	d1f4      	bne.n	8000f52 <HAL_RCC_ClockConfig+0x11e>
 8000f68:	e776      	b.n	8000e58 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f6a:	6822      	ldr	r2, [r4, #0]
 8000f6c:	439a      	bics	r2, r3
 8000f6e:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f70:	6822      	ldr	r2, [r4, #0]
 8000f72:	421a      	tst	r2, r3
 8000f74:	d000      	beq.n	8000f78 <HAL_RCC_ClockConfig+0x144>
 8000f76:	e761      	b.n	8000e3c <HAL_RCC_ClockConfig+0x8>
 8000f78:	e775      	b.n	8000e66 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f7a:	68e3      	ldr	r3, [r4, #12]
 8000f7c:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <HAL_RCC_ClockConfig+0x16c>)
 8000f7e:	400b      	ands	r3, r1
 8000f80:	68f1      	ldr	r1, [r6, #12]
 8000f82:	430b      	orrs	r3, r1
 8000f84:	60e3      	str	r3, [r4, #12]
 8000f86:	e773      	b.n	8000e70 <HAL_RCC_ClockConfig+0x3c>
 8000f88:	40022000 	.word	0x40022000
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	ffffc7ff 	.word	0xffffc7ff
 8000f94:	08003395 	.word	0x08003395
 8000f98:	2000055c 	.word	0x2000055c
 8000f9c:	00001388 	.word	0x00001388
 8000fa0:	fffff8ff 	.word	0xfffff8ff

08000fa4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <HAL_RCC_GetPCLK1Freq+0x18>)
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	055b      	lsls	r3, r3, #21
 8000fac:	0f5b      	lsrs	r3, r3, #29
 8000fae:	5cd3      	ldrb	r3, [r2, r3]
 8000fb0:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000fb2:	6810      	ldr	r0, [r2, #0]
 8000fb4:	40d8      	lsrs	r0, r3
}
 8000fb6:	4770      	bx	lr
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	080033a5 	.word	0x080033a5
 8000fc0:	2000055c 	.word	0x2000055c

08000fc4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000fc6:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <HAL_RCC_GetPCLK2Freq+0x18>)
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	049b      	lsls	r3, r3, #18
 8000fcc:	0f5b      	lsrs	r3, r3, #29
 8000fce:	5cd3      	ldrb	r3, [r2, r3]
 8000fd0:	4a03      	ldr	r2, [pc, #12]	; (8000fe0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000fd2:	6810      	ldr	r0, [r2, #0]
 8000fd4:	40d8      	lsrs	r0, r3
}
 8000fd6:	4770      	bx	lr
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	080033a5 	.word	0x080033a5
 8000fe0:	2000055c 	.word	0x2000055c

08000fe4 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8000fe4:	2382      	movs	r3, #130	; 0x82
{
 8000fe6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8000fe8:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8000fea:	011b      	lsls	r3, r3, #4
{
 8000fec:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8000fee:	421a      	tst	r2, r3
 8000ff0:	d047      	beq.n	8001082 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ff2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000ff4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ff6:	4c5f      	ldr	r4, [pc, #380]	; (8001174 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000ff8:	055b      	lsls	r3, r3, #21
 8000ffa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8000ffc:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ffe:	421a      	tst	r2, r3
 8001000:	d104      	bne.n	800100c <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001004:	4313      	orrs	r3, r2
 8001006:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001008:	2301      	movs	r3, #1
 800100a:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100c:	2780      	movs	r7, #128	; 0x80
 800100e:	4e5a      	ldr	r6, [pc, #360]	; (8001178 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001010:	007f      	lsls	r7, r7, #1
 8001012:	6833      	ldr	r3, [r6, #0]
 8001014:	423b      	tst	r3, r7
 8001016:	d06d      	beq.n	80010f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001018:	6869      	ldr	r1, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800101a:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800101c:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	0392      	lsls	r2, r2, #14
 8001022:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001024:	4010      	ands	r0, r2
 8001026:	4283      	cmp	r3, r0
 8001028:	d103      	bne.n	8001032 <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800102a:	68a8      	ldr	r0, [r5, #8]
 800102c:	4002      	ands	r2, r0
 800102e:	4293      	cmp	r3, r2
 8001030:	d009      	beq.n	8001046 <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001032:	23c0      	movs	r3, #192	; 0xc0
 8001034:	000a      	movs	r2, r1
 8001036:	029b      	lsls	r3, r3, #10
 8001038:	401a      	ands	r2, r3
 800103a:	429a      	cmp	r2, r3
 800103c:	d103      	bne.n	8001046 <HAL_RCCEx_PeriphCLKConfig+0x62>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800103e:	6823      	ldr	r3, [r4, #0]
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001040:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001042:	039b      	lsls	r3, r3, #14
 8001044:	d466      	bmi.n	8001114 <HAL_RCCEx_PeriphCLKConfig+0x130>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001046:	22c0      	movs	r2, #192	; 0xc0
 8001048:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800104a:	0292      	lsls	r2, r2, #10
 800104c:	4013      	ands	r3, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800104e:	d162      	bne.n	8001116 <HAL_RCCEx_PeriphCLKConfig+0x132>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001050:	6869      	ldr	r1, [r5, #4]
 8001052:	23c0      	movs	r3, #192	; 0xc0
 8001054:	000a      	movs	r2, r1
 8001056:	029b      	lsls	r3, r3, #10
 8001058:	401a      	ands	r2, r3
 800105a:	429a      	cmp	r2, r3
 800105c:	d107      	bne.n	800106e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800105e:	6823      	ldr	r3, [r4, #0]
 8001060:	4846      	ldr	r0, [pc, #280]	; (800117c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001062:	4003      	ands	r3, r0
 8001064:	20c0      	movs	r0, #192	; 0xc0
 8001066:	0380      	lsls	r0, r0, #14
 8001068:	4001      	ands	r1, r0
 800106a:	430b      	orrs	r3, r1
 800106c:	6023      	str	r3, [r4, #0]
 800106e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001070:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001072:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001074:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8001076:	2b01      	cmp	r3, #1
 8001078:	d103      	bne.n	8001082 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800107a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800107c:	4a40      	ldr	r2, [pc, #256]	; (8001180 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 800107e:	4013      	ands	r3, r2
 8001080:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001082:	682b      	ldr	r3, [r5, #0]
 8001084:	07da      	lsls	r2, r3, #31
 8001086:	d506      	bpl.n	8001096 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001088:	2003      	movs	r0, #3
 800108a:	493a      	ldr	r1, [pc, #232]	; (8001174 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800108c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800108e:	4382      	bics	r2, r0
 8001090:	68e8      	ldr	r0, [r5, #12]
 8001092:	4302      	orrs	r2, r0
 8001094:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001096:	079a      	lsls	r2, r3, #30
 8001098:	d506      	bpl.n	80010a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800109a:	200c      	movs	r0, #12
 800109c:	4935      	ldr	r1, [pc, #212]	; (8001174 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800109e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80010a0:	4382      	bics	r2, r0
 80010a2:	6928      	ldr	r0, [r5, #16]
 80010a4:	4302      	orrs	r2, r0
 80010a6:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80010a8:	075a      	lsls	r2, r3, #29
 80010aa:	d506      	bpl.n	80010ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80010ac:	4931      	ldr	r1, [pc, #196]	; (8001174 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80010ae:	4835      	ldr	r0, [pc, #212]	; (8001184 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80010b0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80010b2:	4002      	ands	r2, r0
 80010b4:	6968      	ldr	r0, [r5, #20]
 80010b6:	4302      	orrs	r2, r0
 80010b8:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80010ba:	071a      	lsls	r2, r3, #28
 80010bc:	d506      	bpl.n	80010cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80010be:	492d      	ldr	r1, [pc, #180]	; (8001174 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80010c0:	4831      	ldr	r0, [pc, #196]	; (8001188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80010c2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80010c4:	4002      	ands	r2, r0
 80010c6:	69a8      	ldr	r0, [r5, #24]
 80010c8:	4302      	orrs	r2, r0
 80010ca:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80010cc:	065a      	lsls	r2, r3, #25
 80010ce:	d506      	bpl.n	80010de <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80010d0:	4928      	ldr	r1, [pc, #160]	; (8001174 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80010d2:	482e      	ldr	r0, [pc, #184]	; (800118c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80010d4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80010d6:	4002      	ands	r2, r0
 80010d8:	6a28      	ldr	r0, [r5, #32]
 80010da:	4302      	orrs	r2, r0
 80010dc:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80010de:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80010e0:	061b      	lsls	r3, r3, #24
 80010e2:	d517      	bpl.n	8001114 <HAL_RCCEx_PeriphCLKConfig+0x130>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80010e4:	4a23      	ldr	r2, [pc, #140]	; (8001174 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80010e6:	492a      	ldr	r1, [pc, #168]	; (8001190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80010e8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80010ea:	400b      	ands	r3, r1
 80010ec:	69e9      	ldr	r1, [r5, #28]
 80010ee:	430b      	orrs	r3, r1
 80010f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f2:	e00f      	b.n	8001114 <HAL_RCCEx_PeriphCLKConfig+0x130>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010f4:	6833      	ldr	r3, [r6, #0]
 80010f6:	433b      	orrs	r3, r7
 80010f8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80010fa:	f7ff f9e3 	bl	80004c4 <HAL_GetTick>
 80010fe:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001100:	6833      	ldr	r3, [r6, #0]
 8001102:	423b      	tst	r3, r7
 8001104:	d188      	bne.n	8001018 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001106:	f7ff f9dd 	bl	80004c4 <HAL_GetTick>
 800110a:	9b01      	ldr	r3, [sp, #4]
 800110c:	1ac0      	subs	r0, r0, r3
 800110e:	2864      	cmp	r0, #100	; 0x64
 8001110:	d9f6      	bls.n	8001100 <HAL_RCCEx_PeriphCLKConfig+0x11c>
          return HAL_TIMEOUT;
 8001112:	2003      	movs	r0, #3
}
 8001114:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001116:	4011      	ands	r1, r2
 8001118:	428b      	cmp	r3, r1
 800111a:	d002      	beq.n	8001122 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800111c:	6829      	ldr	r1, [r5, #0]
 800111e:	0689      	lsls	r1, r1, #26
 8001120:	d408      	bmi.n	8001134 <HAL_RCCEx_PeriphCLKConfig+0x150>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001122:	68a9      	ldr	r1, [r5, #8]
 8001124:	400a      	ands	r2, r1
 8001126:	4293      	cmp	r3, r2
 8001128:	d100      	bne.n	800112c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800112a:	e791      	b.n	8001050 <HAL_RCCEx_PeriphCLKConfig+0x6c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800112c:	682b      	ldr	r3, [r5, #0]
 800112e:	051b      	lsls	r3, r3, #20
 8001130:	d400      	bmi.n	8001134 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8001132:	e78d      	b.n	8001050 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001134:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001136:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8001138:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800113a:	0312      	lsls	r2, r2, #12
 800113c:	4302      	orrs	r2, r0
 800113e:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001140:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001144:	4814      	ldr	r0, [pc, #80]	; (8001198 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001146:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001148:	4002      	ands	r2, r0
 800114a:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800114c:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800114e:	05cb      	lsls	r3, r1, #23
 8001150:	d400      	bmi.n	8001154 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8001152:	e77d      	b.n	8001050 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        tickstart = HAL_GetTick();
 8001154:	f7ff f9b6 	bl	80004c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001158:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800115a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800115c:	00bf      	lsls	r7, r7, #2
 800115e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001160:	423b      	tst	r3, r7
 8001162:	d000      	beq.n	8001166 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001164:	e774      	b.n	8001050 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001166:	f7ff f9ad 	bl	80004c4 <HAL_GetTick>
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800116c:	1b80      	subs	r0, r0, r6
 800116e:	4298      	cmp	r0, r3
 8001170:	d9f5      	bls.n	800115e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8001172:	e7ce      	b.n	8001112 <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8001174:	40021000 	.word	0x40021000
 8001178:	40007000 	.word	0x40007000
 800117c:	ffcfffff 	.word	0xffcfffff
 8001180:	efffffff 	.word	0xefffffff
 8001184:	fffff3ff 	.word	0xfffff3ff
 8001188:	ffffcfff 	.word	0xffffcfff
 800118c:	fbffffff 	.word	0xfbffffff
 8001190:	fff3ffff 	.word	0xfff3ffff
 8001194:	fffcffff 	.word	0xfffcffff
 8001198:	fff7ffff 	.word	0xfff7ffff
 800119c:	00001388 	.word	0x00001388

080011a0 <SPI_WaitFlagStateUntilTimeout.constprop.8>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80011a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a2:	0004      	movs	r4, r0
 80011a4:	000d      	movs	r5, r1
 80011a6:	0016      	movs	r6, r2
 80011a8:	001f      	movs	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80011aa:	6822      	ldr	r2, [r4, #0]
 80011ac:	6893      	ldr	r3, [r2, #8]
 80011ae:	402b      	ands	r3, r5
 80011b0:	429d      	cmp	r5, r3
 80011b2:	d001      	beq.n	80011b8 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80011b4:	2000      	movs	r0, #0
 80011b6:	e031      	b.n	800121c <SPI_WaitFlagStateUntilTimeout.constprop.8+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 80011b8:	1c73      	adds	r3, r6, #1
 80011ba:	d0f7      	beq.n	80011ac <SPI_WaitFlagStateUntilTimeout.constprop.8+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80011bc:	f7ff f982 	bl	80004c4 <HAL_GetTick>
 80011c0:	1bc0      	subs	r0, r0, r7
 80011c2:	4286      	cmp	r6, r0
 80011c4:	d8f1      	bhi.n	80011aa <SPI_WaitFlagStateUntilTimeout.constprop.8+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80011c6:	21e0      	movs	r1, #224	; 0xe0
 80011c8:	6823      	ldr	r3, [r4, #0]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	438a      	bics	r2, r1
 80011ce:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80011d0:	2282      	movs	r2, #130	; 0x82
 80011d2:	6861      	ldr	r1, [r4, #4]
 80011d4:	0052      	lsls	r2, r2, #1
 80011d6:	4291      	cmp	r1, r2
 80011d8:	d10c      	bne.n	80011f4 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x54>
 80011da:	2180      	movs	r1, #128	; 0x80
 80011dc:	68a2      	ldr	r2, [r4, #8]
 80011de:	0209      	lsls	r1, r1, #8
 80011e0:	428a      	cmp	r2, r1
 80011e2:	d003      	beq.n	80011ec <SPI_WaitFlagStateUntilTimeout.constprop.8+0x4c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80011e4:	2180      	movs	r1, #128	; 0x80
 80011e6:	00c9      	lsls	r1, r1, #3
 80011e8:	428a      	cmp	r2, r1
 80011ea:	d103      	bne.n	80011f4 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x54>
          __HAL_SPI_DISABLE(hspi);
 80011ec:	2140      	movs	r1, #64	; 0x40
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	438a      	bics	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80011f4:	2180      	movs	r1, #128	; 0x80
 80011f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011f8:	0189      	lsls	r1, r1, #6
 80011fa:	428a      	cmp	r2, r1
 80011fc:	d106      	bne.n	800120c <SPI_WaitFlagStateUntilTimeout.constprop.8+0x6c>
          SPI_RESET_CRC(hspi);
 80011fe:	6819      	ldr	r1, [r3, #0]
 8001200:	4807      	ldr	r0, [pc, #28]	; (8001220 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x80>)
 8001202:	4001      	ands	r1, r0
 8001204:	6019      	str	r1, [r3, #0]
 8001206:	6819      	ldr	r1, [r3, #0]
 8001208:	430a      	orrs	r2, r1
 800120a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800120c:	0023      	movs	r3, r4
 800120e:	2201      	movs	r2, #1
 8001210:	3351      	adds	r3, #81	; 0x51
 8001212:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8001214:	2300      	movs	r3, #0
 8001216:	2003      	movs	r0, #3
 8001218:	3450      	adds	r4, #80	; 0x50
 800121a:	7023      	strb	r3, [r4, #0]
}
 800121c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	ffffdfff 	.word	0xffffdfff

08001224 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001226:	0013      	movs	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001228:	2282      	movs	r2, #130	; 0x82
{
 800122a:	0004      	movs	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800122c:	6840      	ldr	r0, [r0, #4]
 800122e:	0052      	lsls	r2, r2, #1
 8001230:	4290      	cmp	r0, r2
 8001232:	d11e      	bne.n	8001272 <SPI_EndRxTransaction+0x4e>
 8001234:	2080      	movs	r0, #128	; 0x80
 8001236:	2580      	movs	r5, #128	; 0x80
 8001238:	68a2      	ldr	r2, [r4, #8]
 800123a:	0200      	lsls	r0, r0, #8
 800123c:	00ed      	lsls	r5, r5, #3
 800123e:	4282      	cmp	r2, r0
 8001240:	d001      	beq.n	8001246 <SPI_EndRxTransaction+0x22>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001242:	42aa      	cmp	r2, r5
 8001244:	d106      	bne.n	8001254 <SPI_EndRxTransaction+0x30>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001246:	2740      	movs	r7, #64	; 0x40
 8001248:	6826      	ldr	r6, [r4, #0]
 800124a:	6830      	ldr	r0, [r6, #0]
 800124c:	43b8      	bics	r0, r7
 800124e:	6030      	str	r0, [r6, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8001250:	42aa      	cmp	r2, r5
 8001252:	d00e      	beq.n	8001272 <SPI_EndRxTransaction+0x4e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001254:	000a      	movs	r2, r1
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	0020      	movs	r0, r4
 800125a:	f7ff ffa1 	bl	80011a0 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 800125e:	2800      	cmp	r0, #0
 8001260:	d101      	bne.n	8001266 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8001262:	2000      	movs	r0, #0
}
 8001264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001266:	2320      	movs	r3, #32
 8001268:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800126a:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800126c:	4313      	orrs	r3, r2
 800126e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001270:	e7f8      	b.n	8001264 <SPI_EndRxTransaction+0x40>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001272:	000a      	movs	r2, r1
 8001274:	2101      	movs	r1, #1
 8001276:	e7ef      	b.n	8001258 <SPI_EndRxTransaction+0x34>

08001278 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001278:	0013      	movs	r3, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800127a:	2282      	movs	r2, #130	; 0x82
{
 800127c:	b510      	push	{r4, lr}
 800127e:	0004      	movs	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001280:	6840      	ldr	r0, [r0, #4]
 8001282:	0052      	lsls	r2, r2, #1
 8001284:	4290      	cmp	r0, r2
 8001286:	d108      	bne.n	800129a <SPI_EndRxTxTransaction+0x22>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001288:	000a      	movs	r2, r1
 800128a:	2180      	movs	r1, #128	; 0x80
 800128c:	0020      	movs	r0, r4
 800128e:	f7ff ff87 	bl	80011a0 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 8001292:	2800      	cmp	r0, #0
 8001294:	d109      	bne.n	80012aa <SPI_EndRxTxTransaction+0x32>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001296:	2000      	movs	r0, #0
}
 8001298:	bd10      	pop	{r4, pc}
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800129a:	0022      	movs	r2, r4
 800129c:	3251      	adds	r2, #81	; 0x51
 800129e:	7812      	ldrb	r2, [r2, #0]
 80012a0:	2a05      	cmp	r2, #5
 80012a2:	d1f8      	bne.n	8001296 <SPI_EndRxTxTransaction+0x1e>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80012a4:	000a      	movs	r2, r1
 80012a6:	2101      	movs	r1, #1
 80012a8:	e7f0      	b.n	800128c <SPI_EndRxTxTransaction+0x14>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80012aa:	2320      	movs	r3, #32
 80012ac:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80012ae:	2003      	movs	r0, #3
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80012b0:	4313      	orrs	r3, r2
 80012b2:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80012b4:	e7f0      	b.n	8001298 <SPI_EndRxTxTransaction+0x20>
	...

080012b8 <HAL_SPI_Init>:
{
 80012b8:	b570      	push	{r4, r5, r6, lr}
 80012ba:	0004      	movs	r4, r0
    return HAL_ERROR;
 80012bc:	2001      	movs	r0, #1
  if (hspi == NULL)
 80012be:	2c00      	cmp	r4, #0
 80012c0:	d037      	beq.n	8001332 <HAL_SPI_Init+0x7a>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c2:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80012c4:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80012c8:	3551      	adds	r5, #81	; 0x51
 80012ca:	782b      	ldrb	r3, [r5, #0]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d105      	bne.n	80012de <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 80012d2:	0022      	movs	r2, r4
 80012d4:	3250      	adds	r2, #80	; 0x50
 80012d6:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 80012d8:	0020      	movs	r0, r4
 80012da:	f001 feb9 	bl	8003050 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80012de:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80012e0:	2240      	movs	r2, #64	; 0x40
 80012e2:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80012e4:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80012e6:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80012e8:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80012ea:	4393      	bics	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80012ee:	6863      	ldr	r3, [r4, #4]
 80012f0:	69a2      	ldr	r2, [r4, #24]
 80012f2:	4303      	orrs	r3, r0
 80012f4:	68e0      	ldr	r0, [r4, #12]
 80012f6:	4303      	orrs	r3, r0
 80012f8:	6920      	ldr	r0, [r4, #16]
 80012fa:	4303      	orrs	r3, r0
 80012fc:	6960      	ldr	r0, [r4, #20]
 80012fe:	4303      	orrs	r3, r0
 8001300:	69e0      	ldr	r0, [r4, #28]
 8001302:	4303      	orrs	r3, r0
 8001304:	6a20      	ldr	r0, [r4, #32]
 8001306:	4303      	orrs	r3, r0
 8001308:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800130a:	4303      	orrs	r3, r0
 800130c:	2080      	movs	r0, #128	; 0x80
 800130e:	0080      	lsls	r0, r0, #2
 8001310:	4010      	ands	r0, r2
 8001312:	4303      	orrs	r3, r0
 8001314:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001316:	2304      	movs	r3, #4
 8001318:	0c12      	lsrs	r2, r2, #16
 800131a:	401a      	ands	r2, r3
 800131c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800131e:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001320:	431a      	orrs	r2, r3
 8001322:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001324:	69cb      	ldr	r3, [r1, #28]
 8001326:	4a03      	ldr	r2, [pc, #12]	; (8001334 <HAL_SPI_Init+0x7c>)
 8001328:	4013      	ands	r3, r2
 800132a:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800132c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800132e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001330:	702b      	strb	r3, [r5, #0]
}
 8001332:	bd70      	pop	{r4, r5, r6, pc}
 8001334:	fffff7ff 	.word	0xfffff7ff

08001338 <HAL_SPI_Transmit>:
{
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	b087      	sub	sp, #28
 800133c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hspi);
 800133e:	0003      	movs	r3, r0
 8001340:	3350      	adds	r3, #80	; 0x50
 8001342:	9303      	str	r3, [sp, #12]
 8001344:	781b      	ldrb	r3, [r3, #0]
{
 8001346:	0004      	movs	r4, r0
 8001348:	000e      	movs	r6, r1
 800134a:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 800134c:	2502      	movs	r5, #2
 800134e:	2b01      	cmp	r3, #1
 8001350:	d079      	beq.n	8001446 <HAL_SPI_Transmit+0x10e>
 8001352:	2301      	movs	r3, #1
 8001354:	9a03      	ldr	r2, [sp, #12]
 8001356:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8001358:	f7ff f8b4 	bl	80004c4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800135c:	0022      	movs	r2, r4
  tickstart = HAL_GetTick();
 800135e:	9002      	str	r0, [sp, #8]
  if (hspi->State != HAL_SPI_STATE_READY)
 8001360:	3251      	adds	r2, #81	; 0x51
 8001362:	7813      	ldrb	r3, [r2, #0]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b01      	cmp	r3, #1
 8001368:	d167      	bne.n	800143a <HAL_SPI_Transmit+0x102>
    errorcode = HAL_ERROR;
 800136a:	001d      	movs	r5, r3
  if ((pData == NULL) || (Size == 0U))
 800136c:	2e00      	cmp	r6, #0
 800136e:	d064      	beq.n	800143a <HAL_SPI_Transmit+0x102>
 8001370:	2f00      	cmp	r7, #0
 8001372:	d062      	beq.n	800143a <HAL_SPI_Transmit+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001374:	3302      	adds	r3, #2
 8001376:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001378:	2300      	movs	r3, #0
 800137a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800137c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800137e:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001380:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001382:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001384:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001386:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800138c:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800138e:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	429a      	cmp	r2, r3
 8001394:	d105      	bne.n	80013a2 <HAL_SPI_Transmit+0x6a>
    SPI_1LINE_TX(hspi);
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	6822      	ldr	r2, [r4, #0]
 800139a:	01db      	lsls	r3, r3, #7
 800139c:	6811      	ldr	r1, [r2, #0]
 800139e:	430b      	orrs	r3, r1
 80013a0:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80013a2:	2240      	movs	r2, #64	; 0x40
 80013a4:	6823      	ldr	r3, [r4, #0]
 80013a6:	6819      	ldr	r1, [r3, #0]
 80013a8:	4211      	tst	r1, r2
 80013aa:	d102      	bne.n	80013b2 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 80013ac:	6819      	ldr	r1, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80013b2:	2180      	movs	r1, #128	; 0x80
 80013b4:	68e0      	ldr	r0, [r4, #12]
 80013b6:	0109      	lsls	r1, r1, #4
 80013b8:	6862      	ldr	r2, [r4, #4]
 80013ba:	4288      	cmp	r0, r1
 80013bc:	d146      	bne.n	800144c <HAL_SPI_Transmit+0x114>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80013be:	2a00      	cmp	r2, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_SPI_Transmit+0x8e>
 80013c2:	2f01      	cmp	r7, #1
 80013c4:	d107      	bne.n	80013d6 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80013c6:	8832      	ldrh	r2, [r6, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80013c8:	3602      	adds	r6, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80013ca:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80013cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80013ce:	6326      	str	r6, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80013d0:	3b01      	subs	r3, #1
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	86e3      	strh	r3, [r4, #54]	; 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80013d6:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 80013d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d115      	bne.n	800140a <HAL_SPI_Transmit+0xd2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80013de:	9a02      	ldr	r2, [sp, #8]
 80013e0:	9901      	ldr	r1, [sp, #4]
 80013e2:	0020      	movs	r0, r4
 80013e4:	f7ff ff48 	bl	8001278 <SPI_EndRxTxTransaction>
 80013e8:	2800      	cmp	r0, #0
 80013ea:	d159      	bne.n	80014a0 <HAL_SPI_Transmit+0x168>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80013ec:	68a3      	ldr	r3, [r4, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d106      	bne.n	8001400 <HAL_SPI_Transmit+0xc8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80013f2:	9305      	str	r3, [sp, #20]
 80013f4:	6823      	ldr	r3, [r4, #0]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	9205      	str	r2, [sp, #20]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	9305      	str	r3, [sp, #20]
 80013fe:	9b05      	ldr	r3, [sp, #20]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001400:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8001402:	1e6b      	subs	r3, r5, #1
 8001404:	419d      	sbcs	r5, r3
    errorcode = HAL_BUSY;
 8001406:	b2ed      	uxtb	r5, r5
 8001408:	e017      	b.n	800143a <HAL_SPI_Transmit+0x102>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800140a:	6822      	ldr	r2, [r4, #0]
 800140c:	6893      	ldr	r3, [r2, #8]
 800140e:	422b      	tst	r3, r5
 8001410:	d009      	beq.n	8001426 <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001412:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001414:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001416:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001418:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800141a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800141c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800141e:	3b01      	subs	r3, #1
 8001420:	b29b      	uxth	r3, r3
 8001422:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001424:	e7d8      	b.n	80013d8 <HAL_SPI_Transmit+0xa0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001426:	f7ff f84d 	bl	80004c4 <HAL_GetTick>
 800142a:	9b02      	ldr	r3, [sp, #8]
 800142c:	1ac0      	subs	r0, r0, r3
 800142e:	9b01      	ldr	r3, [sp, #4]
 8001430:	4298      	cmp	r0, r3
 8001432:	d3d1      	bcc.n	80013d8 <HAL_SPI_Transmit+0xa0>
 8001434:	3301      	adds	r3, #1
 8001436:	d0cf      	beq.n	80013d8 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 8001438:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 800143a:	2301      	movs	r3, #1
 800143c:	3451      	adds	r4, #81	; 0x51
 800143e:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 8001440:	2300      	movs	r3, #0
 8001442:	9a03      	ldr	r2, [sp, #12]
 8001444:	7013      	strb	r3, [r2, #0]
}
 8001446:	0028      	movs	r0, r5
 8001448:	b007      	add	sp, #28
 800144a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800144c:	2a00      	cmp	r2, #0
 800144e:	d001      	beq.n	8001454 <HAL_SPI_Transmit+0x11c>
 8001450:	2f01      	cmp	r7, #1
 8001452:	d108      	bne.n	8001466 <HAL_SPI_Transmit+0x12e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001454:	7832      	ldrb	r2, [r6, #0]
 8001456:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001458:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800145a:	3301      	adds	r3, #1
 800145c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800145e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001460:	3b01      	subs	r3, #1
 8001462:	b29b      	uxth	r3, r3
 8001464:	86e3      	strh	r3, [r4, #54]	; 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001466:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8001468:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0b7      	beq.n	80013de <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	422a      	tst	r2, r5
 8001474:	d00a      	beq.n	800148c <HAL_SPI_Transmit+0x154>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001476:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001478:	7812      	ldrb	r2, [r2, #0]
 800147a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800147c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800147e:	3301      	adds	r3, #1
 8001480:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001482:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001484:	3b01      	subs	r3, #1
 8001486:	b29b      	uxth	r3, r3
 8001488:	86e3      	strh	r3, [r4, #54]	; 0x36
 800148a:	e7ed      	b.n	8001468 <HAL_SPI_Transmit+0x130>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800148c:	f7ff f81a 	bl	80004c4 <HAL_GetTick>
 8001490:	9b02      	ldr	r3, [sp, #8]
 8001492:	1ac0      	subs	r0, r0, r3
 8001494:	9b01      	ldr	r3, [sp, #4]
 8001496:	4283      	cmp	r3, r0
 8001498:	d8e6      	bhi.n	8001468 <HAL_SPI_Transmit+0x130>
 800149a:	3301      	adds	r3, #1
 800149c:	d0e4      	beq.n	8001468 <HAL_SPI_Transmit+0x130>
 800149e:	e7cb      	b.n	8001438 <HAL_SPI_Transmit+0x100>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80014a0:	2320      	movs	r3, #32
 80014a2:	6563      	str	r3, [r4, #84]	; 0x54
 80014a4:	e7a2      	b.n	80013ec <HAL_SPI_Transmit+0xb4>

080014a6 <HAL_SPI_TransmitReceive>:
{
 80014a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a8:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 80014aa:	0003      	movs	r3, r0
{
 80014ac:	b085      	sub	sp, #20
 80014ae:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 80014b0:	3350      	adds	r3, #80	; 0x50
 80014b2:	781a      	ldrb	r2, [r3, #0]
{
 80014b4:	0004      	movs	r4, r0
 80014b6:	000e      	movs	r6, r1
  __HAL_LOCK(hspi);
 80014b8:	2502      	movs	r5, #2
 80014ba:	2a01      	cmp	r2, #1
 80014bc:	d100      	bne.n	80014c0 <HAL_SPI_TransmitReceive+0x1a>
 80014be:	e09b      	b.n	80015f8 <HAL_SPI_TransmitReceive+0x152>
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80014c4:	f7fe fffe 	bl	80004c4 <HAL_GetTick>
  tmp_state           = hspi->State;
 80014c8:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 80014ca:	9000      	str	r0, [sp, #0]
  tmp_state           = hspi->State;
 80014cc:	3351      	adds	r3, #81	; 0x51
 80014ce:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80014d0:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80014d2:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d00b      	beq.n	80014f0 <HAL_SPI_TransmitReceive+0x4a>
 80014d8:	2282      	movs	r2, #130	; 0x82
 80014da:	0052      	lsls	r2, r2, #1
 80014dc:	4291      	cmp	r1, r2
 80014de:	d000      	beq.n	80014e2 <HAL_SPI_TransmitReceive+0x3c>
 80014e0:	e083      	b.n	80015ea <HAL_SPI_TransmitReceive+0x144>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80014e2:	68a2      	ldr	r2, [r4, #8]
 80014e4:	2a00      	cmp	r2, #0
 80014e6:	d000      	beq.n	80014ea <HAL_SPI_TransmitReceive+0x44>
 80014e8:	e07f      	b.n	80015ea <HAL_SPI_TransmitReceive+0x144>
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	d000      	beq.n	80014f0 <HAL_SPI_TransmitReceive+0x4a>
 80014ee:	e07c      	b.n	80015ea <HAL_SPI_TransmitReceive+0x144>
    errorcode = HAL_ERROR;
 80014f0:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80014f2:	2e00      	cmp	r6, #0
 80014f4:	d100      	bne.n	80014f8 <HAL_SPI_TransmitReceive+0x52>
 80014f6:	e078      	b.n	80015ea <HAL_SPI_TransmitReceive+0x144>
 80014f8:	9b01      	ldr	r3, [sp, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d075      	beq.n	80015ea <HAL_SPI_TransmitReceive+0x144>
 80014fe:	2f00      	cmp	r7, #0
 8001500:	d073      	beq.n	80015ea <HAL_SPI_TransmitReceive+0x144>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001502:	0023      	movs	r3, r4
 8001504:	3351      	adds	r3, #81	; 0x51
 8001506:	781a      	ldrb	r2, [r3, #0]
 8001508:	2a04      	cmp	r2, #4
 800150a:	d001      	beq.n	8001510 <HAL_SPI_TransmitReceive+0x6a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800150c:	2205      	movs	r2, #5
 800150e:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001510:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001512:	9a01      	ldr	r2, [sp, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001514:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001516:	63a2      	str	r2, [r4, #56]	; 0x38
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001518:	2240      	movs	r2, #64	; 0x40
  hspi->RxISR       = NULL;
 800151a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800151c:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800151e:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001520:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001522:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001524:	6818      	ldr	r0, [r3, #0]
  hspi->RxXferSize  = Size;
 8001526:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001528:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800152a:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800152c:	4210      	tst	r0, r2
 800152e:	d102      	bne.n	8001536 <HAL_SPI_TransmitReceive+0x90>
    __HAL_SPI_ENABLE(hspi);
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	4302      	orrs	r2, r0
 8001534:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001536:	2280      	movs	r2, #128	; 0x80
 8001538:	68e0      	ldr	r0, [r4, #12]
 800153a:	0112      	lsls	r2, r2, #4
 800153c:	4290      	cmp	r0, r2
 800153e:	d15e      	bne.n	80015fe <HAL_SPI_TransmitReceive+0x158>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001540:	2900      	cmp	r1, #0
 8001542:	d001      	beq.n	8001548 <HAL_SPI_TransmitReceive+0xa2>
 8001544:	2f01      	cmp	r7, #1
 8001546:	d107      	bne.n	8001558 <HAL_SPI_TransmitReceive+0xb2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001548:	8832      	ldrh	r2, [r6, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800154a:	3602      	adds	r6, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800154c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800154e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001550:	6326      	str	r6, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001552:	3b01      	subs	r3, #1
 8001554:	b29b      	uxth	r3, r3
 8001556:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001558:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800155a:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800155c:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800155e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001560:	2b00      	cmp	r3, #0
 8001562:	d115      	bne.n	8001590 <HAL_SPI_TransmitReceive+0xea>
 8001564:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001566:	2b00      	cmp	r3, #0
 8001568:	d112      	bne.n	8001590 <HAL_SPI_TransmitReceive+0xea>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800156a:	9a00      	ldr	r2, [sp, #0]
 800156c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800156e:	0020      	movs	r0, r4
 8001570:	f7ff fe82 	bl	8001278 <SPI_EndRxTxTransaction>
 8001574:	1e05      	subs	r5, r0, #0
 8001576:	d000      	beq.n	800157a <HAL_SPI_TransmitReceive+0xd4>
 8001578:	e087      	b.n	800168a <HAL_SPI_TransmitReceive+0x1e4>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800157a:	68a3      	ldr	r3, [r4, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d134      	bne.n	80015ea <HAL_SPI_TransmitReceive+0x144>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001580:	6823      	ldr	r3, [r4, #0]
 8001582:	9003      	str	r0, [sp, #12]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	9203      	str	r2, [sp, #12]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	9303      	str	r3, [sp, #12]
 800158c:	9b03      	ldr	r3, [sp, #12]
 800158e:	e02c      	b.n	80015ea <HAL_SPI_TransmitReceive+0x144>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001590:	6822      	ldr	r2, [r4, #0]
 8001592:	6893      	ldr	r3, [r2, #8]
 8001594:	423b      	tst	r3, r7
 8001596:	d00e      	beq.n	80015b6 <HAL_SPI_TransmitReceive+0x110>
 8001598:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00b      	beq.n	80015b6 <HAL_SPI_TransmitReceive+0x110>
 800159e:	2d01      	cmp	r5, #1
 80015a0:	d109      	bne.n	80015b6 <HAL_SPI_TransmitReceive+0x110>
        txallowed = 0U;
 80015a2:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015a6:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80015a8:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015aa:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80015ac:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80015ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80015b0:	3b01      	subs	r3, #1
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80015b6:	6893      	ldr	r3, [r2, #8]
 80015b8:	4233      	tst	r3, r6
 80015ba:	d00c      	beq.n	80015d6 <HAL_SPI_TransmitReceive+0x130>
 80015bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d009      	beq.n	80015d6 <HAL_SPI_TransmitReceive+0x130>
        txallowed = 1U;
 80015c2:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80015c4:	68d2      	ldr	r2, [r2, #12]
 80015c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80015ca:	3302      	adds	r3, #2
 80015cc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80015ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80015d6:	f7fe ff75 	bl	80004c4 <HAL_GetTick>
 80015da:	9b00      	ldr	r3, [sp, #0]
 80015dc:	1ac0      	subs	r0, r0, r3
 80015de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015e0:	4283      	cmp	r3, r0
 80015e2:	d8bc      	bhi.n	800155e <HAL_SPI_TransmitReceive+0xb8>
 80015e4:	3301      	adds	r3, #1
 80015e6:	d0ba      	beq.n	800155e <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 80015e8:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 80015ea:	0023      	movs	r3, r4
 80015ec:	2201      	movs	r2, #1
 80015ee:	3351      	adds	r3, #81	; 0x51
 80015f0:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80015f2:	2300      	movs	r3, #0
 80015f4:	3450      	adds	r4, #80	; 0x50
 80015f6:	7023      	strb	r3, [r4, #0]
}
 80015f8:	0028      	movs	r0, r5
 80015fa:	b005      	add	sp, #20
 80015fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80015fe:	2900      	cmp	r1, #0
 8001600:	d001      	beq.n	8001606 <HAL_SPI_TransmitReceive+0x160>
 8001602:	2f01      	cmp	r7, #1
 8001604:	d108      	bne.n	8001618 <HAL_SPI_TransmitReceive+0x172>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001606:	7832      	ldrb	r2, [r6, #0]
 8001608:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800160a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800160c:	3301      	adds	r3, #1
 800160e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001610:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001612:	3b01      	subs	r3, #1
 8001614:	b29b      	uxth	r3, r3
 8001616:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001618:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800161a:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800161c:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800161e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <HAL_SPI_TransmitReceive+0x184>
 8001624:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001626:	2b00      	cmp	r3, #0
 8001628:	d09f      	beq.n	800156a <HAL_SPI_TransmitReceive+0xc4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800162a:	6823      	ldr	r3, [r4, #0]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	423a      	tst	r2, r7
 8001630:	d00f      	beq.n	8001652 <HAL_SPI_TransmitReceive+0x1ac>
 8001632:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001634:	2a00      	cmp	r2, #0
 8001636:	d00c      	beq.n	8001652 <HAL_SPI_TransmitReceive+0x1ac>
 8001638:	2d01      	cmp	r5, #1
 800163a:	d10a      	bne.n	8001652 <HAL_SPI_TransmitReceive+0x1ac>
        txallowed = 0U;
 800163c:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800163e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8001644:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001646:	3301      	adds	r3, #1
 8001648:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800164a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800164c:	3b01      	subs	r3, #1
 800164e:	b29b      	uxth	r3, r3
 8001650:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001652:	6823      	ldr	r3, [r4, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	4232      	tst	r2, r6
 8001658:	d00d      	beq.n	8001676 <HAL_SPI_TransmitReceive+0x1d0>
 800165a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800165c:	2a00      	cmp	r2, #0
 800165e:	d00a      	beq.n	8001676 <HAL_SPI_TransmitReceive+0x1d0>
        txallowed = 1U;
 8001660:	0035      	movs	r5, r6
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001666:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 8001668:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800166a:	3301      	adds	r3, #1
 800166c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800166e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001670:	3b01      	subs	r3, #1
 8001672:	b29b      	uxth	r3, r3
 8001674:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001676:	f7fe ff25 	bl	80004c4 <HAL_GetTick>
 800167a:	9b00      	ldr	r3, [sp, #0]
 800167c:	1ac0      	subs	r0, r0, r3
 800167e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001680:	4283      	cmp	r3, r0
 8001682:	d8cc      	bhi.n	800161e <HAL_SPI_TransmitReceive+0x178>
 8001684:	3301      	adds	r3, #1
 8001686:	d0ca      	beq.n	800161e <HAL_SPI_TransmitReceive+0x178>
 8001688:	e7ae      	b.n	80015e8 <HAL_SPI_TransmitReceive+0x142>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800168a:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 800168c:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800168e:	6563      	str	r3, [r4, #84]	; 0x54
 8001690:	e7ab      	b.n	80015ea <HAL_SPI_TransmitReceive+0x144>
	...

08001694 <HAL_SPI_Receive>:
{
 8001694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001696:	001e      	movs	r6, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001698:	2382      	movs	r3, #130	; 0x82
{
 800169a:	0017      	movs	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800169c:	6842      	ldr	r2, [r0, #4]
{
 800169e:	b087      	sub	sp, #28
 80016a0:	0004      	movs	r4, r0
 80016a2:	9102      	str	r1, [sp, #8]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d10f      	bne.n	80016ca <HAL_SPI_Receive+0x36>
 80016aa:	6883      	ldr	r3, [r0, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10c      	bne.n	80016ca <HAL_SPI_Receive+0x36>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80016b0:	0003      	movs	r3, r0
 80016b2:	2204      	movs	r2, #4
 80016b4:	3351      	adds	r3, #81	; 0x51
 80016b6:	701a      	strb	r2, [r3, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80016b8:	9600      	str	r6, [sp, #0]
 80016ba:	003b      	movs	r3, r7
 80016bc:	000a      	movs	r2, r1
 80016be:	f7ff fef2 	bl	80014a6 <HAL_SPI_TransmitReceive>
 80016c2:	0005      	movs	r5, r0
}
 80016c4:	0028      	movs	r0, r5
 80016c6:	b007      	add	sp, #28
 80016c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 80016ca:	0023      	movs	r3, r4
 80016cc:	3350      	adds	r3, #80	; 0x50
 80016ce:	9304      	str	r3, [sp, #16]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2502      	movs	r5, #2
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d0f5      	beq.n	80016c4 <HAL_SPI_Receive+0x30>
 80016d8:	2301      	movs	r3, #1
 80016da:	9a04      	ldr	r2, [sp, #16]
 80016dc:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80016de:	f7fe fef1 	bl	80004c4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80016e2:	0023      	movs	r3, r4
 80016e4:	3351      	adds	r3, #81	; 0x51
  tickstart = HAL_GetTick();
 80016e6:	9003      	str	r0, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 80016e8:	9305      	str	r3, [sp, #20]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d14f      	bne.n	8001792 <HAL_SPI_Receive+0xfe>
  if ((pData == NULL) || (Size == 0U))
 80016f2:	9a02      	ldr	r2, [sp, #8]
    errorcode = HAL_ERROR;
 80016f4:	001d      	movs	r5, r3
  if ((pData == NULL) || (Size == 0U))
 80016f6:	2a00      	cmp	r2, #0
 80016f8:	d04b      	beq.n	8001792 <HAL_SPI_Receive+0xfe>
 80016fa:	2f00      	cmp	r7, #0
 80016fc:	d049      	beq.n	8001792 <HAL_SPI_Receive+0xfe>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80016fe:	9a05      	ldr	r2, [sp, #20]
 8001700:	3303      	adds	r3, #3
 8001702:	7013      	strb	r3, [r2, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001704:	9a02      	ldr	r2, [sp, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001706:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001708:	63a2      	str	r2, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800170a:	2280      	movs	r2, #128	; 0x80
 800170c:	68a1      	ldr	r1, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800170e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001710:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8001712:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8001714:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001716:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001718:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800171a:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxXferSize  = Size;
 800171c:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800171e:	0212      	lsls	r2, r2, #8
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	4291      	cmp	r1, r2
 8001724:	d103      	bne.n	800172e <HAL_SPI_Receive+0x9a>
    SPI_1LINE_RX(hspi);
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	492c      	ldr	r1, [pc, #176]	; (80017dc <HAL_SPI_Receive+0x148>)
 800172a:	400a      	ands	r2, r1
 800172c:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800172e:	2240      	movs	r2, #64	; 0x40
 8001730:	6819      	ldr	r1, [r3, #0]
 8001732:	4211      	tst	r1, r2
 8001734:	d102      	bne.n	800173c <HAL_SPI_Receive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8001736:	6819      	ldr	r1, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800173c:	68e3      	ldr	r3, [r4, #12]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800173e:	2501      	movs	r5, #1
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001740:	2b00      	cmp	r3, #0
 8001742:	d13a      	bne.n	80017ba <HAL_SPI_Receive+0x126>
    while (hspi->RxXferCount > 0U)
 8001744:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10b      	bne.n	8001762 <HAL_SPI_Receive+0xce>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800174a:	9a03      	ldr	r2, [sp, #12]
 800174c:	0031      	movs	r1, r6
 800174e:	0020      	movs	r0, r4
 8001750:	f7ff fd68 	bl	8001224 <SPI_EndRxTransaction>
 8001754:	2800      	cmp	r0, #0
 8001756:	d13d      	bne.n	80017d4 <HAL_SPI_Receive+0x140>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001758:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800175a:	1e6b      	subs	r3, r5, #1
 800175c:	419d      	sbcs	r5, r3
    errorcode = HAL_BUSY;
 800175e:	b2ed      	uxtb	r5, r5
 8001760:	e017      	b.n	8001792 <HAL_SPI_Receive+0xfe>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	422a      	tst	r2, r5
 8001768:	d00a      	beq.n	8001780 <HAL_SPI_Receive+0xec>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800176a:	7b1b      	ldrb	r3, [r3, #12]
 800176c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800176e:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001770:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001772:	3301      	adds	r3, #1
 8001774:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001776:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001778:	3b01      	subs	r3, #1
 800177a:	b29b      	uxth	r3, r3
 800177c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800177e:	e7e1      	b.n	8001744 <HAL_SPI_Receive+0xb0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001780:	f7fe fea0 	bl	80004c4 <HAL_GetTick>
 8001784:	9b03      	ldr	r3, [sp, #12]
 8001786:	1ac0      	subs	r0, r0, r3
 8001788:	4286      	cmp	r6, r0
 800178a:	d8db      	bhi.n	8001744 <HAL_SPI_Receive+0xb0>
 800178c:	1c73      	adds	r3, r6, #1
 800178e:	d0d9      	beq.n	8001744 <HAL_SPI_Receive+0xb0>
          errorcode = HAL_TIMEOUT;
 8001790:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001792:	2301      	movs	r3, #1
 8001794:	9a05      	ldr	r2, [sp, #20]
 8001796:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8001798:	2300      	movs	r3, #0
 800179a:	9a04      	ldr	r2, [sp, #16]
 800179c:	7013      	strb	r3, [r2, #0]
  return errorcode;
 800179e:	e791      	b.n	80016c4 <HAL_SPI_Receive+0x30>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80017a0:	6822      	ldr	r2, [r4, #0]
 80017a2:	6893      	ldr	r3, [r2, #8]
 80017a4:	422b      	tst	r3, r5
 80017a6:	d00c      	beq.n	80017c2 <HAL_SPI_Receive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80017a8:	68d2      	ldr	r2, [r2, #12]
 80017aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80017ae:	3302      	adds	r3, #2
 80017b0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80017b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80017b4:	3b01      	subs	r3, #1
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 80017ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1ef      	bne.n	80017a0 <HAL_SPI_Receive+0x10c>
 80017c0:	e7c3      	b.n	800174a <HAL_SPI_Receive+0xb6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80017c2:	f7fe fe7f 	bl	80004c4 <HAL_GetTick>
 80017c6:	9b03      	ldr	r3, [sp, #12]
 80017c8:	1ac0      	subs	r0, r0, r3
 80017ca:	4286      	cmp	r6, r0
 80017cc:	d8f5      	bhi.n	80017ba <HAL_SPI_Receive+0x126>
 80017ce:	1c73      	adds	r3, r6, #1
 80017d0:	d0f3      	beq.n	80017ba <HAL_SPI_Receive+0x126>
 80017d2:	e7dd      	b.n	8001790 <HAL_SPI_Receive+0xfc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80017d4:	2320      	movs	r3, #32
 80017d6:	6563      	str	r3, [r4, #84]	; 0x54
 80017d8:	e7be      	b.n	8001758 <HAL_SPI_Receive+0xc4>
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	ffffbfff 	.word	0xffffbfff

080017e0 <HAL_SPI_GetState>:
  return hspi->State;
 80017e0:	3051      	adds	r0, #81	; 0x51
 80017e2:	7800      	ldrb	r0, [r0, #0]
 80017e4:	b2c0      	uxtb	r0, r0
}
 80017e6:	4770      	bx	lr

080017e8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017e8:	2280      	movs	r2, #128	; 0x80
{
 80017ea:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80017ec:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017ee:	05d2      	lsls	r2, r2, #23
 80017f0:	4290      	cmp	r0, r2
 80017f2:	d005      	beq.n	8001800 <TIM_Base_SetConfig+0x18>
 80017f4:	4c10      	ldr	r4, [pc, #64]	; (8001838 <TIM_Base_SetConfig+0x50>)
 80017f6:	42a0      	cmp	r0, r4
 80017f8:	d002      	beq.n	8001800 <TIM_Base_SetConfig+0x18>
 80017fa:	4c10      	ldr	r4, [pc, #64]	; (800183c <TIM_Base_SetConfig+0x54>)
 80017fc:	42a0      	cmp	r0, r4
 80017fe:	d10f      	bne.n	8001820 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001800:	2470      	movs	r4, #112	; 0x70
 8001802:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8001804:	684c      	ldr	r4, [r1, #4]
 8001806:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001808:	4290      	cmp	r0, r2
 800180a:	d005      	beq.n	8001818 <TIM_Base_SetConfig+0x30>
 800180c:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <TIM_Base_SetConfig+0x50>)
 800180e:	4290      	cmp	r0, r2
 8001810:	d002      	beq.n	8001818 <TIM_Base_SetConfig+0x30>
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <TIM_Base_SetConfig+0x54>)
 8001814:	4290      	cmp	r0, r2
 8001816:	d103      	bne.n	8001820 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001818:	4a09      	ldr	r2, [pc, #36]	; (8001840 <TIM_Base_SetConfig+0x58>)
 800181a:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800181c:	68ca      	ldr	r2, [r1, #12]
 800181e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	4393      	bics	r3, r2
 8001824:	690a      	ldr	r2, [r1, #16]
 8001826:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001828:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800182a:	688b      	ldr	r3, [r1, #8]
 800182c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800182e:	680b      	ldr	r3, [r1, #0]
 8001830:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001832:	2301      	movs	r3, #1
 8001834:	6143      	str	r3, [r0, #20]
}
 8001836:	bd10      	pop	{r4, pc}
 8001838:	40010800 	.word	0x40010800
 800183c:	40011400 	.word	0x40011400
 8001840:	fffffcff 	.word	0xfffffcff

08001844 <HAL_TIM_Base_Init>:
{
 8001844:	b570      	push	{r4, r5, r6, lr}
 8001846:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001848:	2001      	movs	r0, #1
  if (htim == NULL)
 800184a:	2c00      	cmp	r4, #0
 800184c:	d014      	beq.n	8001878 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 800184e:	0025      	movs	r5, r4
 8001850:	3539      	adds	r5, #57	; 0x39
 8001852:	782b      	ldrb	r3, [r5, #0]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d105      	bne.n	8001866 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800185a:	0022      	movs	r2, r4
 800185c:	3238      	adds	r2, #56	; 0x38
 800185e:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8001860:	0020      	movs	r0, r4
 8001862:	f001 fc3f 	bl	80030e4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001866:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001868:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800186a:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800186c:	1d21      	adds	r1, r4, #4
 800186e:	f7ff ffbb 	bl	80017e8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001872:	2301      	movs	r3, #1
  return HAL_OK;
 8001874:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001876:	702b      	strb	r3, [r5, #0]
}
 8001878:	bd70      	pop	{r4, r5, r6, pc}
	...

0800187c <HAL_TIM_ConfigClockSource>:
{
 800187c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800187e:	0004      	movs	r4, r0
 8001880:	2202      	movs	r2, #2
 8001882:	3438      	adds	r4, #56	; 0x38
 8001884:	7825      	ldrb	r5, [r4, #0]
{
 8001886:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001888:	0010      	movs	r0, r2
 800188a:	2d01      	cmp	r5, #1
 800188c:	d017      	beq.n	80018be <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 800188e:	001d      	movs	r5, r3
  __HAL_LOCK(htim);
 8001890:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8001892:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001894:	3539      	adds	r5, #57	; 0x39
  __HAL_LOCK(htim);
 8001896:	7027      	strb	r7, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001898:	702a      	strb	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 800189a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800189c:	4845      	ldr	r0, [pc, #276]	; (80019b4 <HAL_TIM_ConfigClockSource+0x138>)
 800189e:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 80018a0:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80018a2:	680a      	ldr	r2, [r1, #0]
 80018a4:	2a40      	cmp	r2, #64	; 0x40
 80018a6:	d100      	bne.n	80018aa <HAL_TIM_ConfigClockSource+0x2e>
 80018a8:	e06d      	b.n	8001986 <HAL_TIM_ConfigClockSource+0x10a>
 80018aa:	d814      	bhi.n	80018d6 <HAL_TIM_ConfigClockSource+0x5a>
 80018ac:	2a10      	cmp	r2, #16
 80018ae:	d00b      	beq.n	80018c8 <HAL_TIM_ConfigClockSource+0x4c>
 80018b0:	d806      	bhi.n	80018c0 <HAL_TIM_ConfigClockSource+0x44>
 80018b2:	2a00      	cmp	r2, #0
 80018b4:	d008      	beq.n	80018c8 <HAL_TIM_ConfigClockSource+0x4c>
  htim->State = HAL_TIM_STATE_READY;
 80018b6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80018b8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80018ba:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80018bc:	7020      	strb	r0, [r4, #0]
}
 80018be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 80018c0:	2a20      	cmp	r2, #32
 80018c2:	d001      	beq.n	80018c8 <HAL_TIM_ConfigClockSource+0x4c>
 80018c4:	2a30      	cmp	r2, #48	; 0x30
 80018c6:	d1f6      	bne.n	80018b6 <HAL_TIM_ConfigClockSource+0x3a>
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80018c8:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80018ca:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80018cc:	4388      	bics	r0, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80018ce:	3969      	subs	r1, #105	; 0x69
 80018d0:	430a      	orrs	r2, r1
 80018d2:	4302      	orrs	r2, r0
 80018d4:	e03d      	b.n	8001952 <HAL_TIM_ConfigClockSource+0xd6>
  switch (sClockSourceConfig->ClockSource)
 80018d6:	2a60      	cmp	r2, #96	; 0x60
 80018d8:	d03d      	beq.n	8001956 <HAL_TIM_ConfigClockSource+0xda>
 80018da:	d817      	bhi.n	800190c <HAL_TIM_ConfigClockSource+0x90>
 80018dc:	2a50      	cmp	r2, #80	; 0x50
 80018de:	d1ea      	bne.n	80018b6 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018e0:	6848      	ldr	r0, [r1, #4]
 80018e2:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80018e4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018e6:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80018e8:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018ea:	43be      	bics	r6, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80018ec:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018ee:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018f0:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80018f2:	43be      	bics	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80018f4:	4332      	orrs	r2, r6
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80018f6:	260a      	movs	r6, #10
 80018f8:	43b1      	bics	r1, r6
  tmpccer |= TIM_ICPolarity;
 80018fa:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80018fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80018fe:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001900:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8001902:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001904:	438a      	bics	r2, r1
 8001906:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001908:	2257      	movs	r2, #87	; 0x57
 800190a:	e021      	b.n	8001950 <HAL_TIM_ConfigClockSource+0xd4>
  switch (sClockSourceConfig->ClockSource)
 800190c:	2a70      	cmp	r2, #112	; 0x70
 800190e:	d012      	beq.n	8001936 <HAL_TIM_ConfigClockSource+0xba>
 8001910:	2080      	movs	r0, #128	; 0x80
 8001912:	0180      	lsls	r0, r0, #6
 8001914:	4282      	cmp	r2, r0
 8001916:	d1ce      	bne.n	80018b6 <HAL_TIM_ConfigClockSource+0x3a>
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001918:	689a      	ldr	r2, [r3, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800191a:	4827      	ldr	r0, [pc, #156]	; (80019b8 <HAL_TIM_ConfigClockSource+0x13c>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800191c:	684e      	ldr	r6, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800191e:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001920:	688a      	ldr	r2, [r1, #8]
 8001922:	68c9      	ldr	r1, [r1, #12]
 8001924:	4332      	orrs	r2, r6
 8001926:	0209      	lsls	r1, r1, #8
 8001928:	430a      	orrs	r2, r1
 800192a:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800192c:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	6899      	ldr	r1, [r3, #8]
 8001932:	01d2      	lsls	r2, r2, #7
 8001934:	e00c      	b.n	8001950 <HAL_TIM_ConfigClockSource+0xd4>
  tmpsmcr = TIMx->SMCR;
 8001936:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001938:	481f      	ldr	r0, [pc, #124]	; (80019b8 <HAL_TIM_ConfigClockSource+0x13c>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800193a:	684e      	ldr	r6, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800193c:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800193e:	688a      	ldr	r2, [r1, #8]
 8001940:	68c9      	ldr	r1, [r1, #12]
 8001942:	4332      	orrs	r2, r6
 8001944:	0209      	lsls	r1, r1, #8
 8001946:	430a      	orrs	r2, r1
 8001948:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 800194a:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800194c:	2277      	movs	r2, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 800194e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001950:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	e7af      	b.n	80018b6 <HAL_TIM_ConfigClockSource+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001956:	2610      	movs	r6, #16
 8001958:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800195a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800195c:	43b0      	bics	r0, r6
      TIM_TI2_ConfigInputStage(htim->Instance,
 800195e:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001960:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001962:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001964:	4f15      	ldr	r7, [pc, #84]	; (80019bc <HAL_TIM_ConfigClockSource+0x140>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001966:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001968:	403e      	ands	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800196a:	4331      	orrs	r1, r6
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800196c:	26a0      	movs	r6, #160	; 0xa0
  tmpccer = TIMx->CCER;
 800196e:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8001970:	6199      	str	r1, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001972:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001974:	43b0      	bics	r0, r6
  tmpccer |= (TIM_ICPolarity << 4U);
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 800197a:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800197c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800197e:	438a      	bics	r2, r1
 8001980:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001982:	2267      	movs	r2, #103	; 0x67
 8001984:	e7e4      	b.n	8001950 <HAL_TIM_ConfigClockSource+0xd4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001986:	6848      	ldr	r0, [r1, #4]
 8001988:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 800198a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800198c:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800198e:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001990:	43be      	bics	r6, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001992:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001994:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001996:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001998:	43be      	bics	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800199a:	4332      	orrs	r2, r6
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800199c:	260a      	movs	r6, #10
 800199e:	43b1      	bics	r1, r6
  tmpccer |= TIM_ICPolarity;
 80019a0:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80019a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80019a4:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80019a6:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80019a8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80019aa:	438a      	bics	r2, r1
 80019ac:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80019ae:	2247      	movs	r2, #71	; 0x47
 80019b0:	e7ce      	b.n	8001950 <HAL_TIM_ConfigClockSource+0xd4>
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	ffff0088 	.word	0xffff0088
 80019b8:	ffff00ff 	.word	0xffff00ff
 80019bc:	ffff0fff 	.word	0xffff0fff

080019c0 <HAL_TIM_PeriodElapsedCallback>:
 80019c0:	4770      	bx	lr

080019c2 <HAL_TIM_OC_DelayElapsedCallback>:
 80019c2:	4770      	bx	lr

080019c4 <HAL_TIM_IC_CaptureCallback>:
 80019c4:	4770      	bx	lr

080019c6 <HAL_TIM_PWM_PulseFinishedCallback>:
 80019c6:	4770      	bx	lr

080019c8 <HAL_TIM_TriggerCallback>:
 80019c8:	4770      	bx	lr

080019ca <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019ca:	2202      	movs	r2, #2
 80019cc:	6803      	ldr	r3, [r0, #0]
{
 80019ce:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019d0:	6919      	ldr	r1, [r3, #16]
{
 80019d2:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019d4:	4211      	tst	r1, r2
 80019d6:	d00d      	beq.n	80019f4 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019d8:	68d9      	ldr	r1, [r3, #12]
 80019da:	4211      	tst	r1, r2
 80019dc:	d00a      	beq.n	80019f4 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019de:	3a05      	subs	r2, #5
 80019e0:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019e2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019e4:	3204      	adds	r2, #4
 80019e6:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019e8:	079b      	lsls	r3, r3, #30
 80019ea:	d05e      	beq.n	8001aaa <HAL_TIM_IRQHandler+0xe0>
          HAL_TIM_IC_CaptureCallback(htim);
 80019ec:	f7ff ffea 	bl	80019c4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019f0:	2300      	movs	r3, #0
 80019f2:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019f4:	2204      	movs	r2, #4
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	6919      	ldr	r1, [r3, #16]
 80019fa:	4211      	tst	r1, r2
 80019fc:	d010      	beq.n	8001a20 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019fe:	68d9      	ldr	r1, [r3, #12]
 8001a00:	4211      	tst	r1, r2
 8001a02:	d00d      	beq.n	8001a20 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a04:	3a09      	subs	r2, #9
 8001a06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a08:	3207      	adds	r2, #7
 8001a0a:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a0c:	699a      	ldr	r2, [r3, #24]
 8001a0e:	23c0      	movs	r3, #192	; 0xc0
 8001a10:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001a12:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a14:	421a      	tst	r2, r3
 8001a16:	d04e      	beq.n	8001ab6 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a18:	f7ff ffd4 	bl	80019c4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a20:	2208      	movs	r2, #8
 8001a22:	6823      	ldr	r3, [r4, #0]
 8001a24:	6919      	ldr	r1, [r3, #16]
 8001a26:	4211      	tst	r1, r2
 8001a28:	d00e      	beq.n	8001a48 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a2a:	68d9      	ldr	r1, [r3, #12]
 8001a2c:	4211      	tst	r1, r2
 8001a2e:	d00b      	beq.n	8001a48 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a30:	3a11      	subs	r2, #17
 8001a32:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a34:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a36:	320d      	adds	r2, #13
 8001a38:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001a3a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a3c:	079b      	lsls	r3, r3, #30
 8001a3e:	d040      	beq.n	8001ac2 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a40:	f7ff ffc0 	bl	80019c4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a44:	2300      	movs	r3, #0
 8001a46:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a48:	2210      	movs	r2, #16
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	6919      	ldr	r1, [r3, #16]
 8001a4e:	4211      	tst	r1, r2
 8001a50:	d010      	beq.n	8001a74 <HAL_TIM_IRQHandler+0xaa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a52:	68d9      	ldr	r1, [r3, #12]
 8001a54:	4211      	tst	r1, r2
 8001a56:	d00d      	beq.n	8001a74 <HAL_TIM_IRQHandler+0xaa>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a58:	3a21      	subs	r2, #33	; 0x21
 8001a5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a5c:	3219      	adds	r2, #25
 8001a5e:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a60:	69da      	ldr	r2, [r3, #28]
 8001a62:	23c0      	movs	r3, #192	; 0xc0
 8001a64:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001a66:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a68:	421a      	tst	r2, r3
 8001a6a:	d030      	beq.n	8001ace <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a6c:	f7ff ffaa 	bl	80019c4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a70:	2300      	movs	r3, #0
 8001a72:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a74:	2201      	movs	r2, #1
 8001a76:	6823      	ldr	r3, [r4, #0]
 8001a78:	6919      	ldr	r1, [r3, #16]
 8001a7a:	4211      	tst	r1, r2
 8001a7c:	d007      	beq.n	8001a8e <HAL_TIM_IRQHandler+0xc4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a7e:	68d9      	ldr	r1, [r3, #12]
 8001a80:	4211      	tst	r1, r2
 8001a82:	d004      	beq.n	8001a8e <HAL_TIM_IRQHandler+0xc4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a84:	3a03      	subs	r2, #3
 8001a86:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a88:	0020      	movs	r0, r4
 8001a8a:	f7ff ff99 	bl	80019c0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a8e:	2240      	movs	r2, #64	; 0x40
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	6919      	ldr	r1, [r3, #16]
 8001a94:	4211      	tst	r1, r2
 8001a96:	d007      	beq.n	8001aa8 <HAL_TIM_IRQHandler+0xde>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a98:	68d9      	ldr	r1, [r3, #12]
 8001a9a:	4211      	tst	r1, r2
 8001a9c:	d004      	beq.n	8001aa8 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a9e:	3a81      	subs	r2, #129	; 0x81
 8001aa0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001aa2:	0020      	movs	r0, r4
 8001aa4:	f7ff ff90 	bl	80019c8 <HAL_TIM_TriggerCallback>
}
 8001aa8:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aaa:	f7ff ff8a 	bl	80019c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aae:	0020      	movs	r0, r4
 8001ab0:	f7ff ff89 	bl	80019c6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ab4:	e79c      	b.n	80019f0 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ab6:	f7ff ff84 	bl	80019c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aba:	0020      	movs	r0, r4
 8001abc:	f7ff ff83 	bl	80019c6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ac0:	e7ac      	b.n	8001a1c <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac2:	f7ff ff7e 	bl	80019c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac6:	0020      	movs	r0, r4
 8001ac8:	f7ff ff7d 	bl	80019c6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001acc:	e7ba      	b.n	8001a44 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ace:	f7ff ff78 	bl	80019c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad2:	0020      	movs	r0, r4
 8001ad4:	f7ff ff77 	bl	80019c6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ad8:	e7ca      	b.n	8001a70 <HAL_TIM_IRQHandler+0xa6>

08001ada <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ada:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001adc:	0004      	movs	r4, r0
 8001ade:	3438      	adds	r4, #56	; 0x38
 8001ae0:	7822      	ldrb	r2, [r4, #0]
{
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001ae6:	2a01      	cmp	r2, #1
 8001ae8:	d013      	beq.n	8001b12 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aea:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001aec:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8001aee:	3539      	adds	r5, #57	; 0x39
 8001af0:	7028      	strb	r0, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	6842      	ldr	r2, [r0, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001af6:	6883      	ldr	r3, [r0, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001af8:	43b2      	bics	r2, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001afa:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001afc:	6849      	ldr	r1, [r1, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001afe:	4332      	orrs	r2, r6
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001b00:	2680      	movs	r6, #128	; 0x80
 8001b02:	43b3      	bics	r3, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b04:	430b      	orrs	r3, r1

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b06:	6042      	str	r2, [r0, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001b08:	6083      	str	r3, [r0, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001b0a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8001b0c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001b0e:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8001b10:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001b12:	bd70      	pop	{r4, r5, r6, pc}

08001b14 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b14:	6803      	ldr	r3, [r0, #0]
 8001b16:	4907      	ldr	r1, [pc, #28]	; (8001b34 <UART_EndRxTransfer+0x20>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	3123      	adds	r1, #35	; 0x23
 8001b22:	31ff      	adds	r1, #255	; 0xff
 8001b24:	438a      	bics	r2, r1
 8001b26:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b28:	2320      	movs	r3, #32
 8001b2a:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001b30:	4770      	bx	lr
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	fffffedf 	.word	0xfffffedf

08001b38 <HAL_UART_Receive_IT>:
{
 8001b38:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b3a:	6f84      	ldr	r4, [r0, #120]	; 0x78
{
 8001b3c:	0003      	movs	r3, r0
    return HAL_BUSY;
 8001b3e:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b40:	2c20      	cmp	r4, #32
 8001b42:	d141      	bne.n	8001bc8 <HAL_UART_Receive_IT+0x90>
      return HAL_ERROR;
 8001b44:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8001b46:	2900      	cmp	r1, #0
 8001b48:	d03e      	beq.n	8001bc8 <HAL_UART_Receive_IT+0x90>
 8001b4a:	2a00      	cmp	r2, #0
 8001b4c:	d03c      	beq.n	8001bc8 <HAL_UART_Receive_IT+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b4e:	2580      	movs	r5, #128	; 0x80
 8001b50:	689c      	ldr	r4, [r3, #8]
 8001b52:	016d      	lsls	r5, r5, #5
 8001b54:	42ac      	cmp	r4, r5
 8001b56:	d104      	bne.n	8001b62 <HAL_UART_Receive_IT+0x2a>
 8001b58:	691d      	ldr	r5, [r3, #16]
 8001b5a:	2d00      	cmp	r5, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_UART_Receive_IT+0x2a>
      if ((((uint32_t)pData) & 1) != 0)
 8001b5e:	4201      	tst	r1, r0
 8001b60:	d132      	bne.n	8001bc8 <HAL_UART_Receive_IT+0x90>
    __HAL_LOCK(huart);
 8001b62:	001d      	movs	r5, r3
 8001b64:	3570      	adds	r5, #112	; 0x70
 8001b66:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 8001b68:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001b6a:	2e01      	cmp	r6, #1
 8001b6c:	d02c      	beq.n	8001bc8 <HAL_UART_Receive_IT+0x90>
 8001b6e:	3801      	subs	r0, #1
 8001b70:	7028      	strb	r0, [r5, #0]
    huart->pRxBuffPtr  = pData;
 8001b72:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8001b74:	0019      	movs	r1, r3
 8001b76:	3158      	adds	r1, #88	; 0x58
 8001b78:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 8001b7a:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 8001b7c:	2080      	movs	r0, #128	; 0x80
    huart->RxISR       = NULL;
 8001b7e:	2100      	movs	r1, #0
 8001b80:	001a      	movs	r2, r3
 8001b82:	6619      	str	r1, [r3, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8001b84:	0140      	lsls	r0, r0, #5
 8001b86:	325c      	adds	r2, #92	; 0x5c
 8001b88:	4284      	cmp	r4, r0
 8001b8a:	d120      	bne.n	8001bce <HAL_UART_Receive_IT+0x96>
 8001b8c:	6919      	ldr	r1, [r3, #16]
 8001b8e:	2900      	cmp	r1, #0
 8001b90:	d11b      	bne.n	8001bca <HAL_UART_Receive_IT+0x92>
 8001b92:	4918      	ldr	r1, [pc, #96]	; (8001bf4 <HAL_UART_Receive_IT+0xbc>)
 8001b94:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b96:	2200      	movs	r2, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b98:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b9a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b9c:	3222      	adds	r2, #34	; 0x22
 8001b9e:	679a      	str	r2, [r3, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	6890      	ldr	r0, [r2, #8]
 8001ba4:	4301      	orrs	r1, r0
 8001ba6:	6091      	str	r1, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ba8:	2180      	movs	r1, #128	; 0x80
 8001baa:	0149      	lsls	r1, r1, #5
 8001bac:	428c      	cmp	r4, r1
 8001bae:	d11e      	bne.n	8001bee <HAL_UART_Receive_IT+0xb6>
 8001bb0:	6919      	ldr	r1, [r3, #16]
 8001bb2:	2900      	cmp	r1, #0
 8001bb4:	d11b      	bne.n	8001bee <HAL_UART_Receive_IT+0xb6>
      huart->RxISR = UART_RxISR_16BIT;
 8001bb6:	4910      	ldr	r1, [pc, #64]	; (8001bf8 <HAL_UART_Receive_IT+0xc0>)
      huart->RxISR = UART_RxISR_8BIT;
 8001bb8:	6619      	str	r1, [r3, #96]	; 0x60
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001bba:	2390      	movs	r3, #144	; 0x90
    __HAL_UNLOCK(huart);
 8001bbc:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001bbe:	6811      	ldr	r1, [r2, #0]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	430b      	orrs	r3, r1
    __HAL_UNLOCK(huart);
 8001bc4:	7028      	strb	r0, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bd70      	pop	{r4, r5, r6, pc}
    UART_MASK_COMPUTATION(huart);
 8001bca:	21ff      	movs	r1, #255	; 0xff
 8001bcc:	e7e2      	b.n	8001b94 <HAL_UART_Receive_IT+0x5c>
 8001bce:	2c00      	cmp	r4, #0
 8001bd0:	d104      	bne.n	8001bdc <HAL_UART_Receive_IT+0xa4>
 8001bd2:	6919      	ldr	r1, [r3, #16]
 8001bd4:	2900      	cmp	r1, #0
 8001bd6:	d0f8      	beq.n	8001bca <HAL_UART_Receive_IT+0x92>
 8001bd8:	217f      	movs	r1, #127	; 0x7f
 8001bda:	e7db      	b.n	8001b94 <HAL_UART_Receive_IT+0x5c>
 8001bdc:	2080      	movs	r0, #128	; 0x80
 8001bde:	0540      	lsls	r0, r0, #21
 8001be0:	4284      	cmp	r4, r0
 8001be2:	d1d7      	bne.n	8001b94 <HAL_UART_Receive_IT+0x5c>
 8001be4:	6919      	ldr	r1, [r3, #16]
 8001be6:	2900      	cmp	r1, #0
 8001be8:	d0f6      	beq.n	8001bd8 <HAL_UART_Receive_IT+0xa0>
 8001bea:	213f      	movs	r1, #63	; 0x3f
 8001bec:	e7d2      	b.n	8001b94 <HAL_UART_Receive_IT+0x5c>
      huart->RxISR = UART_RxISR_8BIT;
 8001bee:	4903      	ldr	r1, [pc, #12]	; (8001bfc <HAL_UART_Receive_IT+0xc4>)
 8001bf0:	e7e2      	b.n	8001bb8 <HAL_UART_Receive_IT+0x80>
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	000001ff 	.word	0x000001ff
 8001bf8:	08001c65 	.word	0x08001c65
 8001bfc:	08001c05 	.word	0x08001c05

08001c00 <HAL_UART_TxCpltCallback>:
 8001c00:	4770      	bx	lr
	...

08001c04 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c04:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8001c06:	b510      	push	{r4, lr}
 8001c08:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c0a:	2a22      	cmp	r2, #34	; 0x22
 8001c0c:	d123      	bne.n	8001c56 <UART_RxISR_8BIT+0x52>
  uint16_t uhMask = huart->Mask;
 8001c0e:	0002      	movs	r2, r0
 8001c10:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001c14:	8812      	ldrh	r2, [r2, #0]
 8001c16:	4013      	ands	r3, r2
 8001c18:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001c1a:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8001c1c:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 8001c1e:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001c20:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8001c22:	3301      	adds	r3, #1
 8001c24:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001c26:	8813      	ldrh	r3, [r2, #0]
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8001c2e:	8813      	ldrh	r3, [r2, #0]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10e      	bne.n	8001c54 <UART_RxISR_8BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c36:	6802      	ldr	r2, [r0, #0]
 8001c38:	4c09      	ldr	r4, [pc, #36]	; (8001c60 <UART_RxISR_8BIT+0x5c>)
 8001c3a:	6811      	ldr	r1, [r2, #0]
 8001c3c:	4021      	ands	r1, r4
 8001c3e:	6011      	str	r1, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c40:	6891      	ldr	r1, [r2, #8]
 8001c42:	3423      	adds	r4, #35	; 0x23
 8001c44:	34ff      	adds	r4, #255	; 0xff
 8001c46:	43a1      	bics	r1, r4
 8001c48:	6091      	str	r1, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001c4a:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8001c4c:	6603      	str	r3, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 8001c4e:	6782      	str	r2, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001c50:	f000 ff7e 	bl	8002b50 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8001c54:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001c56:	2208      	movs	r2, #8
 8001c58:	6999      	ldr	r1, [r3, #24]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	619a      	str	r2, [r3, #24]
}
 8001c5e:	e7f9      	b.n	8001c54 <UART_RxISR_8BIT+0x50>
 8001c60:	fffffedf 	.word	0xfffffedf

08001c64 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c64:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8001c66:	b510      	push	{r4, lr}
 8001c68:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c6a:	2a22      	cmp	r2, #34	; 0x22
 8001c6c:	d121      	bne.n	8001cb2 <UART_RxISR_16BIT+0x4e>
  uint16_t uhMask = huart->Mask;
 8001c6e:	0004      	movs	r4, r0
 8001c70:	345c      	adds	r4, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001c72:	6a59      	ldr	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8001c74:	8824      	ldrh	r4, [r4, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8001c76:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8001c78:	4021      	ands	r1, r4
 8001c7a:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8001c7c:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 8001c7e:	3202      	adds	r2, #2
 8001c80:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001c82:	315a      	adds	r1, #90	; 0x5a
 8001c84:	880a      	ldrh	r2, [r1, #0]
 8001c86:	3a01      	subs	r2, #1
 8001c88:	b292      	uxth	r2, r2
 8001c8a:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 8001c8c:	880a      	ldrh	r2, [r1, #0]
 8001c8e:	b292      	uxth	r2, r2
 8001c90:	2a00      	cmp	r2, #0
 8001c92:	d10d      	bne.n	8001cb0 <UART_RxISR_16BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c94:	6819      	ldr	r1, [r3, #0]
 8001c96:	4c09      	ldr	r4, [pc, #36]	; (8001cbc <UART_RxISR_16BIT+0x58>)
 8001c98:	4021      	ands	r1, r4
 8001c9a:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c9c:	6899      	ldr	r1, [r3, #8]
 8001c9e:	3423      	adds	r4, #35	; 0x23
 8001ca0:	34ff      	adds	r4, #255	; 0xff
 8001ca2:	43a1      	bics	r1, r4
 8001ca4:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001ca6:	2320      	movs	r3, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8001ca8:	6602      	str	r2, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 8001caa:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001cac:	f000 ff50 	bl	8002b50 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8001cb0:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001cb2:	2208      	movs	r2, #8
 8001cb4:	6999      	ldr	r1, [r3, #24]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	619a      	str	r2, [r3, #24]
}
 8001cba:	e7f9      	b.n	8001cb0 <UART_RxISR_16BIT+0x4c>
 8001cbc:	fffffedf 	.word	0xfffffedf

08001cc0 <HAL_UART_ErrorCallback>:
 8001cc0:	4770      	bx	lr
	...

08001cc4 <HAL_UART_IRQHandler>:
{
 8001cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001cc6:	6803      	ldr	r3, [r0, #0]
{
 8001cc8:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001cca:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ccc:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001cce:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8001cd0:	0711      	lsls	r1, r2, #28
 8001cd2:	d10a      	bne.n	8001cea <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001cd4:	2120      	movs	r1, #32
 8001cd6:	420a      	tst	r2, r1
 8001cd8:	d100      	bne.n	8001cdc <HAL_UART_IRQHandler+0x18>
 8001cda:	e06a      	b.n	8001db2 <HAL_UART_IRQHandler+0xee>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001cdc:	4208      	tst	r0, r1
 8001cde:	d068      	beq.n	8001db2 <HAL_UART_IRQHandler+0xee>
      if (huart->RxISR != NULL)
 8001ce0:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 8001ce2:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d15a      	bne.n	8001d9e <HAL_UART_IRQHandler+0xda>
 8001ce8:	e05a      	b.n	8001da0 <HAL_UART_IRQHandler+0xdc>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001cea:	2101      	movs	r1, #1
 8001cec:	0035      	movs	r5, r6
 8001cee:	400d      	ands	r5, r1
 8001cf0:	d103      	bne.n	8001cfa <HAL_UART_IRQHandler+0x36>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001cf2:	2790      	movs	r7, #144	; 0x90
 8001cf4:	007f      	lsls	r7, r7, #1
 8001cf6:	4238      	tst	r0, r7
 8001cf8:	d05b      	beq.n	8001db2 <HAL_UART_IRQHandler+0xee>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001cfa:	420a      	tst	r2, r1
 8001cfc:	d005      	beq.n	8001d0a <HAL_UART_IRQHandler+0x46>
 8001cfe:	05c6      	lsls	r6, r0, #23
 8001d00:	d503      	bpl.n	8001d0a <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001d02:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d04:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001d06:	4331      	orrs	r1, r6
 8001d08:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d0a:	2102      	movs	r1, #2
 8001d0c:	420a      	tst	r2, r1
 8001d0e:	d006      	beq.n	8001d1e <HAL_UART_IRQHandler+0x5a>
 8001d10:	2d00      	cmp	r5, #0
 8001d12:	d004      	beq.n	8001d1e <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001d14:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d16:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001d18:	1849      	adds	r1, r1, r1
 8001d1a:	4331      	orrs	r1, r6
 8001d1c:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d1e:	2104      	movs	r1, #4
 8001d20:	420a      	tst	r2, r1
 8001d22:	d006      	beq.n	8001d32 <HAL_UART_IRQHandler+0x6e>
 8001d24:	2d00      	cmp	r5, #0
 8001d26:	d004      	beq.n	8001d32 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001d28:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d2a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001d2c:	3902      	subs	r1, #2
 8001d2e:	4331      	orrs	r1, r6
 8001d30:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001d32:	0711      	lsls	r1, r2, #28
 8001d34:	d508      	bpl.n	8001d48 <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001d36:	0681      	lsls	r1, r0, #26
 8001d38:	d401      	bmi.n	8001d3e <HAL_UART_IRQHandler+0x7a>
 8001d3a:	2d00      	cmp	r5, #0
 8001d3c:	d004      	beq.n	8001d48 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001d3e:	2108      	movs	r1, #8
 8001d40:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d42:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001d44:	4319      	orrs	r1, r3
 8001d46:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d48:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d028      	beq.n	8001da0 <HAL_UART_IRQHandler+0xdc>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001d4e:	2320      	movs	r3, #32
 8001d50:	421a      	tst	r2, r3
 8001d52:	d006      	beq.n	8001d62 <HAL_UART_IRQHandler+0x9e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001d54:	4218      	tst	r0, r3
 8001d56:	d004      	beq.n	8001d62 <HAL_UART_IRQHandler+0x9e>
        if (huart->RxISR != NULL)
 8001d58:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_UART_IRQHandler+0x9e>
          huart->RxISR(huart);
 8001d5e:	0020      	movs	r0, r4
 8001d60:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001d62:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8001d64:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001d66:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8001d68:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001d6a:	065b      	lsls	r3, r3, #25
 8001d6c:	d402      	bmi.n	8001d74 <HAL_UART_IRQHandler+0xb0>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8001d6e:	2308      	movs	r3, #8
 8001d70:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001d72:	d01a      	beq.n	8001daa <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8001d74:	f7ff fece 	bl	8001b14 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d78:	2140      	movs	r1, #64	; 0x40
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	420a      	tst	r2, r1
 8001d80:	d00f      	beq.n	8001da2 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d82:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001d84:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d86:	438a      	bics	r2, r1
 8001d88:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001d8a:	2800      	cmp	r0, #0
 8001d8c:	d009      	beq.n	8001da2 <HAL_UART_IRQHandler+0xde>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_UART_IRQHandler+0x134>)
 8001d90:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d92:	f7fe fc01 	bl	8000598 <HAL_DMA_Abort_IT>
 8001d96:	2800      	cmp	r0, #0
 8001d98:	d002      	beq.n	8001da0 <HAL_UART_IRQHandler+0xdc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d9a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001d9c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d9e:	4798      	blx	r3
}
 8001da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8001da2:	0020      	movs	r0, r4
 8001da4:	f7ff ff8c 	bl	8001cc0 <HAL_UART_ErrorCallback>
 8001da8:	e7fa      	b.n	8001da0 <HAL_UART_IRQHandler+0xdc>
        HAL_UART_ErrorCallback(huart);
 8001daa:	f7ff ff89 	bl	8001cc0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dae:	67e5      	str	r5, [r4, #124]	; 0x7c
 8001db0:	e7f6      	b.n	8001da0 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001db2:	2180      	movs	r1, #128	; 0x80
 8001db4:	0349      	lsls	r1, r1, #13
 8001db6:	420a      	tst	r2, r1
 8001db8:	d006      	beq.n	8001dc8 <HAL_UART_IRQHandler+0x104>
 8001dba:	0275      	lsls	r5, r6, #9
 8001dbc:	d504      	bpl.n	8001dc8 <HAL_UART_IRQHandler+0x104>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001dbe:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8001dc0:	0020      	movs	r0, r4
 8001dc2:	f000 faa7 	bl	8002314 <HAL_UARTEx_WakeupCallback>
    return;
 8001dc6:	e7eb      	b.n	8001da0 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001dc8:	2180      	movs	r1, #128	; 0x80
 8001dca:	420a      	tst	r2, r1
 8001dcc:	d003      	beq.n	8001dd6 <HAL_UART_IRQHandler+0x112>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001dce:	4208      	tst	r0, r1
 8001dd0:	d001      	beq.n	8001dd6 <HAL_UART_IRQHandler+0x112>
    if (huart->TxISR != NULL)
 8001dd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001dd4:	e785      	b.n	8001ce2 <HAL_UART_IRQHandler+0x1e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001dd6:	2140      	movs	r1, #64	; 0x40
 8001dd8:	420a      	tst	r2, r1
 8001dda:	d0e1      	beq.n	8001da0 <HAL_UART_IRQHandler+0xdc>
 8001ddc:	4208      	tst	r0, r1
 8001dde:	d0df      	beq.n	8001da0 <HAL_UART_IRQHandler+0xdc>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001de0:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8001de2:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001de4:	438a      	bics	r2, r1
 8001de6:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001de8:	2320      	movs	r3, #32
 8001dea:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8001df0:	f7ff ff06 	bl	8001c00 <HAL_UART_TxCpltCallback>
 8001df4:	e7d4      	b.n	8001da0 <HAL_UART_IRQHandler+0xdc>
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	08001dfd 	.word	0x08001dfd

08001dfc <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001dfc:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	0002      	movs	r2, r0
{
 8001e02:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8001e04:	325a      	adds	r2, #90	; 0x5a
 8001e06:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8001e08:	3a08      	subs	r2, #8
 8001e0a:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 8001e0c:	f7ff ff58 	bl	8001cc0 <HAL_UART_ErrorCallback>
}
 8001e10:	bd10      	pop	{r4, pc}
	...

08001e14 <UART_SetConfig>:
{
 8001e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e16:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e18:	6925      	ldr	r5, [r4, #16]
 8001e1a:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8001e1c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e1e:	432a      	orrs	r2, r5
 8001e20:	6965      	ldr	r5, [r4, #20]
 8001e22:	69c1      	ldr	r1, [r0, #28]
 8001e24:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	4d79      	ldr	r5, [pc, #484]	; (8002010 <UART_SetConfig+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e2a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e2c:	4028      	ands	r0, r5
 8001e2e:	4302      	orrs	r2, r0
 8001e30:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4877      	ldr	r0, [pc, #476]	; (8002014 <UART_SetConfig+0x200>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001e36:	4d78      	ldr	r5, [pc, #480]	; (8002018 <UART_SetConfig+0x204>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e38:	4002      	ands	r2, r0
 8001e3a:	68e0      	ldr	r0, [r4, #12]
 8001e3c:	4302      	orrs	r2, r0
 8001e3e:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001e40:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001e42:	42ab      	cmp	r3, r5
 8001e44:	d001      	beq.n	8001e4a <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8001e46:	6a22      	ldr	r2, [r4, #32]
 8001e48:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	4e73      	ldr	r6, [pc, #460]	; (800201c <UART_SetConfig+0x208>)
 8001e4e:	4032      	ands	r2, r6
 8001e50:	4302      	orrs	r2, r0
 8001e52:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e54:	4a72      	ldr	r2, [pc, #456]	; (8002020 <UART_SetConfig+0x20c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d113      	bne.n	8001e82 <UART_SetConfig+0x6e>
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	4b71      	ldr	r3, [pc, #452]	; (8002024 <UART_SetConfig+0x210>)
 8001e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e60:	4013      	ands	r3, r2
 8001e62:	4a71      	ldr	r2, [pc, #452]	; (8002028 <UART_SetConfig+0x214>)
 8001e64:	5cd0      	ldrb	r0, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	4299      	cmp	r1, r3
 8001e6c:	d000      	beq.n	8001e70 <UART_SetConfig+0x5c>
 8001e6e:	e092      	b.n	8001f96 <UART_SetConfig+0x182>
    switch (clocksource)
 8001e70:	2808      	cmp	r0, #8
 8001e72:	d81e      	bhi.n	8001eb2 <UART_SetConfig+0x9e>
 8001e74:	f7fe f952 	bl	800011c <__gnu_thumb1_case_uqi>
 8001e78:	1d636058 	.word	0x1d636058
 8001e7c:	1d1d1d84 	.word	0x1d1d1d84
 8001e80:	87          	.byte	0x87
 8001e81:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e82:	4a6a      	ldr	r2, [pc, #424]	; (800202c <UART_SetConfig+0x218>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d105      	bne.n	8001e94 <UART_SetConfig+0x80>
 8001e88:	220c      	movs	r2, #12
 8001e8a:	4b66      	ldr	r3, [pc, #408]	; (8002024 <UART_SetConfig+0x210>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	4013      	ands	r3, r2
 8001e90:	4a67      	ldr	r2, [pc, #412]	; (8002030 <UART_SetConfig+0x21c>)
 8001e92:	e7e7      	b.n	8001e64 <UART_SetConfig+0x50>
 8001e94:	42ab      	cmp	r3, r5
 8001e96:	d000      	beq.n	8001e9a <UART_SetConfig+0x86>
 8001e98:	e0b3      	b.n	8002002 <UART_SetConfig+0x1ee>
 8001e9a:	21c0      	movs	r1, #192	; 0xc0
 8001e9c:	2080      	movs	r0, #128	; 0x80
 8001e9e:	4a61      	ldr	r2, [pc, #388]	; (8002024 <UART_SetConfig+0x210>)
 8001ea0:	0109      	lsls	r1, r1, #4
 8001ea2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001ea4:	00c0      	lsls	r0, r0, #3
 8001ea6:	400b      	ands	r3, r1
 8001ea8:	4283      	cmp	r3, r0
 8001eaa:	d038      	beq.n	8001f1e <UART_SetConfig+0x10a>
 8001eac:	d803      	bhi.n	8001eb6 <UART_SetConfig+0xa2>
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00a      	beq.n	8001ec8 <UART_SetConfig+0xb4>
        ret = HAL_ERROR;
 8001eb2:	2501      	movs	r5, #1
 8001eb4:	e00d      	b.n	8001ed2 <UART_SetConfig+0xbe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001eb6:	2080      	movs	r0, #128	; 0x80
 8001eb8:	0100      	lsls	r0, r0, #4
 8001eba:	4283      	cmp	r3, r0
 8001ebc:	d00e      	beq.n	8001edc <UART_SetConfig+0xc8>
 8001ebe:	428b      	cmp	r3, r1
 8001ec0:	d1f7      	bne.n	8001eb2 <UART_SetConfig+0x9e>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001ec2:	2080      	movs	r0, #128	; 0x80
 8001ec4:	0200      	lsls	r0, r0, #8
 8001ec6:	e00d      	b.n	8001ee4 <UART_SetConfig+0xd0>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001ec8:	f7ff f86c 	bl	8000fa4 <HAL_RCC_GetPCLK1Freq>
 8001ecc:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 8001ece:	42a8      	cmp	r0, r5
 8001ed0:	d108      	bne.n	8001ee4 <UART_SetConfig+0xd0>
  huart->RxISR = NULL;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 8001ed6:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001ed8:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001edc:	6813      	ldr	r3, [r2, #0]
 8001ede:	06db      	lsls	r3, r3, #27
 8001ee0:	d520      	bpl.n	8001f24 <UART_SetConfig+0x110>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8001ee2:	4854      	ldr	r0, [pc, #336]	; (8002034 <UART_SetConfig+0x220>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	6863      	ldr	r3, [r4, #4]
 8001ee8:	435a      	muls	r2, r3
 8001eea:	4282      	cmp	r2, r0
 8001eec:	d8e1      	bhi.n	8001eb2 <UART_SetConfig+0x9e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001eee:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001ef0:	4282      	cmp	r2, r0
 8001ef2:	d3de      	bcc.n	8001eb2 <UART_SetConfig+0x9e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8001ef4:	2700      	movs	r7, #0
 8001ef6:	0e02      	lsrs	r2, r0, #24
 8001ef8:	0201      	lsls	r1, r0, #8
 8001efa:	085e      	lsrs	r6, r3, #1
 8001efc:	1989      	adds	r1, r1, r6
 8001efe:	417a      	adcs	r2, r7
 8001f00:	0008      	movs	r0, r1
 8001f02:	0011      	movs	r1, r2
 8001f04:	001a      	movs	r2, r3
 8001f06:	003b      	movs	r3, r7
 8001f08:	f7fe f99e 	bl	8000248 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001f0c:	4b4a      	ldr	r3, [pc, #296]	; (8002038 <UART_SetConfig+0x224>)
 8001f0e:	18c2      	adds	r2, r0, r3
 8001f10:	4b4a      	ldr	r3, [pc, #296]	; (800203c <UART_SetConfig+0x228>)
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d8cd      	bhi.n	8001eb2 <UART_SetConfig+0x9e>
          huart->Instance->BRR = usartdiv;
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	003d      	movs	r5, r7
 8001f1a:	60d8      	str	r0, [r3, #12]
 8001f1c:	e7d9      	b.n	8001ed2 <UART_SetConfig+0xbe>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001f1e:	f7fe fcc9 	bl	80008b4 <HAL_RCC_GetSysClockFreq>
        break;
 8001f22:	e7d3      	b.n	8001ecc <UART_SetConfig+0xb8>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001f24:	4846      	ldr	r0, [pc, #280]	; (8002040 <UART_SetConfig+0x22c>)
 8001f26:	e7dd      	b.n	8001ee4 <UART_SetConfig+0xd0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f28:	f7ff f83c 	bl	8000fa4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f2c:	6863      	ldr	r3, [r4, #4]
 8001f2e:	0040      	lsls	r0, r0, #1
 8001f30:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f32:	18c0      	adds	r0, r0, r3
 8001f34:	6861      	ldr	r1, [r4, #4]
 8001f36:	e00b      	b.n	8001f50 <UART_SetConfig+0x13c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f38:	f7ff f844 	bl	8000fc4 <HAL_RCC_GetPCLK2Freq>
 8001f3c:	e7f6      	b.n	8001f2c <UART_SetConfig+0x118>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f3e:	2510      	movs	r5, #16
 8001f40:	4b38      	ldr	r3, [pc, #224]	; (8002024 <UART_SetConfig+0x210>)
 8001f42:	6861      	ldr	r1, [r4, #4]
 8001f44:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001f46:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f48:	4015      	ands	r5, r2
 8001f4a:	d006      	beq.n	8001f5a <UART_SetConfig+0x146>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001f4c:	4b3d      	ldr	r3, [pc, #244]	; (8002044 <UART_SetConfig+0x230>)
 8001f4e:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f50:	f7fe f8ee 	bl	8000130 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f54:	2500      	movs	r5, #0
 8001f56:	b283      	uxth	r3, r0
        break;
 8001f58:	e004      	b.n	8001f64 <UART_SetConfig+0x150>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001f5a:	4b3b      	ldr	r3, [pc, #236]	; (8002048 <UART_SetConfig+0x234>)
 8001f5c:	18c0      	adds	r0, r0, r3
 8001f5e:	f7fe f8e7 	bl	8000130 <__udivsi3>
 8001f62:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f64:	0019      	movs	r1, r3
 8001f66:	4839      	ldr	r0, [pc, #228]	; (800204c <UART_SetConfig+0x238>)
 8001f68:	3910      	subs	r1, #16
 8001f6a:	4281      	cmp	r1, r0
 8001f6c:	d8a1      	bhi.n	8001eb2 <UART_SetConfig+0x9e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f6e:	210f      	movs	r1, #15
 8001f70:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f72:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f74:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f76:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8001f78:	6821      	ldr	r1, [r4, #0]
 8001f7a:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 8001f7c:	60cb      	str	r3, [r1, #12]
 8001f7e:	e7a8      	b.n	8001ed2 <UART_SetConfig+0xbe>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f80:	f7fe fc98 	bl	80008b4 <HAL_RCC_GetSysClockFreq>
 8001f84:	e7d2      	b.n	8001f2c <UART_SetConfig+0x118>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f86:	6863      	ldr	r3, [r4, #4]
 8001f88:	0858      	lsrs	r0, r3, #1
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	025b      	lsls	r3, r3, #9
 8001f8e:	e7d0      	b.n	8001f32 <UART_SetConfig+0x11e>
        ret = HAL_ERROR;
 8001f90:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e7e6      	b.n	8001f64 <UART_SetConfig+0x150>
    switch (clocksource)
 8001f96:	2808      	cmp	r0, #8
 8001f98:	d837      	bhi.n	800200a <UART_SetConfig+0x1f6>
 8001f9a:	f7fe f8bf 	bl	800011c <__gnu_thumb1_case_uqi>
 8001f9e:	0c05      	.short	0x0c05
 8001fa0:	362a360f 	.word	0x362a360f
 8001fa4:	3636      	.short	0x3636
 8001fa6:	2d          	.byte	0x2d
 8001fa7:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001fa8:	f7fe fffc 	bl	8000fa4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001fac:	6863      	ldr	r3, [r4, #4]
 8001fae:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001fb0:	18c0      	adds	r0, r0, r3
 8001fb2:	6861      	ldr	r1, [r4, #4]
 8001fb4:	e00b      	b.n	8001fce <UART_SetConfig+0x1ba>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001fb6:	f7ff f805 	bl	8000fc4 <HAL_RCC_GetPCLK2Freq>
 8001fba:	e7f7      	b.n	8001fac <UART_SetConfig+0x198>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fbc:	2510      	movs	r5, #16
 8001fbe:	4b19      	ldr	r3, [pc, #100]	; (8002024 <UART_SetConfig+0x210>)
 8001fc0:	6861      	ldr	r1, [r4, #4]
 8001fc2:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001fc4:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fc6:	4015      	ands	r5, r2
 8001fc8:	d00d      	beq.n	8001fe6 <UART_SetConfig+0x1d2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001fca:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <UART_SetConfig+0x220>)
 8001fcc:	18c0      	adds	r0, r0, r3
 8001fce:	f7fe f8af 	bl	8000130 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fd2:	2500      	movs	r5, #0
 8001fd4:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fd6:	0019      	movs	r1, r3
 8001fd8:	481c      	ldr	r0, [pc, #112]	; (800204c <UART_SetConfig+0x238>)
 8001fda:	3910      	subs	r1, #16
 8001fdc:	4281      	cmp	r1, r0
 8001fde:	d900      	bls.n	8001fe2 <UART_SetConfig+0x1ce>
 8001fe0:	e767      	b.n	8001eb2 <UART_SetConfig+0x9e>
      huart->Instance->BRR = usartdiv;
 8001fe2:	6821      	ldr	r1, [r4, #0]
 8001fe4:	e7ca      	b.n	8001f7c <UART_SetConfig+0x168>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001fe6:	4b16      	ldr	r3, [pc, #88]	; (8002040 <UART_SetConfig+0x22c>)
 8001fe8:	18c0      	adds	r0, r0, r3
 8001fea:	f7fe f8a1 	bl	8000130 <__udivsi3>
 8001fee:	b283      	uxth	r3, r0
 8001ff0:	e7f1      	b.n	8001fd6 <UART_SetConfig+0x1c2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ff2:	f7fe fc5f 	bl	80008b4 <HAL_RCC_GetSysClockFreq>
 8001ff6:	e7d9      	b.n	8001fac <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001ff8:	6863      	ldr	r3, [r4, #4]
 8001ffa:	0858      	lsrs	r0, r3, #1
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	021b      	lsls	r3, r3, #8
 8002000:	e7d6      	b.n	8001fb0 <UART_SetConfig+0x19c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	4299      	cmp	r1, r3
 8002008:	d0c2      	beq.n	8001f90 <UART_SetConfig+0x17c>
        ret = HAL_ERROR;
 800200a:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 800200c:	2300      	movs	r3, #0
 800200e:	e7e2      	b.n	8001fd6 <UART_SetConfig+0x1c2>
 8002010:	efff69f3 	.word	0xefff69f3
 8002014:	ffffcfff 	.word	0xffffcfff
 8002018:	40004800 	.word	0x40004800
 800201c:	fffff4ff 	.word	0xfffff4ff
 8002020:	40013800 	.word	0x40013800
 8002024:	40021000 	.word	0x40021000
 8002028:	08003331 	.word	0x08003331
 800202c:	40004400 	.word	0x40004400
 8002030:	08003335 	.word	0x08003335
 8002034:	003d0900 	.word	0x003d0900
 8002038:	fffffd00 	.word	0xfffffd00
 800203c:	000ffcff 	.word	0x000ffcff
 8002040:	00f42400 	.word	0x00f42400
 8002044:	007a1200 	.word	0x007a1200
 8002048:	01e84800 	.word	0x01e84800
 800204c:	0000ffef 	.word	0x0000ffef

08002050 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002050:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002052:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002054:	07da      	lsls	r2, r3, #31
 8002056:	d506      	bpl.n	8002066 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002058:	6801      	ldr	r1, [r0, #0]
 800205a:	4c28      	ldr	r4, [pc, #160]	; (80020fc <UART_AdvFeatureConfig+0xac>)
 800205c:	684a      	ldr	r2, [r1, #4]
 800205e:	4022      	ands	r2, r4
 8002060:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002062:	4322      	orrs	r2, r4
 8002064:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002066:	079a      	lsls	r2, r3, #30
 8002068:	d506      	bpl.n	8002078 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800206a:	6801      	ldr	r1, [r0, #0]
 800206c:	4c24      	ldr	r4, [pc, #144]	; (8002100 <UART_AdvFeatureConfig+0xb0>)
 800206e:	684a      	ldr	r2, [r1, #4]
 8002070:	4022      	ands	r2, r4
 8002072:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002074:	4322      	orrs	r2, r4
 8002076:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002078:	075a      	lsls	r2, r3, #29
 800207a:	d506      	bpl.n	800208a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800207c:	6801      	ldr	r1, [r0, #0]
 800207e:	4c21      	ldr	r4, [pc, #132]	; (8002104 <UART_AdvFeatureConfig+0xb4>)
 8002080:	684a      	ldr	r2, [r1, #4]
 8002082:	4022      	ands	r2, r4
 8002084:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002086:	4322      	orrs	r2, r4
 8002088:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800208a:	071a      	lsls	r2, r3, #28
 800208c:	d506      	bpl.n	800209c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800208e:	6801      	ldr	r1, [r0, #0]
 8002090:	4c1d      	ldr	r4, [pc, #116]	; (8002108 <UART_AdvFeatureConfig+0xb8>)
 8002092:	684a      	ldr	r2, [r1, #4]
 8002094:	4022      	ands	r2, r4
 8002096:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002098:	4322      	orrs	r2, r4
 800209a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800209c:	06da      	lsls	r2, r3, #27
 800209e:	d506      	bpl.n	80020ae <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80020a0:	6801      	ldr	r1, [r0, #0]
 80020a2:	4c1a      	ldr	r4, [pc, #104]	; (800210c <UART_AdvFeatureConfig+0xbc>)
 80020a4:	688a      	ldr	r2, [r1, #8]
 80020a6:	4022      	ands	r2, r4
 80020a8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80020aa:	4322      	orrs	r2, r4
 80020ac:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020ae:	069a      	lsls	r2, r3, #26
 80020b0:	d506      	bpl.n	80020c0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020b2:	6801      	ldr	r1, [r0, #0]
 80020b4:	4c16      	ldr	r4, [pc, #88]	; (8002110 <UART_AdvFeatureConfig+0xc0>)
 80020b6:	688a      	ldr	r2, [r1, #8]
 80020b8:	4022      	ands	r2, r4
 80020ba:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80020bc:	4322      	orrs	r2, r4
 80020be:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020c0:	065a      	lsls	r2, r3, #25
 80020c2:	d510      	bpl.n	80020e6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020c4:	6801      	ldr	r1, [r0, #0]
 80020c6:	4d13      	ldr	r5, [pc, #76]	; (8002114 <UART_AdvFeatureConfig+0xc4>)
 80020c8:	684a      	ldr	r2, [r1, #4]
 80020ca:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80020cc:	402a      	ands	r2, r5
 80020ce:	4322      	orrs	r2, r4
 80020d0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020d2:	2280      	movs	r2, #128	; 0x80
 80020d4:	0352      	lsls	r2, r2, #13
 80020d6:	4294      	cmp	r4, r2
 80020d8:	d105      	bne.n	80020e6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020da:	684a      	ldr	r2, [r1, #4]
 80020dc:	4c0e      	ldr	r4, [pc, #56]	; (8002118 <UART_AdvFeatureConfig+0xc8>)
 80020de:	4022      	ands	r2, r4
 80020e0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80020e2:	4322      	orrs	r2, r4
 80020e4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80020e6:	061b      	lsls	r3, r3, #24
 80020e8:	d506      	bpl.n	80020f8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80020ea:	6802      	ldr	r2, [r0, #0]
 80020ec:	490b      	ldr	r1, [pc, #44]	; (800211c <UART_AdvFeatureConfig+0xcc>)
 80020ee:	6853      	ldr	r3, [r2, #4]
 80020f0:	400b      	ands	r3, r1
 80020f2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80020f4:	430b      	orrs	r3, r1
 80020f6:	6053      	str	r3, [r2, #4]
}
 80020f8:	bd30      	pop	{r4, r5, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	fffdffff 	.word	0xfffdffff
 8002100:	fffeffff 	.word	0xfffeffff
 8002104:	fffbffff 	.word	0xfffbffff
 8002108:	ffff7fff 	.word	0xffff7fff
 800210c:	ffffefff 	.word	0xffffefff
 8002110:	ffffdfff 	.word	0xffffdfff
 8002114:	ffefffff 	.word	0xffefffff
 8002118:	ff9fffff 	.word	0xff9fffff
 800211c:	fff7ffff 	.word	0xfff7ffff

08002120 <UART_WaitOnFlagUntilTimeout>:
{
 8002120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002122:	0004      	movs	r4, r0
 8002124:	000e      	movs	r6, r1
 8002126:	0015      	movs	r5, r2
 8002128:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800212a:	6822      	ldr	r2, [r4, #0]
 800212c:	69d3      	ldr	r3, [r2, #28]
 800212e:	4033      	ands	r3, r6
 8002130:	1b9b      	subs	r3, r3, r6
 8002132:	4259      	negs	r1, r3
 8002134:	414b      	adcs	r3, r1
 8002136:	42ab      	cmp	r3, r5
 8002138:	d001      	beq.n	800213e <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800213a:	2000      	movs	r0, #0
 800213c:	e01b      	b.n	8002176 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800213e:	9b06      	ldr	r3, [sp, #24]
 8002140:	3301      	adds	r3, #1
 8002142:	d0f3      	beq.n	800212c <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002144:	f7fe f9be 	bl	80004c4 <HAL_GetTick>
 8002148:	9b06      	ldr	r3, [sp, #24]
 800214a:	1bc0      	subs	r0, r0, r7
 800214c:	4283      	cmp	r3, r0
 800214e:	d301      	bcc.n	8002154 <UART_WaitOnFlagUntilTimeout+0x34>
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1ea      	bne.n	800212a <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	4908      	ldr	r1, [pc, #32]	; (8002178 <UART_WaitOnFlagUntilTimeout+0x58>)
 8002158:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 800215a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800215c:	400a      	ands	r2, r1
 800215e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	31a3      	adds	r1, #163	; 0xa3
 8002164:	31ff      	adds	r1, #255	; 0xff
 8002166:	438a      	bics	r2, r1
 8002168:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800216a:	2320      	movs	r3, #32
 800216c:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800216e:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8002170:	2300      	movs	r3, #0
 8002172:	3470      	adds	r4, #112	; 0x70
 8002174:	7023      	strb	r3, [r4, #0]
}
 8002176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002178:	fffffe5f 	.word	0xfffffe5f

0800217c <HAL_UART_Transmit>:
{
 800217c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800217e:	b087      	sub	sp, #28
 8002180:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8002182:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8002184:	0004      	movs	r4, r0
 8002186:	000d      	movs	r5, r1
 8002188:	0017      	movs	r7, r2
    return HAL_BUSY;
 800218a:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800218c:	2b20      	cmp	r3, #32
 800218e:	d149      	bne.n	8002224 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8002190:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002192:	2900      	cmp	r1, #0
 8002194:	d046      	beq.n	8002224 <HAL_UART_Transmit+0xa8>
 8002196:	2a00      	cmp	r2, #0
 8002198:	d044      	beq.n	8002224 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	68a2      	ldr	r2, [r4, #8]
 800219e:	015b      	lsls	r3, r3, #5
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d104      	bne.n	80021ae <HAL_UART_Transmit+0x32>
 80021a4:	6923      	ldr	r3, [r4, #16]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 80021aa:	4201      	tst	r1, r0
 80021ac:	d13a      	bne.n	8002224 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 80021ae:	0023      	movs	r3, r4
 80021b0:	3370      	adds	r3, #112	; 0x70
 80021b2:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80021b4:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80021b6:	2a01      	cmp	r2, #1
 80021b8:	d034      	beq.n	8002224 <HAL_UART_Transmit+0xa8>
 80021ba:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021bc:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 80021be:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021c0:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c2:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021c4:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 80021c6:	f7fe f97d 	bl	80004c4 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80021ca:	0023      	movs	r3, r4
 80021cc:	3350      	adds	r3, #80	; 0x50
 80021ce:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 80021d0:	3302      	adds	r3, #2
 80021d2:	9303      	str	r3, [sp, #12]
 80021d4:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80021da:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021dc:	015b      	lsls	r3, r3, #5
 80021de:	429a      	cmp	r2, r3
 80021e0:	d104      	bne.n	80021ec <HAL_UART_Transmit+0x70>
 80021e2:	6923      	ldr	r3, [r4, #16]
 80021e4:	42b3      	cmp	r3, r6
 80021e6:	d101      	bne.n	80021ec <HAL_UART_Transmit+0x70>
 80021e8:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80021ea:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80021ec:	0023      	movs	r3, r4
 80021ee:	3352      	adds	r3, #82	; 0x52
 80021f0:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021f2:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 80021f4:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 80021fa:	2a00      	cmp	r2, #0
 80021fc:	d10a      	bne.n	8002214 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021fe:	2140      	movs	r1, #64	; 0x40
 8002200:	0020      	movs	r0, r4
 8002202:	f7ff ff8d 	bl	8002120 <UART_WaitOnFlagUntilTimeout>
 8002206:	2800      	cmp	r0, #0
 8002208:	d10b      	bne.n	8002222 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 800220a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800220c:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 800220e:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 8002210:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002212:	e007      	b.n	8002224 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002214:	2200      	movs	r2, #0
 8002216:	2180      	movs	r1, #128	; 0x80
 8002218:	0020      	movs	r0, r4
 800221a:	f7ff ff81 	bl	8002120 <UART_WaitOnFlagUntilTimeout>
 800221e:	2800      	cmp	r0, #0
 8002220:	d002      	beq.n	8002228 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 8002222:	2003      	movs	r0, #3
}
 8002224:	b007      	add	sp, #28
 8002226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002228:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800222a:	2d00      	cmp	r5, #0
 800222c:	d10b      	bne.n	8002246 <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800222e:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8002230:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002232:	05db      	lsls	r3, r3, #23
 8002234:	0ddb      	lsrs	r3, r3, #23
 8002236:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002238:	9b03      	ldr	r3, [sp, #12]
 800223a:	9a03      	ldr	r2, [sp, #12]
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	3b01      	subs	r3, #1
 8002240:	b29b      	uxth	r3, r3
 8002242:	8013      	strh	r3, [r2, #0]
 8002244:	e7d2      	b.n	80021ec <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002246:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8002248:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800224a:	6293      	str	r3, [r2, #40]	; 0x28
 800224c:	e7f4      	b.n	8002238 <HAL_UART_Transmit+0xbc>
	...

08002250 <UART_CheckIdleState>:
{
 8002250:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002252:	2600      	movs	r6, #0
{
 8002254:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002256:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002258:	f7fe f934 	bl	80004c4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800225c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800225e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	071b      	lsls	r3, r3, #28
 8002264:	d415      	bmi.n	8002292 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002266:	6823      	ldr	r3, [r4, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	075b      	lsls	r3, r3, #29
 800226c:	d50a      	bpl.n	8002284 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800226e:	2180      	movs	r1, #128	; 0x80
 8002270:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <UART_CheckIdleState+0x5c>)
 8002272:	2200      	movs	r2, #0
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	03c9      	lsls	r1, r1, #15
 8002278:	002b      	movs	r3, r5
 800227a:	0020      	movs	r0, r4
 800227c:	f7ff ff50 	bl	8002120 <UART_WaitOnFlagUntilTimeout>
 8002280:	2800      	cmp	r0, #0
 8002282:	d111      	bne.n	80022a8 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8002284:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002286:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002288:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800228a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800228c:	3470      	adds	r4, #112	; 0x70
 800228e:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8002290:	e00b      	b.n	80022aa <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002292:	2180      	movs	r1, #128	; 0x80
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <UART_CheckIdleState+0x5c>)
 8002296:	0032      	movs	r2, r6
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	0389      	lsls	r1, r1, #14
 800229c:	0003      	movs	r3, r0
 800229e:	0020      	movs	r0, r4
 80022a0:	f7ff ff3e 	bl	8002120 <UART_WaitOnFlagUntilTimeout>
 80022a4:	2800      	cmp	r0, #0
 80022a6:	d0de      	beq.n	8002266 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80022a8:	2003      	movs	r0, #3
}
 80022aa:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80022ac:	01ffffff 	.word	0x01ffffff

080022b0 <HAL_UART_Init>:
{
 80022b0:	b510      	push	{r4, lr}
 80022b2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80022b4:	d101      	bne.n	80022ba <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80022b6:	2001      	movs	r0, #1
}
 80022b8:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80022ba:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d104      	bne.n	80022ca <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80022c0:	0002      	movs	r2, r0
 80022c2:	3270      	adds	r2, #112	; 0x70
 80022c4:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80022c6:	f000 ff23 	bl	8003110 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80022ca:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80022cc:	2101      	movs	r1, #1
 80022ce:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80022d0:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80022d2:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022d4:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80022d6:	438b      	bics	r3, r1
 80022d8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022da:	f7ff fd9b 	bl	8001e14 <UART_SetConfig>
 80022de:	2801      	cmp	r0, #1
 80022e0:	d0e9      	beq.n	80022b6 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80022e8:	0020      	movs	r0, r4
 80022ea:	f7ff feb1 	bl	8002050 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ee:	6823      	ldr	r3, [r4, #0]
 80022f0:	4907      	ldr	r1, [pc, #28]	; (8002310 <HAL_UART_Init+0x60>)
 80022f2:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80022f4:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022f6:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f8:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	438a      	bics	r2, r1
 8002300:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002302:	2201      	movs	r2, #1
 8002304:	6819      	ldr	r1, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800230a:	f7ff ffa1 	bl	8002250 <UART_CheckIdleState>
 800230e:	e7d3      	b.n	80022b8 <HAL_UART_Init+0x8>
 8002310:	ffffb7ff 	.word	0xffffb7ff

08002314 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002314:	4770      	bx	lr
	...

08002318 <GPS_INIT>:
uint8_t GPS_5HZ[] = "$PMTK220,200*2C\r\n";
uint8_t GPS_10HZ[] = "$PMTK220,100*2F\r\n";
uint8_t GPS_STANDBY[] = "$PMTK161,0*28\r\n";

void GPS_INIT(void)
{
 8002318:	b570      	push	{r4, r5, r6, lr}
	  HAL_UART_Transmit(&huart1, GPS_BAUDRATE, sizeof(GPS_BAUDRATE), 1000); //set baud rate
 800231a:	25fa      	movs	r5, #250	; 0xfa
 800231c:	4c0a      	ldr	r4, [pc, #40]	; (8002348 <GPS_INIT+0x30>)
 800231e:	00ad      	lsls	r5, r5, #2
 8002320:	002b      	movs	r3, r5
 8002322:	2213      	movs	r2, #19
 8002324:	4909      	ldr	r1, [pc, #36]	; (800234c <GPS_INIT+0x34>)
 8002326:	0020      	movs	r0, r4
 8002328:	f7ff ff28 	bl	800217c <HAL_UART_Transmit>
	  //HAL_UART_Transmit(&huart1, GPS_FIXRATE, sizeof(GPS_FIXRATE), 1000); //set fix rate
	  HAL_UART_Transmit(&huart1, GPS_1HZ, sizeof(GPS_1HZ), 1000); //set frequency
 800232c:	002b      	movs	r3, r5
 800232e:	2213      	movs	r2, #19
 8002330:	4907      	ldr	r1, [pc, #28]	; (8002350 <GPS_INIT+0x38>)
 8002332:	0020      	movs	r0, r4
 8002334:	f7ff ff22 	bl	800217c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, GPS_GGA, sizeof(GPS_GGA), 1000); //set sentence format
 8002338:	002b      	movs	r3, r5
 800233a:	2234      	movs	r2, #52	; 0x34
 800233c:	4905      	ldr	r1, [pc, #20]	; (8002354 <GPS_INIT+0x3c>)
 800233e:	0020      	movs	r0, r4
 8002340:	f7ff ff1c 	bl	800217c <HAL_UART_Transmit>
}
 8002344:	bd70      	pop	{r4, r5, r6, pc}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	2000077c 	.word	0x2000077c
 800234c:	20000013 	.word	0x20000013
 8002350:	20000000 	.word	0x20000000
 8002354:	20000026 	.word	0x20000026

08002358 <parseData>:

uint8_t parseData(void)
{
 8002358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char string[7];
	int commaCnt = 0;
	int i = 0;
	int j = 0;

	memcpy(string, data, 6);
 800235a:	4933      	ldr	r1, [pc, #204]	; (8002428 <parseData+0xd0>)
 800235c:	2206      	movs	r2, #6
 800235e:	4668      	mov	r0, sp
 8002360:	f000 ffae 	bl	80032c0 <memcpy>

	if(!strcmp(string, "$GPGGA"))
 8002364:	4931      	ldr	r1, [pc, #196]	; (800242c <parseData+0xd4>)
 8002366:	4668      	mov	r0, sp
 8002368:	f7fd fece 	bl	8000108 <strcmp>
 800236c:	2800      	cmp	r0, #0
 800236e:	d001      	beq.n	8002374 <parseData+0x1c>
		}

	}
	else
	{
		return 0;
 8002370:	2000      	movs	r0, #0
	strcat(sendMeasurements, longDir);
	strcat(sendMeasurements, ",");
	strcat(sendMeasurements, fix);

	return 1;
}
 8002372:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if(!strcmp(string, "$GPGGA"))
 8002374:	0003      	movs	r3, r0
 8002376:	492e      	ldr	r1, [pc, #184]	; (8002430 <parseData+0xd8>)
					longDir[j] = data[i];
 8002378:	4d2e      	ldr	r5, [pc, #184]	; (8002434 <parseData+0xdc>)
					longitude[j] = data[i];
 800237a:	4e2f      	ldr	r6, [pc, #188]	; (8002438 <parseData+0xe0>)
					latDir[j] = data[i];
 800237c:	4f2f      	ldr	r7, [pc, #188]	; (800243c <parseData+0xe4>)
		while(data[i] != '\n')
 800237e:	780a      	ldrb	r2, [r1, #0]
 8002380:	2a0a      	cmp	r2, #10
 8002382:	d01c      	beq.n	80023be <parseData+0x66>
			if (data[i] == ',')
 8002384:	2a2c      	cmp	r2, #44	; 0x2c
 8002386:	d103      	bne.n	8002390 <parseData+0x38>
				j = 0; //reset counter for parsing
 8002388:	2000      	movs	r0, #0
				commaCnt++; //increase number of commas found
 800238a:	3301      	adds	r3, #1
 800238c:	3101      	adds	r1, #1
 800238e:	e7f6      	b.n	800237e <parseData+0x26>
					latitude[j] = data[i];
 8002390:	4c2b      	ldr	r4, [pc, #172]	; (8002440 <parseData+0xe8>)
				if(commaCnt == 2) //latitude
 8002392:	2b02      	cmp	r3, #2
 8002394:	d00f      	beq.n	80023b6 <parseData+0x5e>
				else if(commaCnt == 3) //latitude direction
 8002396:	2b03      	cmp	r3, #3
 8002398:	d102      	bne.n	80023a0 <parseData+0x48>
					latDir[j] = data[i];
 800239a:	543a      	strb	r2, [r7, r0]
					j++;
 800239c:	3001      	adds	r0, #1
 800239e:	e7f5      	b.n	800238c <parseData+0x34>
				else if(commaCnt == 4) //longitude
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d101      	bne.n	80023a8 <parseData+0x50>
					longitude[j] = data[i];
 80023a4:	5432      	strb	r2, [r6, r0]
 80023a6:	e7f9      	b.n	800239c <parseData+0x44>
				else if(commaCnt == 5) //longitude direction
 80023a8:	2b05      	cmp	r3, #5
 80023aa:	d101      	bne.n	80023b0 <parseData+0x58>
					longDir[j] = data[i];
 80023ac:	542a      	strb	r2, [r5, r0]
 80023ae:	e7f5      	b.n	800239c <parseData+0x44>
				else if(commaCnt == 6)
 80023b0:	2b06      	cmp	r3, #6
 80023b2:	d102      	bne.n	80023ba <parseData+0x62>
					fix[j] = data[i];
 80023b4:	4c23      	ldr	r4, [pc, #140]	; (8002444 <parseData+0xec>)
 80023b6:	5422      	strb	r2, [r4, r0]
 80023b8:	e7f0      	b.n	800239c <parseData+0x44>
				else if (commaCnt >= 7)
 80023ba:	2b06      	cmp	r3, #6
 80023bc:	dde6      	ble.n	800238c <parseData+0x34>
		if(fix[0] == '0') //no fix
 80023be:	4e21      	ldr	r6, [pc, #132]	; (8002444 <parseData+0xec>)
 80023c0:	7833      	ldrb	r3, [r6, #0]
 80023c2:	2b30      	cmp	r3, #48	; 0x30
 80023c4:	d0d4      	beq.n	8002370 <parseData+0x18>
	latitude[9] = '\0';
 80023c6:	2300      	movs	r3, #0
	longitude[10] = '\0';
 80023c8:	4a1b      	ldr	r2, [pc, #108]	; (8002438 <parseData+0xe0>)
	strcpy(sendMeasurements, latitude);
 80023ca:	4c1f      	ldr	r4, [pc, #124]	; (8002448 <parseData+0xf0>)
	longitude[10] = '\0';
 80023cc:	7293      	strb	r3, [r2, #10]
	latitude[9] = '\0';
 80023ce:	491c      	ldr	r1, [pc, #112]	; (8002440 <parseData+0xe8>)
	longDir[1] = '\0';
 80023d0:	4a18      	ldr	r2, [pc, #96]	; (8002434 <parseData+0xdc>)
	latDir[1] = '\0';
 80023d2:	4f1a      	ldr	r7, [pc, #104]	; (800243c <parseData+0xe4>)
	strcpy(sendMeasurements, latitude);
 80023d4:	0020      	movs	r0, r4
	latitude[9] = '\0';
 80023d6:	724b      	strb	r3, [r1, #9]
	latDir[1] = '\0';
 80023d8:	707b      	strb	r3, [r7, #1]
	longDir[1] = '\0';
 80023da:	7053      	strb	r3, [r2, #1]
	fix[1] = '\0';
 80023dc:	7073      	strb	r3, [r6, #1]
	strcpy(sendMeasurements, latitude);
 80023de:	f000 ff8d 	bl	80032fc <strcpy>
	strcat(sendMeasurements, ",");
 80023e2:	4d1a      	ldr	r5, [pc, #104]	; (800244c <parseData+0xf4>)
 80023e4:	0020      	movs	r0, r4
 80023e6:	0029      	movs	r1, r5
 80023e8:	f000 ff7b 	bl	80032e2 <strcat>
	strcat(sendMeasurements, latDir);
 80023ec:	0039      	movs	r1, r7
 80023ee:	0020      	movs	r0, r4
 80023f0:	f000 ff77 	bl	80032e2 <strcat>
	strcat(sendMeasurements, ",");
 80023f4:	0029      	movs	r1, r5
 80023f6:	0020      	movs	r0, r4
 80023f8:	f000 ff73 	bl	80032e2 <strcat>
	strcat(sendMeasurements, longitude);
 80023fc:	490e      	ldr	r1, [pc, #56]	; (8002438 <parseData+0xe0>)
 80023fe:	0020      	movs	r0, r4
 8002400:	f000 ff6f 	bl	80032e2 <strcat>
	strcat(sendMeasurements, ",");
 8002404:	0029      	movs	r1, r5
 8002406:	0020      	movs	r0, r4
 8002408:	f000 ff6b 	bl	80032e2 <strcat>
	strcat(sendMeasurements, longDir);
 800240c:	4909      	ldr	r1, [pc, #36]	; (8002434 <parseData+0xdc>)
 800240e:	0020      	movs	r0, r4
 8002410:	f000 ff67 	bl	80032e2 <strcat>
	strcat(sendMeasurements, ",");
 8002414:	0029      	movs	r1, r5
 8002416:	0020      	movs	r0, r4
 8002418:	f000 ff63 	bl	80032e2 <strcat>
	strcat(sendMeasurements, fix);
 800241c:	0031      	movs	r1, r6
 800241e:	0020      	movs	r0, r4
 8002420:	f000 ff5f 	bl	80032e2 <strcat>
	return 1;
 8002424:	2001      	movs	r0, #1
 8002426:	e7a4      	b.n	8002372 <parseData+0x1a>
 8002428:	20000581 	.word	0x20000581
 800242c:	08003342 	.word	0x08003342
 8002430:	20000587 	.word	0x20000587
 8002434:	200008f8 	.word	0x200008f8
 8002438:	20000849 	.word	0x20000849
 800243c:	200008fa 	.word	0x200008fa
 8002440:	20000856 	.word	0x20000856
 8002444:	20000854 	.word	0x20000854
 8002448:	2000082e 	.word	0x2000082e
 800244c:	08003349 	.word	0x08003349

08002450 <writeReg>:



//Function for writing to a register
void writeReg(uint8_t addr, uint8_t value)
{
 8002450:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t reg = addr | 0x80;
 8002452:	466b      	mov	r3, sp
 8002454:	1d9d      	adds	r5, r3, #6
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	425b      	negs	r3, r3
 800245a:	4318      	orrs	r0, r3
	uint8_t val = value;
 800245c:	466b      	mov	r3, sp
	uint8_t reg = addr | 0x80;
 800245e:	7028      	strb	r0, [r5, #0]
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); //pull NSS low to start frame
 8002460:	20a0      	movs	r0, #160	; 0xa0
	uint8_t val = value;
 8002462:	1dde      	adds	r6, r3, #7
 8002464:	7031      	strb	r1, [r6, #0]
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); //pull NSS low to start frame
 8002466:	2200      	movs	r2, #0
 8002468:	2110      	movs	r1, #16
 800246a:	05c0      	lsls	r0, r0, #23
 800246c:	f7fe f970 	bl	8000750 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, (uint16_t)sizeof(reg), 1000);
 8002470:	23fa      	movs	r3, #250	; 0xfa
 8002472:	4c0f      	ldr	r4, [pc, #60]	; (80024b0 <writeReg+0x60>)
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	2201      	movs	r2, #1
 8002478:	0029      	movs	r1, r5
 800247a:	0020      	movs	r0, r4
 800247c:	f7fe ff5c 	bl	8001338 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002480:	0020      	movs	r0, r4
 8002482:	f7ff f9ad 	bl	80017e0 <HAL_SPI_GetState>
 8002486:	0002      	movs	r2, r0
 8002488:	2801      	cmp	r0, #1
 800248a:	d1f9      	bne.n	8002480 <writeReg+0x30>
	HAL_SPI_Transmit(&hspi1, &val, (uint16_t)sizeof(val), 1000);
 800248c:	23fa      	movs	r3, #250	; 0xfa
 800248e:	0031      	movs	r1, r6
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	0020      	movs	r0, r4
 8002494:	f7fe ff50 	bl	8001338 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002498:	0020      	movs	r0, r4
 800249a:	f7ff f9a1 	bl	80017e0 <HAL_SPI_GetState>
 800249e:	0002      	movs	r2, r0
 80024a0:	2801      	cmp	r0, #1
 80024a2:	d1f9      	bne.n	8002498 <writeReg+0x48>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET); //pull NSS high to end frame
 80024a4:	20a0      	movs	r0, #160	; 0xa0
 80024a6:	2110      	movs	r1, #16
 80024a8:	05c0      	lsls	r0, r0, #23
 80024aa:	f7fe f951 	bl	8000750 <HAL_GPIO_WritePin>
}
 80024ae:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 80024b0:	20000860 	.word	0x20000860

080024b4 <readReg>:

//Function for reading from a register
uint8_t readReg(uint8_t addr)
{
	uint8_t reg = addr & ~0x80;
 80024b4:	237f      	movs	r3, #127	; 0x7f
{
 80024b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t data = 0;
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); //pull NSS low to start frame
 80024b8:	25a0      	movs	r5, #160	; 0xa0
	uint8_t reg = addr & ~0x80;
 80024ba:	4018      	ands	r0, r3
 80024bc:	466b      	mov	r3, sp
	uint8_t data = 0;
 80024be:	2200      	movs	r2, #0
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); //pull NSS low to start frame
 80024c0:	05ed      	lsls	r5, r5, #23
	uint8_t reg = addr & ~0x80;
 80024c2:	7198      	strb	r0, [r3, #6]
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); //pull NSS low to start frame
 80024c4:	2110      	movs	r1, #16
 80024c6:	0028      	movs	r0, r5
	//HAL_SPI_TransmitReceive(&hspi1, &reg, &data, 1, 1000);
	HAL_SPI_Transmit(&hspi1, &reg, sizeof(reg), 1000); //send a read command from that address
 80024c8:	27fa      	movs	r7, #250	; 0xfa
	uint8_t data = 0;
 80024ca:	1ddc      	adds	r4, r3, #7
 80024cc:	71da      	strb	r2, [r3, #7]
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); //pull NSS low to start frame
 80024ce:	f7fe f93f 	bl	8000750 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, sizeof(reg), 1000); //send a read command from that address
 80024d2:	4669      	mov	r1, sp
 80024d4:	4e0a      	ldr	r6, [pc, #40]	; (8002500 <readReg+0x4c>)
 80024d6:	00bf      	lsls	r7, r7, #2
 80024d8:	003b      	movs	r3, r7
 80024da:	0030      	movs	r0, r6
 80024dc:	2201      	movs	r2, #1
 80024de:	3106      	adds	r1, #6
 80024e0:	f7fe ff2a 	bl	8001338 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &data, sizeof(data), 1000);
 80024e4:	003b      	movs	r3, r7
 80024e6:	0021      	movs	r1, r4
 80024e8:	0030      	movs	r0, r6
 80024ea:	2201      	movs	r2, #1
 80024ec:	f7ff f8d2 	bl	8001694 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET); //pull NSS high to end frame
 80024f0:	0028      	movs	r0, r5
 80024f2:	2201      	movs	r2, #1
 80024f4:	2110      	movs	r1, #16
 80024f6:	f7fe f92b 	bl	8000750 <HAL_GPIO_WritePin>
	return data;
 80024fa:	7820      	ldrb	r0, [r4, #0]
}
 80024fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	20000860 	.word	0x20000860

08002504 <readFIFO>:

//Function for reading from FIFO
void readFIFO(uint8_t buff[], uint16_t size)
{
 8002504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002506:	0006      	movs	r6, r0
	uint8_t reg = RH_RF95_REG_00_FIFO & ~0x80;
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); //pull NSS low to start frame
 8002508:	20a0      	movs	r0, #160	; 0xa0
	uint8_t reg = RH_RF95_REG_00_FIFO & ~0x80;
 800250a:	466b      	mov	r3, sp
 800250c:	2200      	movs	r2, #0
{
 800250e:	000f      	movs	r7, r1
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); //pull NSS low to start frame
 8002510:	05c0      	lsls	r0, r0, #23
 8002512:	2110      	movs	r1, #16
	uint8_t reg = RH_RF95_REG_00_FIFO & ~0x80;
 8002514:	1ddd      	adds	r5, r3, #7
 8002516:	71da      	strb	r2, [r3, #7]
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); //pull NSS low to start frame
 8002518:	f7fe f91a 	bl	8000750 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, sizeof(reg), 1000); //send a read command from that address
 800251c:	23fa      	movs	r3, #250	; 0xfa
 800251e:	4c0d      	ldr	r4, [pc, #52]	; (8002554 <readFIFO+0x50>)
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	2201      	movs	r2, #1
 8002524:	0029      	movs	r1, r5
 8002526:	0020      	movs	r0, r4
 8002528:	f7fe ff06 	bl	8001338 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buff, size, 1000);
 800252c:	23fa      	movs	r3, #250	; 0xfa
 800252e:	003a      	movs	r2, r7
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	0031      	movs	r1, r6
 8002534:	0020      	movs	r0, r4
 8002536:	f7ff f8ad 	bl	8001694 <HAL_SPI_Receive>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800253a:	0020      	movs	r0, r4
 800253c:	f7ff f950 	bl	80017e0 <HAL_SPI_GetState>
 8002540:	0002      	movs	r2, r0
 8002542:	2801      	cmp	r0, #1
 8002544:	d1f9      	bne.n	800253a <readFIFO+0x36>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET); //pull NSS high to end frame
 8002546:	20a0      	movs	r0, #160	; 0xa0
 8002548:	2110      	movs	r1, #16
 800254a:	05c0      	lsls	r0, r0, #23
 800254c:	f7fe f900 	bl	8000750 <HAL_GPIO_WritePin>
}
 8002550:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	20000860 	.word	0x20000860

08002558 <receiveData>:

//Function for reading from a register
void receiveData()
{
	writeReg(RH_RF95_REG_01_OP_MODE, 0x01);
 8002558:	2101      	movs	r1, #1
{
 800255a:	b510      	push	{r4, lr}
	writeReg(RH_RF95_REG_01_OP_MODE, 0x01);
 800255c:	0008      	movs	r0, r1
 800255e:	f7ff ff77 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_12_IRQ_FLAGS, 0xFF);
 8002562:	21ff      	movs	r1, #255	; 0xff
 8002564:	2012      	movs	r0, #18
 8002566:	f7ff ff73 	bl	8002450 <writeReg>

	if (readReg(RH_RF95_REG_12_IRQ_FLAGS) == 0x00)
 800256a:	2012      	movs	r0, #18
 800256c:	f7ff ffa2 	bl	80024b4 <readReg>
 8002570:	1e04      	subs	r4, r0, #0
 8002572:	d111      	bne.n	8002598 <receiveData+0x40>
	{
		writeReg(RH_RF95_REG_0D_FIFO_ADDR_PTR, readReg(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR)); //fifo addr ptr = fifo rx current addr
 8002574:	2010      	movs	r0, #16
 8002576:	f7ff ff9d 	bl	80024b4 <readReg>
 800257a:	0001      	movs	r1, r0
 800257c:	200d      	movs	r0, #13
 800257e:	f7ff ff67 	bl	8002450 <writeReg>
		uint8_t bytesLimit = readReg(RH_RF95_REG_13_RX_NB_BYTES);
 8002582:	2013      	movs	r0, #19
 8002584:	f7ff ff96 	bl	80024b4 <readReg>
		//HAL_Delay(10);
		readFIFO(receive, (uint16_t) bytesLimit);
 8002588:	b281      	uxth	r1, r0
 800258a:	4808      	ldr	r0, [pc, #32]	; (80025ac <receiveData+0x54>)
 800258c:	f7ff ffba 	bl	8002504 <readFIFO>
		writeReg(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0x00);
 8002590:	0021      	movs	r1, r4
 8002592:	200d      	movs	r0, #13
 8002594:	f7ff ff5c 	bl	8002450 <writeReg>
	}

	writeReg(RH_RF95_REG_01_OP_MODE, 0x05);
 8002598:	2105      	movs	r1, #5
 800259a:	2001      	movs	r0, #1
 800259c:	f7ff ff58 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_40_DIO_MAPPING1, 0x00);
 80025a0:	2100      	movs	r1, #0
 80025a2:	2040      	movs	r0, #64	; 0x40
 80025a4:	f7ff ff54 	bl	8002450 <writeReg>
}
 80025a8:	bd10      	pop	{r4, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	20000684 	.word	0x20000684

080025b0 <writeReg_Burst>:

//Function to burst write (primarily for FIFO)
void writeReg_Burst(uint8_t addr, uint8_t data[], uint8_t length)
{
 80025b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025b2:	b085      	sub	sp, #20
	uint8_t reg = addr | 0x80;
 80025b4:	ab02      	add	r3, sp, #8
 80025b6:	1d9c      	adds	r4, r3, #6
 80025b8:	2380      	movs	r3, #128	; 0x80
{
 80025ba:	9201      	str	r2, [sp, #4]
	uint8_t val = 0;
 80025bc:	2200      	movs	r2, #0
	uint8_t reg = addr | 0x80;
 80025be:	425b      	negs	r3, r3
 80025c0:	4318      	orrs	r0, r3
	uint8_t val = 0;
 80025c2:	ab02      	add	r3, sp, #8
 80025c4:	1dde      	adds	r6, r3, #7
	if (length >= 1)
 80025c6:	9b01      	ldr	r3, [sp, #4]
{
 80025c8:	000f      	movs	r7, r1
	uint8_t reg = addr | 0x80;
 80025ca:	7020      	strb	r0, [r4, #0]
	uint8_t val = 0;
 80025cc:	7032      	strb	r2, [r6, #0]
	if (length >= 1)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d01c      	beq.n	800260c <writeReg_Burst+0x5c>
	{
		HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); //pull NSS low to start frame
 80025d2:	20a0      	movs	r0, #160	; 0xa0
 80025d4:	2110      	movs	r1, #16
 80025d6:	05c0      	lsls	r0, r0, #23
 80025d8:	f7fe f8ba 	bl	8000750 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &reg, (uint16_t)sizeof(reg), 1000);
 80025dc:	23fa      	movs	r3, #250	; 0xfa
 80025de:	4d14      	ldr	r5, [pc, #80]	; (8002630 <writeReg_Burst+0x80>)
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	2201      	movs	r2, #1
 80025e4:	0021      	movs	r1, r4
 80025e6:	0028      	movs	r0, r5
 80025e8:	f7fe fea6 	bl	8001338 <HAL_SPI_Transmit>
		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80025ec:	0028      	movs	r0, r5
 80025ee:	f7ff f8f7 	bl	80017e0 <HAL_SPI_GetState>
 80025f2:	2801      	cmp	r0, #1
 80025f4:	d1fa      	bne.n	80025ec <writeReg_Burst+0x3c>
 80025f6:	003c      	movs	r4, r7
		for(int i = 0; i <= (length - 1); i++)
 80025f8:	9a01      	ldr	r2, [sp, #4]
 80025fa:	1be3      	subs	r3, r4, r7
 80025fc:	429a      	cmp	r2, r3
 80025fe:	dc07      	bgt.n	8002610 <writeReg_Burst+0x60>
			val = data[i];
			HAL_SPI_Transmit(&hspi1, &val, (uint16_t)sizeof(val), 1000);
			while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
		}

		HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET); //pull NSS high to end frame
 8002600:	20a0      	movs	r0, #160	; 0xa0
 8002602:	2201      	movs	r2, #1
 8002604:	2110      	movs	r1, #16
 8002606:	05c0      	lsls	r0, r0, #23
 8002608:	f7fe f8a2 	bl	8000750 <HAL_GPIO_WritePin>
	}
}
 800260c:	b005      	add	sp, #20
 800260e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			val = data[i];
 8002610:	7823      	ldrb	r3, [r4, #0]
			HAL_SPI_Transmit(&hspi1, &val, (uint16_t)sizeof(val), 1000);
 8002612:	2201      	movs	r2, #1
			val = data[i];
 8002614:	7033      	strb	r3, [r6, #0]
			HAL_SPI_Transmit(&hspi1, &val, (uint16_t)sizeof(val), 1000);
 8002616:	23fa      	movs	r3, #250	; 0xfa
 8002618:	0031      	movs	r1, r6
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	0028      	movs	r0, r5
 800261e:	f7fe fe8b 	bl	8001338 <HAL_SPI_Transmit>
			while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002622:	0028      	movs	r0, r5
 8002624:	f7ff f8dc 	bl	80017e0 <HAL_SPI_GetState>
 8002628:	2801      	cmp	r0, #1
 800262a:	d1fa      	bne.n	8002622 <writeReg_Burst+0x72>
 800262c:	3401      	adds	r4, #1
 800262e:	e7e3      	b.n	80025f8 <writeReg_Burst+0x48>
 8002630:	20000860 	.word	0x20000860

08002634 <sendPacket>:

void sendPacket(uint8_t data[], uint8_t size)
{
 8002634:	b570      	push	{r4, r5, r6, lr}
 8002636:	000c      	movs	r4, r1
	writeReg(RH_RF95_REG_01_OP_MODE, 0x01); //STDBY
 8002638:	2101      	movs	r1, #1
{
 800263a:	0005      	movs	r5, r0
	writeReg(RH_RF95_REG_01_OP_MODE, 0x01); //STDBY
 800263c:	0008      	movs	r0, r1
 800263e:	f7ff ff07 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0x00); //fifo addr pointer
 8002642:	2100      	movs	r1, #0
 8002644:	200d      	movs	r0, #13
 8002646:	f7ff ff03 	bl	8002450 <writeReg>

	//set headers
	writeReg(RH_RF95_REG_00_FIFO, headerTo); //header TO
 800264a:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <sendPacket+0x88>)
 800264c:	2000      	movs	r0, #0
 800264e:	7819      	ldrb	r1, [r3, #0]
 8002650:	f7ff fefe 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_00_FIFO, headerFrom); //header FROM
 8002654:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <sendPacket+0x8c>)
 8002656:	2000      	movs	r0, #0
 8002658:	7819      	ldrb	r1, [r3, #0]
 800265a:	f7ff fef9 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_00_FIFO, headerID); //header ID
 800265e:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <sendPacket+0x90>)
 8002660:	2000      	movs	r0, #0
 8002662:	7819      	ldrb	r1, [r3, #0]
 8002664:	f7ff fef4 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_00_FIFO, headerFlags); //header FLAGS
 8002668:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <sendPacket+0x94>)
 800266a:	2000      	movs	r0, #0
 800266c:	7819      	ldrb	r1, [r3, #0]
 800266e:	f7ff feef 	bl	8002450 <writeReg>

	//uint8_t size = (sizeof(&data)/sizeof(data[0]));
	//uint8_t size = sizeof(*send);

	//write message data to fifo
	writeReg_Burst(RH_RF95_REG_00_FIFO, data, size);
 8002672:	0022      	movs	r2, r4
 8002674:	0029      	movs	r1, r5
 8002676:	2000      	movs	r0, #0
 8002678:	f7ff ff9a 	bl	80025b0 <writeReg_Burst>

	//set payload length
	writeReg(RH_RF95_REG_22_PAYLOAD_LENGTH, size + RH_RF95_HEADER_LEN);
 800267c:	1d21      	adds	r1, r4, #4
 800267e:	b2c9      	uxtb	r1, r1
 8002680:	2022      	movs	r0, #34	; 0x22
 8002682:	f7ff fee5 	bl	8002450 <writeReg>

	//HAL_Delay(10); //delay some time

	writeReg(RH_RF95_REG_12_IRQ_FLAGS, 0xFF); //clear txdone
 8002686:	21ff      	movs	r1, #255	; 0xff
 8002688:	2012      	movs	r0, #18
 800268a:	f7ff fee1 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_01_OP_MODE, 0x03); //TX Mode
 800268e:	2103      	movs	r1, #3
 8002690:	2001      	movs	r0, #1
 8002692:	f7ff fedd 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_40_DIO_MAPPING1, 0x40); //DIO0
 8002696:	2140      	movs	r1, #64	; 0x40
 8002698:	0008      	movs	r0, r1
 800269a:	f7ff fed9 	bl	8002450 <writeReg>

	//HAL_Delay(10);
	while(readReg(RH_RF95_REG_12_IRQ_FLAGS) != 0x08);
 800269e:	2012      	movs	r0, #18
 80026a0:	f7ff ff08 	bl	80024b4 <readReg>
 80026a4:	2808      	cmp	r0, #8
 80026a6:	d1fa      	bne.n	800269e <sendPacket+0x6a>

	writeReg(RH_RF95_REG_01_OP_MODE, 0x01); //STDBY
 80026a8:	2101      	movs	r1, #1
 80026aa:	0008      	movs	r0, r1
 80026ac:	f7ff fed0 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_12_IRQ_FLAGS, 0xFF); //clear txdone
 80026b0:	21ff      	movs	r1, #255	; 0xff
 80026b2:	2012      	movs	r0, #18
 80026b4:	f7ff fecc 	bl	8002450 <writeReg>
	//HAL_Delay(10);
}
 80026b8:	bd70      	pop	{r4, r5, r6, pc}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	2000005b 	.word	0x2000005b
 80026c0:	2000005a 	.word	0x2000005a
 80026c4:	2000057d 	.word	0x2000057d
 80026c8:	2000057c 	.word	0x2000057c

080026cc <LORA_INIT>:

void LORA_INIT(void)
{
 80026cc:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 80026ce:	4c31      	ldr	r4, [pc, #196]	; (8002794 <LORA_INIT+0xc8>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	2101      	movs	r1, #1
 80026d4:	0020      	movs	r0, r4
 80026d6:	f7fe f83b 	bl	8000750 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80026da:	200a      	movs	r0, #10
 80026dc:	f7fd fef8 	bl	80004d0 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 80026e0:	2201      	movs	r2, #1
 80026e2:	0020      	movs	r0, r4
 80026e4:	0011      	movs	r1, r2
 80026e6:	f7fe f833 	bl	8000750 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80026ea:	200a      	movs	r0, #10
 80026ec:	f7fd fef0 	bl	80004d0 <HAL_Delay>

	//initialization
	writeReg(RH_RF95_REG_01_OP_MODE, 0x80); //long range mode
 80026f0:	2180      	movs	r1, #128	; 0x80
 80026f2:	2001      	movs	r0, #1
 80026f4:	f7ff feac 	bl	8002450 <writeReg>
	//readReg(RH_RF95_REG_01_OP_MODE);
	writeReg(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0x00); //tx base addr to 0
 80026f8:	2100      	movs	r1, #0
 80026fa:	200e      	movs	r0, #14
 80026fc:	f7ff fea8 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0x00); //rx base addr to 0
 8002700:	2100      	movs	r1, #0
 8002702:	200f      	movs	r0, #15
 8002704:	f7ff fea4 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_1D_MODEM_CONFIG1, 0x72); //coding rate and modem config
 8002708:	2172      	movs	r1, #114	; 0x72
 800270a:	201d      	movs	r0, #29
 800270c:	f7ff fea0 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_1E_MODEM_CONFIG2, 0x74); //rxpayloadcrc and spreading factor
 8002710:	2174      	movs	r1, #116	; 0x74
 8002712:	201e      	movs	r0, #30
 8002714:	f7ff fe9c 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_26_MODEM_CONFIG3, 0x04); //LNA gain
 8002718:	2104      	movs	r1, #4
 800271a:	2026      	movs	r0, #38	; 0x26
 800271c:	f7ff fe98 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_20_PREAMBLE_MSB, 0x00); //preamble MSB
 8002720:	2100      	movs	r1, #0
 8002722:	2020      	movs	r0, #32
 8002724:	f7ff fe94 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_21_PREAMBLE_LSB, 0x08); //premamble LSB
 8002728:	2108      	movs	r1, #8
 800272a:	2021      	movs	r0, #33	; 0x21
 800272c:	f7ff fe90 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_06_FRF_MSB, 0x6C); //freq msb
 8002730:	216c      	movs	r1, #108	; 0x6c
 8002732:	2006      	movs	r0, #6
 8002734:	f7ff fe8c 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_07_FRF_MID, 0x80); //freq mid
 8002738:	2180      	movs	r1, #128	; 0x80
 800273a:	2007      	movs	r0, #7
 800273c:	f7ff fe88 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_08_FRF_LSB, 0x00); //freq lsb
 8002740:	2100      	movs	r1, #0
 8002742:	2008      	movs	r0, #8
 8002744:	f7ff fe84 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_4D_PA_DAC, 0x04); //padac
 8002748:	2104      	movs	r1, #4
 800274a:	204d      	movs	r0, #77	; 0x4d
 800274c:	f7ff fe80 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_09_PA_CONFIG, 0x88); //output power and PA_BOOST
 8002750:	2188      	movs	r1, #136	; 0x88
 8002752:	2009      	movs	r0, #9
 8002754:	f7ff fe7c 	bl	8002450 <writeReg>

	//set frequency to 915MHz
	writeReg(RH_RF95_REG_06_FRF_MSB, 0xE4); //freq msb
 8002758:	21e4      	movs	r1, #228	; 0xe4
 800275a:	2006      	movs	r0, #6
 800275c:	f7ff fe78 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_07_FRF_MID, 0xC0); //freq mid
 8002760:	21c0      	movs	r1, #192	; 0xc0
 8002762:	2007      	movs	r0, #7
 8002764:	f7ff fe74 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_08_FRF_LSB, 0x00); //freq lsb
 8002768:	2100      	movs	r1, #0
 800276a:	2008      	movs	r0, #8
 800276c:	f7ff fe70 	bl	8002450 <writeReg>

	//set power
	writeReg(RH_RF95_REG_4D_PA_DAC, 0x07); //padac
 8002770:	2107      	movs	r1, #7
 8002772:	204d      	movs	r0, #77	; 0x4d
 8002774:	f7ff fe6c 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_09_PA_CONFIG, 0x8F); //output power and PA_BOOST
 8002778:	218f      	movs	r1, #143	; 0x8f
 800277a:	2009      	movs	r0, #9
 800277c:	f7ff fe68 	bl	8002450 <writeReg>

	//set up for rx
	writeReg(RH_RF95_REG_01_OP_MODE, 0x05);
 8002780:	2105      	movs	r1, #5
 8002782:	2001      	movs	r0, #1
 8002784:	f7ff fe64 	bl	8002450 <writeReg>
	writeReg(RH_RF95_REG_40_DIO_MAPPING1, 0x00);
 8002788:	2100      	movs	r1, #0
 800278a:	2040      	movs	r0, #64	; 0x40
 800278c:	f7ff fe60 	bl	8002450 <writeReg>
}
 8002790:	bd10      	pop	{r4, pc}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	50000400 	.word	0x50000400

08002798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002798:	b510      	push	{r4, lr}
 800279a:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800279c:	2238      	movs	r2, #56	; 0x38
 800279e:	2100      	movs	r1, #0
 80027a0:	a80e      	add	r0, sp, #56	; 0x38
 80027a2:	f000 fd96 	bl	80032d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027a6:	2214      	movs	r2, #20
 80027a8:	2100      	movs	r1, #0
 80027aa:	4668      	mov	r0, sp
 80027ac:	f000 fd91 	bl	80032d2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027b0:	2224      	movs	r2, #36	; 0x24
 80027b2:	2100      	movs	r1, #0
 80027b4:	a805      	add	r0, sp, #20
 80027b6:	f000 fd8c 	bl	80032d2 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027ba:	4914      	ldr	r1, [pc, #80]	; (800280c <SystemClock_Config+0x74>)
 80027bc:	4a14      	ldr	r2, [pc, #80]	; (8002810 <SystemClock_Config+0x78>)
 80027be:	680b      	ldr	r3, [r1, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80027c0:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027c2:	401a      	ands	r2, r3
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	4313      	orrs	r3, r2
 80027ca:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80027cc:	2310      	movs	r3, #16
 80027ce:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80027d0:	3b0f      	subs	r3, #15
 80027d2:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80027d4:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027d6:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80027dc:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80027de:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027e0:	f7fe f8a4 	bl	800092c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027e4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027e6:	0021      	movs	r1, r4
 80027e8:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027ea:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80027ec:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ee:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027f0:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027f2:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027f4:	f7fe fb1e 	bl	8000e34 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80027f8:	2309      	movs	r3, #9
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027fa:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80027fc:	9305      	str	r3, [sp, #20]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80027fe:	9408      	str	r4, [sp, #32]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002800:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002802:	f7fe fbef 	bl	8000fe4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002806:	b01c      	add	sp, #112	; 0x70
 8002808:	bd10      	pop	{r4, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	40007000 	.word	0x40007000
 8002810:	ffffe7ff 	.word	0xffffe7ff

08002814 <main>:
{
 8002814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002816:	b08f      	sub	sp, #60	; 0x3c
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002818:	ad07      	add	r5, sp, #28
  HAL_Init();
 800281a:	f7fd fe37 	bl	800048c <HAL_Init>
  SystemClock_Config();
 800281e:	f7ff ffbb 	bl	8002798 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002822:	2214      	movs	r2, #20
 8002824:	2100      	movs	r1, #0
 8002826:	0028      	movs	r0, r5
 8002828:	f000 fd53 	bl	80032d2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800282c:	2004      	movs	r0, #4
 800282e:	4bb0      	ldr	r3, [pc, #704]	; (8002af0 <main+0x2dc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002830:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002832:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET);
 8002834:	2480      	movs	r4, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002836:	4301      	orrs	r1, r0
 8002838:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800283a:	2101      	movs	r1, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800283c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET);
 800283e:	0224      	lsls	r4, r4, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002840:	4002      	ands	r2, r0
 8002842:	9202      	str	r2, [sp, #8]
 8002844:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET);
 8002848:	48aa      	ldr	r0, [pc, #680]	; (8002af4 <main+0x2e0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800284a:	430a      	orrs	r2, r1
 800284c:	62da      	str	r2, [r3, #44]	; 0x2c
 800284e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002850:	400a      	ands	r2, r1
 8002852:	9203      	str	r2, [sp, #12]
 8002854:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET);
 8002858:	0021      	movs	r1, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800285a:	4332      	orrs	r2, r6
 800285c:	62da      	str	r2, [r3, #44]	; 0x2c
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET);
 8002860:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002862:	4033      	ands	r3, r6
 8002864:	9304      	str	r3, [sp, #16]
 8002866:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(HR_MFIO_GPIO_Port, HR_MFIO_Pin, GPIO_PIN_RESET);
 8002868:	f7fd ff72 	bl	8000750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 800286c:	20a0      	movs	r0, #160	; 0xa0
 800286e:	2201      	movs	r2, #1
 8002870:	2110      	movs	r1, #16
 8002872:	05c0      	lsls	r0, r0, #23
 8002874:	f7fd ff6c 	bl	8000750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LORA_RST_Pin|HR_RESET_Pin, GPIO_PIN_SET);
 8002878:	2201      	movs	r2, #1
 800287a:	2121      	movs	r1, #33	; 0x21
 800287c:	489e      	ldr	r0, [pc, #632]	; (8002af8 <main+0x2e4>)
 800287e:	f7fd ff67 	bl	8000750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, oled_NSS_Pin|oled_DC_Pin|DEBUG_Pin, GPIO_PIN_RESET);
 8002882:	21a2      	movs	r1, #162	; 0xa2
 8002884:	2200      	movs	r2, #0
 8002886:	01c9      	lsls	r1, r1, #7
 8002888:	489b      	ldr	r0, [pc, #620]	; (8002af8 <main+0x2e4>)
 800288a:	f7fd ff61 	bl	8000750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(oled_RES_GPIO_Port, oled_RES_Pin, GPIO_PIN_RESET);
 800288e:	2180      	movs	r1, #128	; 0x80
 8002890:	20a0      	movs	r0, #160	; 0xa0
 8002892:	2200      	movs	r2, #0
 8002894:	0049      	lsls	r1, r1, #1
 8002896:	05c0      	lsls	r0, r0, #23
 8002898:	f7fd ff5a 	bl	8000750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HR_MFIO_Pin */
  GPIO_InitStruct.Pin = HR_MFIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289c:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = HR_MFIO_Pin;
 800289e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HR_MFIO_GPIO_Port, &GPIO_InitStruct);
 80028a2:	0029      	movs	r1, r5
 80028a4:	4893      	ldr	r0, [pc, #588]	; (8002af4 <main+0x2e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a6:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028aa:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(HR_MFIO_GPIO_Port, &GPIO_InitStruct);
 80028ac:	f7fd fe9a 	bl	80005e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : dim_Pin */
  GPIO_InitStruct.Pin = dim_Pin;
 80028b0:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(dim_GPIO_Port, &GPIO_InitStruct);
 80028b2:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = dim_Pin;
 80028b4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028b6:	4b91      	ldr	r3, [pc, #580]	; (8002afc <main+0x2e8>)
  HAL_GPIO_Init(dim_GPIO_Port, &GPIO_InitStruct);
 80028b8:	0029      	movs	r1, r5
 80028ba:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028bc:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	60ac      	str	r4, [r5, #8]
  HAL_GPIO_Init(dim_GPIO_Port, &GPIO_InitStruct);
 80028c0:	f7fd fe90 	bl	80005e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_NSS_Pin oled_RES_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin|oled_RES_Pin;
 80028c4:	2388      	movs	r3, #136	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c6:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = LORA_NSS_Pin|oled_RES_Pin;
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028cc:	3b10      	subs	r3, #16
 80028ce:	3bff      	subs	r3, #255	; 0xff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d0:	0029      	movs	r1, r5
 80028d2:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d4:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028da:	f7fd fe83 	bl	80005e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin oled_NSS_Pin oled_DC_Pin HR_RESET_Pin 
                           DEBUG_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|oled_NSS_Pin|oled_DC_Pin|HR_RESET_Pin 
 80028de:	4b88      	ldr	r3, [pc, #544]	; (8002b00 <main+0x2ec>)
                          |DEBUG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e0:	0029      	movs	r1, r5
  GPIO_InitStruct.Pin = LORA_RST_Pin|oled_NSS_Pin|oled_DC_Pin|HR_RESET_Pin 
 80028e2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e4:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e6:	4884      	ldr	r0, [pc, #528]	; (8002af8 <main+0x2e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e8:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	60ac      	str	r4, [r5, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ec:	60ec      	str	r4, [r5, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ee:	f7fd fe79 	bl	80005e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO_Pin */
  GPIO_InitStruct.Pin = LORA_DIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028f2:	4b84      	ldr	r3, [pc, #528]	; (8002b04 <main+0x2f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LORA_DIO_GPIO_Port, &GPIO_InitStruct);
 80028f4:	0029      	movs	r1, r5
 80028f6:	4880      	ldr	r0, [pc, #512]	; (8002af8 <main+0x2e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028f8:	606b      	str	r3, [r5, #4]
  GPIO_InitStruct.Pin = LORA_DIO_Pin;
 80028fa:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	60ac      	str	r4, [r5, #8]
  HAL_GPIO_Init(LORA_DIO_GPIO_Port, &GPIO_InitStruct);
 80028fe:	f7fd fe71 	bl	80005e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002902:	0022      	movs	r2, r4
 8002904:	0021      	movs	r1, r4
 8002906:	2005      	movs	r0, #5
 8002908:	f7fd fdf2 	bl	80004f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800290c:	2005      	movs	r0, #5
 800290e:	f7fd fe1f 	bl	8000550 <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002912:	2210      	movs	r2, #16
 8002914:	0021      	movs	r1, r4
 8002916:	0028      	movs	r0, r5
 8002918:	f000 fcdb 	bl	80032d2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800291c:	2208      	movs	r2, #8
 800291e:	0021      	movs	r1, r4
 8002920:	a805      	add	r0, sp, #20
 8002922:	f000 fcd6 	bl	80032d2 <memset>
  htim2.Instance = TIM2;
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	4e77      	ldr	r6, [pc, #476]	; (8002b08 <main+0x2f4>)
 800292a:	05db      	lsls	r3, r3, #23
 800292c:	6033      	str	r3, [r6, #0]
  htim2.Init.Prescaler = 20096;
 800292e:	239d      	movs	r3, #157	; 0x9d
 8002930:	01db      	lsls	r3, r3, #7
 8002932:	6073      	str	r3, [r6, #4]
  htim2.Init.Period = 100;
 8002934:	2364      	movs	r3, #100	; 0x64
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002936:	0030      	movs	r0, r6
  htim2.Init.Period = 100;
 8002938:	60f3      	str	r3, [r6, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293a:	60b4      	str	r4, [r6, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800293c:	6134      	str	r4, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800293e:	6174      	str	r4, [r6, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002940:	f7fe ff80 	bl	8001844 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002944:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002946:	0029      	movs	r1, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002948:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800294a:	0030      	movs	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800294c:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800294e:	f7fe ff95 	bl	800187c <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002952:	a905      	add	r1, sp, #20
 8002954:	0030      	movs	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002956:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002958:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800295a:	f7ff f8be 	bl	8001ada <HAL_TIMEx_MasterConfigSynchronization>
  hspi1.Instance = SPI1;
 800295e:	486b      	ldr	r0, [pc, #428]	; (8002b0c <main+0x2f8>)
 8002960:	4b6b      	ldr	r3, [pc, #428]	; (8002b10 <main+0x2fc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002962:	2682      	movs	r6, #130	; 0x82
  hspi1.Instance = SPI1;
 8002964:	6003      	str	r3, [r0, #0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800296c:	3be9      	subs	r3, #233	; 0xe9
 800296e:	3bff      	subs	r3, #255	; 0xff
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002970:	0076      	lsls	r6, r6, #1
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002972:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8002974:	3b11      	subs	r3, #17
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002976:	6046      	str	r6, [r0, #4]
  hspi1.Init.CRCPolynomial = 7;
 8002978:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800297a:	6084      	str	r4, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800297c:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800297e:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002980:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002982:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002984:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002986:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002988:	f7fe fc96 	bl	80012b8 <HAL_SPI_Init>
  huart1.Instance = USART1;
 800298c:	4f61      	ldr	r7, [pc, #388]	; (8002b14 <main+0x300>)
 800298e:	4b62      	ldr	r3, [pc, #392]	; (8002b18 <main+0x304>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002990:	0038      	movs	r0, r7
  huart1.Instance = USART1;
 8002992:	603b      	str	r3, [r7, #0]
  huart1.Init.BaudRate = 9600;
 8002994:	2396      	movs	r3, #150	; 0x96
 8002996:	019b      	lsls	r3, r3, #6
 8002998:	607b      	str	r3, [r7, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800299a:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800299c:	60bc      	str	r4, [r7, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800299e:	617b      	str	r3, [r7, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029a0:	60fc      	str	r4, [r7, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029a2:	613c      	str	r4, [r7, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029a4:	61bc      	str	r4, [r7, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029a6:	61fc      	str	r4, [r7, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029a8:	623c      	str	r4, [r7, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029aa:	627c      	str	r4, [r7, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029ac:	f7ff fc80 	bl	80022b0 <HAL_UART_Init>
  hspi2.Instance = SPI2;
 80029b0:	485a      	ldr	r0, [pc, #360]	; (8002b1c <main+0x308>)
 80029b2:	4b5b      	ldr	r3, [pc, #364]	; (8002b20 <main+0x30c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80029b4:	6046      	str	r6, [r0, #4]
  hspi2.Instance = SPI2;
 80029b6:	6003      	str	r3, [r0, #0]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80029be:	3be9      	subs	r3, #233	; 0xe9
 80029c0:	3bff      	subs	r3, #255	; 0xff
 80029c2:	61c3      	str	r3, [r0, #28]
  hspi2.Init.CRCPolynomial = 7;
 80029c4:	3b11      	subs	r3, #17
 80029c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80029c8:	6084      	str	r4, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80029ca:	60c4      	str	r4, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029cc:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029ce:	6144      	str	r4, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029d0:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80029d2:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029d4:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80029d6:	f7fe fc6f 	bl	80012b8 <HAL_SPI_Init>
  hi2c1.Instance = I2C1;
 80029da:	4e52      	ldr	r6, [pc, #328]	; (8002b24 <main+0x310>)
 80029dc:	4b52      	ldr	r3, [pc, #328]	; (8002b28 <main+0x314>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029de:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 80029e0:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x00000708;
 80029e2:	23e1      	movs	r3, #225	; 0xe1
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029e8:	2301      	movs	r3, #1
  hi2c1.Init.OwnAddress1 = 0;
 80029ea:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029ec:	60f3      	str	r3, [r6, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029ee:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029f0:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029f2:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029f4:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029f6:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029f8:	f7fd febc 	bl	8000774 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029fc:	0021      	movs	r1, r4
 80029fe:	0030      	movs	r0, r6
 8002a00:	f7fd ff0e 	bl	8000820 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a04:	0021      	movs	r1, r4
 8002a06:	0030      	movs	r0, r6
 8002a08:	f7fd ff30 	bl	800086c <HAL_I2CEx_ConfigDigitalFilter>
  turnOnScreen(); //screen
 8002a0c:	f000 f91c 	bl	8002c48 <turnOnScreen>
  GPS_INIT(); //gps
 8002a10:	f7ff fc82 	bl	8002318 <GPS_INIT>
  LORA_INIT(); //lora
 8002a14:	f7ff fe5a 	bl	80026cc <LORA_INIT>
  HAL_UART_Receive_IT(&huart1, tempdata, sizeof(tempdata));
 8002a18:	227d      	movs	r2, #125	; 0x7d
 8002a1a:	4944      	ldr	r1, [pc, #272]	; (8002b2c <main+0x318>)
 8002a1c:	0038      	movs	r0, r7
 8002a1e:	f7ff f88b 	bl	8001b38 <HAL_UART_Receive_IT>
			  isDim = 1;
 8002a22:	2301      	movs	r3, #1
 8002a24:	9300      	str	r3, [sp, #0]
	  HAL_UART_Receive_IT(&huart1, tempdata, sizeof(tempdata));
 8002a26:	227d      	movs	r2, #125	; 0x7d
 8002a28:	4940      	ldr	r1, [pc, #256]	; (8002b2c <main+0x318>)
 8002a2a:	0038      	movs	r0, r7
 8002a2c:	f7ff f884 	bl	8001b38 <HAL_UART_Receive_IT>
	  if(GPS_FLAG)
 8002a30:	4b3f      	ldr	r3, [pc, #252]	; (8002b30 <main+0x31c>)
 8002a32:	781e      	ldrb	r6, [r3, #0]
 8002a34:	2e00      	cmp	r6, #0
 8002a36:	d108      	bne.n	8002a4a <main+0x236>
	  else if(LORA_FLAG)
 8002a38:	4c3e      	ldr	r4, [pc, #248]	; (8002b34 <main+0x320>)
 8002a3a:	7823      	ldrb	r3, [r4, #0]
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d03d      	beq.n	8002abe <main+0x2aa>
		  receiveData();
 8002a42:	f7ff fd89 	bl	8002558 <receiveData>
		  LORA_FLAG = 0;
 8002a46:	7026      	strb	r6, [r4, #0]
 8002a48:	e7ed      	b.n	8002a26 <main+0x212>
 8002a4a:	2300      	movs	r3, #0
					  data[j] = tempdata[i];
 8002a4c:	483a      	ldr	r0, [pc, #232]	; (8002b38 <main+0x324>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	001e      	movs	r6, r3
 8002a52:	0019      	movs	r1, r3
 8002a54:	4684      	mov	ip, r0
				  if ((tempdata[i] == '$') && (tempdata[i+1] == 'G'))
 8002a56:	4c35      	ldr	r4, [pc, #212]	; (8002b2c <main+0x318>)
 8002a58:	1e50      	subs	r0, r2, #1
 8002a5a:	5c20      	ldrb	r0, [r4, r0]
 8002a5c:	2824      	cmp	r0, #36	; 0x24
 8002a5e:	d102      	bne.n	8002a66 <main+0x252>
 8002a60:	5ca4      	ldrb	r4, [r4, r2]
 8002a62:	2c47      	cmp	r4, #71	; 0x47
 8002a64:	d001      	beq.n	8002a6a <main+0x256>
				  if (found)
 8002a66:	2900      	cmp	r1, #0
 8002a68:	d008      	beq.n	8002a7c <main+0x268>
					  data[j] = tempdata[i];
 8002a6a:	4661      	mov	r1, ip
 8002a6c:	54c8      	strb	r0, [r1, r3]
					  j++;
 8002a6e:	3301      	adds	r3, #1
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	9900      	ldr	r1, [sp, #0]
					  if (tempdata[i] == ',')
 8002a74:	282c      	cmp	r0, #44	; 0x2c
 8002a76:	d101      	bne.n	8002a7c <main+0x268>
						  commaCnt++;
 8002a78:	3601      	adds	r6, #1
 8002a7a:	b2f6      	uxtb	r6, r6
 8002a7c:	3201      	adds	r2, #1
		  for(int i = 0; i < (sizeof(tempdata)); i++)
 8002a7e:	2a7e      	cmp	r2, #126	; 0x7e
 8002a80:	d001      	beq.n	8002a86 <main+0x272>
			  if (commaCnt < 8)
 8002a82:	2e07      	cmp	r6, #7
 8002a84:	d9e7      	bls.n	8002a56 <main+0x242>
		  if (parseData())
 8002a86:	f7ff fc67 	bl	8002358 <parseData>
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	d013      	beq.n	8002ab6 <main+0x2a2>
 8002a8e:	2100      	movs	r1, #0
				  test[i] = (uint8_t) sendMeasurements[i];
 8002a90:	4a2a      	ldr	r2, [pc, #168]	; (8002b3c <main+0x328>)
 8002a92:	5c53      	ldrb	r3, [r2, r1]
 8002a94:	546b      	strb	r3, [r5, r1]
			  for(int i = 0; i < (sizeof(test) / sizeof(test[0])); i++)
 8002a96:	3101      	adds	r1, #1
 8002a98:	291b      	cmp	r1, #27
 8002a9a:	d1fa      	bne.n	8002a92 <main+0x27e>
			  sendPacket(test, sizeof(test));
 8002a9c:	0028      	movs	r0, r5
 8002a9e:	f7ff fdc9 	bl	8002634 <sendPacket>
			  writeReg(RH_RF95_REG_01_OP_MODE, 0x05);
 8002aa2:	2105      	movs	r1, #5
 8002aa4:	9800      	ldr	r0, [sp, #0]
 8002aa6:	f7ff fcd3 	bl	8002450 <writeReg>
			  writeReg(RH_RF95_REG_40_DIO_MAPPING1, 0x00);
 8002aaa:	2100      	movs	r1, #0
 8002aac:	2040      	movs	r0, #64	; 0x40
 8002aae:	f7ff fccf 	bl	8002450 <writeReg>
			  testScreen();
 8002ab2:	f000 fa4d 	bl	8002f50 <testScreen>
		  GPS_FLAG = 0;
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <main+0x31c>)
 8002aba:	701a      	strb	r2, [r3, #0]
 8002abc:	e7b3      	b.n	8002a26 <main+0x212>
	  else if(DIM_FLAG)
 8002abe:	4e20      	ldr	r6, [pc, #128]	; (8002b40 <main+0x32c>)
 8002ac0:	7833      	ldrb	r3, [r6, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0af      	beq.n	8002a26 <main+0x212>
		  if(isDim)
 8002ac6:	4c1f      	ldr	r4, [pc, #124]	; (8002b44 <main+0x330>)
			  sendCMD(contrastHigh, (uint16_t)sizeof(contrastHigh));
 8002ac8:	2102      	movs	r1, #2
		  if(isDim)
 8002aca:	7823      	ldrb	r3, [r4, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <main+0x2ce>
			  sendCMD(contrastHigh, (uint16_t)sizeof(contrastHigh));
 8002ad0:	481d      	ldr	r0, [pc, #116]	; (8002b48 <main+0x334>)
 8002ad2:	f000 f875 	bl	8002bc0 <sendCMD>
			  isDim = 0;
 8002ad6:	466b      	mov	r3, sp
 8002ad8:	791b      	ldrb	r3, [r3, #4]
			  isDim = 1;
 8002ada:	7023      	strb	r3, [r4, #0]
		  DIM_FLAG = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	7033      	strb	r3, [r6, #0]
 8002ae0:	e7a1      	b.n	8002a26 <main+0x212>
			  sendCMD(contrastLow, (uint16_t)sizeof(contrastLow));
 8002ae2:	481a      	ldr	r0, [pc, #104]	; (8002b4c <main+0x338>)
 8002ae4:	f000 f86c 	bl	8002bc0 <sendCMD>
			  isDim = 1;
 8002ae8:	466b      	mov	r3, sp
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	e7f5      	b.n	8002ada <main+0x2c6>
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	40021000 	.word	0x40021000
 8002af4:	50000800 	.word	0x50000800
 8002af8:	50000400 	.word	0x50000400
 8002afc:	10210000 	.word	0x10210000
 8002b00:	00005121 	.word	0x00005121
 8002b04:	10110000 	.word	0x10110000
 8002b08:	200008bc 	.word	0x200008bc
 8002b0c:	20000860 	.word	0x20000860
 8002b10:	40013000 	.word	0x40013000
 8002b14:	2000077c 	.word	0x2000077c
 8002b18:	40013800 	.word	0x40013800
 8002b1c:	200006d4 	.word	0x200006d4
 8002b20:	40003800 	.word	0x40003800
 8002b24:	20000730 	.word	0x20000730
 8002b28:	40005400 	.word	0x40005400
 8002b2c:	200005ff 	.word	0x200005ff
 8002b30:	2000057f 	.word	0x2000057f
 8002b34:	20000580 	.word	0x20000580
 8002b38:	20000581 	.word	0x20000581
 8002b3c:	2000082e 	.word	0x2000082e
 8002b40:	2000057e 	.word	0x2000057e
 8002b44:	200005fe 	.word	0x200005fe
 8002b48:	2000005c 	.word	0x2000005c
 8002b4c:	2000005e 	.word	0x2000005e

08002b50 <HAL_UART_RxCpltCallback>:
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002b50:	2180      	movs	r1, #128	; 0x80
}

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b52:	b530      	push	{r4, r5, lr}
 8002b54:	2020      	movs	r0, #32
 8002b56:	2480      	movs	r4, #128	; 0x80
	NVIC_DisableIRQ(EXTI4_15_IRQn);
	NVIC_DisableIRQ(EXTI0_1_IRQn);
	NVIC_DisableIRQ(USART1_IRQn);

	GPS_FLAG = 1; //GPS
 8002b58:	2501      	movs	r5, #1
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_UART_RxCpltCallback+0x24>)
 8002b5c:	0509      	lsls	r1, r1, #20
 8002b5e:	1d1a      	adds	r2, r3, #4
 8002b60:	67d4      	str	r4, [r2, #124]	; 0x7c
 8002b62:	67d0      	str	r0, [r2, #124]	; 0x7c
 8002b64:	67d1      	str	r1, [r2, #124]	; 0x7c
 8002b66:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <HAL_UART_RxCpltCallback+0x28>)
 8002b68:	7015      	strb	r5, [r2, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002b6a:	601c      	str	r4, [r3, #0]
 8002b6c:	6018      	str	r0, [r3, #0]
 8002b6e:	6019      	str	r1, [r3, #0]

	NVIC_EnableIRQ(EXTI4_15_IRQn);
	NVIC_EnableIRQ(EXTI0_1_IRQn);
	NVIC_EnableIRQ(USART1_IRQn);
}
 8002b70:	bd30      	pop	{r4, r5, pc}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	e000e100 	.word	0xe000e100
 8002b78:	2000057f 	.word	0x2000057f

08002b7c <HAL_GPIO_EXTI_Callback>:
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	4a0c      	ldr	r2, [pc, #48]	; (8002bb0 <HAL_GPIO_EXTI_Callback+0x34>)
 8002b80:	67d3      	str	r3, [r2, #124]	; 0x7c
 8002b82:	3b60      	subs	r3, #96	; 0x60
 8002b84:	67d3      	str	r3, [r2, #124]	; 0x7c
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	051b      	lsls	r3, r3, #20
 8002b8a:	67d3      	str	r3, [r2, #124]	; 0x7c
			//testScreen();
		}
		//HR_FLAG = 1;
	}
	*/
	if (GPIO_Pin == GPIO_PIN_1) //LORA RECEIVE
 8002b8c:	2802      	cmp	r0, #2
 8002b8e:	d109      	bne.n	8002ba4 <HAL_GPIO_EXTI_Callback+0x28>
	{
		LORA_FLAG = 1;
 8002b90:	2101      	movs	r1, #1
 8002b92:	4a08      	ldr	r2, [pc, #32]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x38>)
 8002b94:	7011      	strb	r1, [r2, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002b96:	4a08      	ldr	r2, [pc, #32]	; (8002bb8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	3b60      	subs	r3, #96	; 0x60
 8002ba0:	6013      	str	r3, [r2, #0]
	*/
	NVIC_EnableIRQ(USART1_IRQn);
	NVIC_EnableIRQ(EXTI4_15_IRQn);
	NVIC_EnableIRQ(EXTI0_1_IRQn);

}
 8002ba2:	4770      	bx	lr
	else if (GPIO_Pin == GPIO_PIN_0) //DIM SCREEN
 8002ba4:	2801      	cmp	r0, #1
 8002ba6:	d1f6      	bne.n	8002b96 <HAL_GPIO_EXTI_Callback+0x1a>
		DIM_FLAG = 1;
 8002ba8:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <HAL_GPIO_EXTI_Callback+0x40>)
 8002baa:	7010      	strb	r0, [r2, #0]
 8002bac:	e7f3      	b.n	8002b96 <HAL_GPIO_EXTI_Callback+0x1a>
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	e000e104 	.word	0xe000e104
 8002bb4:	20000580 	.word	0x20000580
 8002bb8:	e000e100 	.word	0xe000e100
 8002bbc:	2000057e 	.word	0x2000057e

08002bc0 <sendCMD>:
	sendCMD(page,(uint16_t)sizeof(page));
	sendCMD(col, (uint16_t)sizeof(col));
	sendString(message,0x00);
}

void sendCMD(uint8_t *cmd, uint16_t size) {
 8002bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc2:	000f      	movs	r7, r1
	//set dc low
	HAL_GPIO_WritePin(oled_DC_GPIO_Port,  oled_DC_Pin, GPIO_PIN_RESET);
	//set CS low

	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_RESET);
 8002bc4:	2580      	movs	r5, #128	; 0x80
	HAL_GPIO_WritePin(oled_DC_GPIO_Port,  oled_DC_Pin, GPIO_PIN_RESET);
 8002bc6:	2180      	movs	r1, #128	; 0x80
 8002bc8:	4c0c      	ldr	r4, [pc, #48]	; (8002bfc <sendCMD+0x3c>)
void sendCMD(uint8_t *cmd, uint16_t size) {
 8002bca:	0006      	movs	r6, r0
	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_RESET);
 8002bcc:	016d      	lsls	r5, r5, #5
	HAL_GPIO_WritePin(oled_DC_GPIO_Port,  oled_DC_Pin, GPIO_PIN_RESET);
 8002bce:	0020      	movs	r0, r4
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	01c9      	lsls	r1, r1, #7
 8002bd4:	f7fd fdbc 	bl	8000750 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_RESET);
 8002bd8:	0029      	movs	r1, r5
 8002bda:	0020      	movs	r0, r4
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f7fd fdb7 	bl	8000750 <HAL_GPIO_WritePin>
	//send cmd
	HAL_SPI_Transmit(&hspi2, cmd, size, 1000);
 8002be2:	23fa      	movs	r3, #250	; 0xfa
 8002be4:	003a      	movs	r2, r7
 8002be6:	0031      	movs	r1, r6
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4805      	ldr	r0, [pc, #20]	; (8002c00 <sendCMD+0x40>)
 8002bec:	f7fe fba4 	bl	8001338 <HAL_SPI_Transmit>
	//set CS high

	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_SET);
 8002bf0:	0029      	movs	r1, r5
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	0020      	movs	r0, r4
 8002bf6:	f7fd fdab 	bl	8000750 <HAL_GPIO_WritePin>

}
 8002bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bfc:	50000400 	.word	0x50000400
 8002c00:	200006d4 	.word	0x200006d4

08002c04 <sendDATA>:

void sendDATA(uint8_t *data, uint16_t size) {
 8002c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c06:	000f      	movs	r7, r1
	//set dc high

	HAL_GPIO_WritePin(oled_DC_GPIO_Port, oled_DC_Pin, GPIO_PIN_SET);
	//set CS low

	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_RESET);
 8002c08:	2580      	movs	r5, #128	; 0x80
	HAL_GPIO_WritePin(oled_DC_GPIO_Port, oled_DC_Pin, GPIO_PIN_SET);
 8002c0a:	2180      	movs	r1, #128	; 0x80
 8002c0c:	4c0c      	ldr	r4, [pc, #48]	; (8002c40 <sendDATA+0x3c>)
void sendDATA(uint8_t *data, uint16_t size) {
 8002c0e:	0006      	movs	r6, r0
	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_RESET);
 8002c10:	016d      	lsls	r5, r5, #5
	HAL_GPIO_WritePin(oled_DC_GPIO_Port, oled_DC_Pin, GPIO_PIN_SET);
 8002c12:	0020      	movs	r0, r4
 8002c14:	2201      	movs	r2, #1
 8002c16:	01c9      	lsls	r1, r1, #7
 8002c18:	f7fd fd9a 	bl	8000750 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_RESET);
 8002c1c:	0029      	movs	r1, r5
 8002c1e:	0020      	movs	r0, r4
 8002c20:	2200      	movs	r2, #0
 8002c22:	f7fd fd95 	bl	8000750 <HAL_GPIO_WritePin>
	//sendData
	//for(int i=0; i<dataSize;i++);
	HAL_SPI_Transmit(&hspi2, data, size, 1000);
 8002c26:	23fa      	movs	r3, #250	; 0xfa
 8002c28:	003a      	movs	r2, r7
 8002c2a:	0031      	movs	r1, r6
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4805      	ldr	r0, [pc, #20]	; (8002c44 <sendDATA+0x40>)
 8002c30:	f7fe fb82 	bl	8001338 <HAL_SPI_Transmit>
	//set CS high
	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_SET);
 8002c34:	0029      	movs	r1, r5
 8002c36:	2201      	movs	r2, #1
 8002c38:	0020      	movs	r0, r4
 8002c3a:	f7fd fd89 	bl	8000750 <HAL_GPIO_WritePin>
	//set dc high

	//HAL_GPIO_WritePin(oled_DC_GPIO_Port, oled_DC_Pin, GPIO_PIN_RESET);
}
 8002c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c40:	50000400 	.word	0x50000400
 8002c44:	200006d4 	.word	0x200006d4

08002c48 <turnOnScreen>:
HAL_GPIO_WritePin(oled_RES_GPIO_Port, oled_RES_Pin, GPIO_PIN_SET);
 8002c48:	2180      	movs	r1, #128	; 0x80
 8002c4a:	20a0      	movs	r0, #160	; 0xa0
void turnOnScreen(){
 8002c4c:	b530      	push	{r4, r5, lr}
HAL_GPIO_WritePin(oled_RES_GPIO_Port, oled_RES_Pin, GPIO_PIN_SET);
 8002c4e:	2201      	movs	r2, #1
void turnOnScreen(){
 8002c50:	b085      	sub	sp, #20
HAL_GPIO_WritePin(oled_RES_GPIO_Port, oled_RES_Pin, GPIO_PIN_SET);
 8002c52:	0049      	lsls	r1, r1, #1
 8002c54:	05c0      	lsls	r0, r0, #23
 8002c56:	f7fd fd7b 	bl	8000750 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(oled_NSS_GPIO_Port, oled_NSS_Pin, GPIO_PIN_SET);
 8002c5a:	2180      	movs	r1, #128	; 0x80
	uint8_t turnOn[] = {0xA8, 0x3F, 0xD3, 0x00, 0x20,0x10, 0xAF, 0xAC};// 0xAF}; //need to change
 8002c5c:	2508      	movs	r5, #8
HAL_GPIO_WritePin(oled_NSS_GPIO_Port, oled_NSS_Pin, GPIO_PIN_SET);
 8002c5e:	2201      	movs	r2, #1
 8002c60:	0149      	lsls	r1, r1, #5
 8002c62:	480f      	ldr	r0, [pc, #60]	; (8002ca0 <turnOnScreen+0x58>)
 8002c64:	f7fd fd74 	bl	8000750 <HAL_GPIO_WritePin>
	uint8_t turnOn[] = {0xA8, 0x3F, 0xD3, 0x00, 0x20,0x10, 0xAF, 0xAC};// 0xAF}; //need to change
 8002c68:	4c0e      	ldr	r4, [pc, #56]	; (8002ca4 <turnOnScreen+0x5c>)
 8002c6a:	002a      	movs	r2, r5
 8002c6c:	0021      	movs	r1, r4
 8002c6e:	a802      	add	r0, sp, #8
 8002c70:	f000 fb26 	bl	80032c0 <memcpy>
	uint8_t orientation[]={0xC8, 0xA1};
 8002c74:	1961      	adds	r1, r4, r5
 8002c76:	2402      	movs	r4, #2
 8002c78:	a801      	add	r0, sp, #4
 8002c7a:	0022      	movs	r2, r4
 8002c7c:	f000 fb20 	bl	80032c0 <memcpy>
	 sendCMD(turnOn, (uint16_t)sizeof(turnOn));
 8002c80:	0029      	movs	r1, r5
 8002c82:	a802      	add	r0, sp, #8
 8002c84:	f7ff ff9c 	bl	8002bc0 <sendCMD>
	  sendCMD(orientation, (uint16_t)sizeof(orientation));
 8002c88:	0021      	movs	r1, r4
 8002c8a:	a801      	add	r0, sp, #4
 8002c8c:	f7ff ff98 	bl	8002bc0 <sendCMD>
	  sendDATA(MARSBMP, (uint16_t)sizeof(MARSBMP));
 8002c90:	2180      	movs	r1, #128	; 0x80
 8002c92:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <turnOnScreen+0x60>)
 8002c94:	00c9      	lsls	r1, r1, #3
 8002c96:	f7ff ffb5 	bl	8002c04 <sendDATA>
}
 8002c9a:	b005      	add	sp, #20
 8002c9c:	bd30      	pop	{r4, r5, pc}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	50000400 	.word	0x50000400
 8002ca4:	08003324 	.word	0x08003324
 8002ca8:	20000060 	.word	0x20000060

08002cac <clearScreen>:

void clearScreen(){
 8002cac:	b510      	push	{r4, lr}
 8002cae:	2480      	movs	r4, #128	; 0x80
 8002cb0:	00e4      	lsls	r4, r4, #3
	for (int i=0; i<1024; i++){
		  sendDATA(space, (uint16_t)sizeof(space));
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	4803      	ldr	r0, [pc, #12]	; (8002cc4 <clearScreen+0x18>)
 8002cb6:	3c01      	subs	r4, #1
 8002cb8:	f7ff ffa4 	bl	8002c04 <sendDATA>
	for (int i=0; i<1024; i++){
 8002cbc:	2c00      	cmp	r4, #0
 8002cbe:	d1f8      	bne.n	8002cb2 <clearScreen+0x6>
	  }
}
 8002cc0:	bd10      	pop	{r4, pc}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	2000067c 	.word	0x2000067c

08002cc8 <sendString>:

void sendString(char *string, uint8_t header){
 8002cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cca:	0005      	movs	r5, r0
			wordSize = (uint16_t)sizeof(letter);
			if (string[i]>='A' && string[i] <= 'Z'){
				letter[j] = fonts[(string[i]-'A')*6+j];
			}
			else if(string[i] >= '0' && string[i] <= '9'){
				letter[j] = fonts[(string[i]-'0'+26)*6+j];
 8002ccc:	2406      	movs	r4, #6
				letter[j] = fonts[38*6+j];
				//wordSize=2;
			}
			else if(string[i]=='@'){
				letter[j] = fonts[38*6+j];
				wordSize=2;
 8002cce:	2602      	movs	r6, #2
void sendString(char *string, uint8_t header){
 8002cd0:	b089      	sub	sp, #36	; 0x24
 8002cd2:	9103      	str	r1, [sp, #12]
	for(int i =0; string[i]!='\0'; i++){
 8002cd4:	782a      	ldrb	r2, [r5, #0]
 8002cd6:	2a00      	cmp	r2, #0
 8002cd8:	d060      	beq.n	8002d9c <sendString+0xd4>
				letter[j] = fonts[(string[i]-'0'+26)*6+j];
 8002cda:	0013      	movs	r3, r2
 8002cdc:	3b16      	subs	r3, #22
 8002cde:	4363      	muls	r3, r4
				letter[j] = fonts[(string[i]-'A')*6+j];
 8002ce0:	0011      	movs	r1, r2
				letter[j] = fonts[(string[i]-'0'+26)*6+j];
 8002ce2:	9301      	str	r3, [sp, #4]
				letter[j] = fonts[(string[i]-'A')*6+j];
 8002ce4:	0023      	movs	r3, r4
 8002ce6:	3941      	subs	r1, #65	; 0x41
 8002ce8:	434b      	muls	r3, r1
			else if(string[i] >= '0' && string[i] <= '9'){
 8002cea:	0010      	movs	r0, r2
				letter[j] = fonts[(string[i]-'A')*6+j];
 8002cec:	9302      	str	r3, [sp, #8]
 8002cee:	2300      	movs	r3, #0
			if (string[i]>='A' && string[i] <= 'Z'){
 8002cf0:	b2c9      	uxtb	r1, r1
			else if(string[i] >= '0' && string[i] <= '9'){
 8002cf2:	3830      	subs	r0, #48	; 0x30
			if (string[i]>='A' && string[i] <= 'Z'){
 8002cf4:	9104      	str	r1, [sp, #16]
			else if(string[i] >= '0' && string[i] <= '9'){
 8002cf6:	b2c1      	uxtb	r1, r0
 8002cf8:	9105      	str	r1, [sp, #20]
			if (string[i]>='A' && string[i] <= 'Z'){
 8002cfa:	9904      	ldr	r1, [sp, #16]
 8002cfc:	2919      	cmp	r1, #25
 8002cfe:	d807      	bhi.n	8002d10 <sendString+0x48>
				letter[j] = fonts[(string[i]-'A')*6+j];
 8002d00:	4927      	ldr	r1, [pc, #156]	; (8002da0 <sendString+0xd8>)
 8002d02:	9802      	ldr	r0, [sp, #8]
				letter[j] = fonts[(string[i]-'0'+26)*6+j];
 8002d04:	1809      	adds	r1, r1, r0
 8002d06:	5cc9      	ldrb	r1, [r1, r3]
			}
			else if(string[i]=='*'){
				letter[j] = fonts[37*6+j];
 8002d08:	a806      	add	r0, sp, #24
 8002d0a:	54c1      	strb	r1, [r0, r3]
			wordSize = (uint16_t)sizeof(letter);
 8002d0c:	0021      	movs	r1, r4
 8002d0e:	e019      	b.n	8002d44 <sendString+0x7c>
			else if(string[i] >= '0' && string[i] <= '9'){
 8002d10:	9905      	ldr	r1, [sp, #20]
 8002d12:	2909      	cmp	r1, #9
 8002d14:	d802      	bhi.n	8002d1c <sendString+0x54>
				letter[j] = fonts[(string[i]-'0'+26)*6+j];
 8002d16:	4922      	ldr	r1, [pc, #136]	; (8002da0 <sendString+0xd8>)
 8002d18:	9801      	ldr	r0, [sp, #4]
 8002d1a:	e7f3      	b.n	8002d04 <sendString+0x3c>
			else if(string[i]=='%'){
 8002d1c:	2a25      	cmp	r2, #37	; 0x25
 8002d1e:	d106      	bne.n	8002d2e <sendString+0x66>
				letter[j] = fonts[36*6+j];
 8002d20:	491f      	ldr	r1, [pc, #124]	; (8002da0 <sendString+0xd8>)
 8002d22:	468c      	mov	ip, r1
 8002d24:	0019      	movs	r1, r3
 8002d26:	31d8      	adds	r1, #216	; 0xd8
				letter[j] = fonts[37*6+j];
 8002d28:	4660      	mov	r0, ip
 8002d2a:	5c41      	ldrb	r1, [r0, r1]
 8002d2c:	e7ec      	b.n	8002d08 <sendString+0x40>
			else if(string[i]==':'){
 8002d2e:	2a3a      	cmp	r2, #58	; 0x3a
 8002d30:	d117      	bne.n	8002d62 <sendString+0x9a>
				letter[j]=fonts[39*6+j];
 8002d32:	491b      	ldr	r1, [pc, #108]	; (8002da0 <sendString+0xd8>)
 8002d34:	468c      	mov	ip, r1
 8002d36:	0019      	movs	r1, r3
 8002d38:	31ea      	adds	r1, #234	; 0xea
				letter[j] = fonts[38*6+j];
 8002d3a:	4660      	mov	r0, ip
 8002d3c:	5c41      	ldrb	r1, [r0, r1]
 8002d3e:	a806      	add	r0, sp, #24
 8002d40:	54c1      	strb	r1, [r0, r3]
				wordSize=2;
 8002d42:	0031      	movs	r1, r6
			}
			letter[j]=letter[j]|header;
 8002d44:	a806      	add	r0, sp, #24
 8002d46:	5c18      	ldrb	r0, [r3, r0]
 8002d48:	9f03      	ldr	r7, [sp, #12]
 8002d4a:	4338      	orrs	r0, r7
 8002d4c:	4684      	mov	ip, r0
 8002d4e:	4667      	mov	r7, ip
 8002d50:	a806      	add	r0, sp, #24
 8002d52:	541f      	strb	r7, [r3, r0]
		for(int j =0; j<6; j++){
 8002d54:	3301      	adds	r3, #1
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d1cf      	bne.n	8002cfa <sendString+0x32>
		}
		sendDATA(letter, wordSize);
 8002d5a:	f7ff ff53 	bl	8002c04 <sendDATA>
 8002d5e:	3501      	adds	r5, #1
 8002d60:	e7b8      	b.n	8002cd4 <sendString+0xc>
			else if(string[i]=='.'){
 8002d62:	2a2e      	cmp	r2, #46	; 0x2e
 8002d64:	d104      	bne.n	8002d70 <sendString+0xa8>
				letter[j]=fonts[39*6+2+j];
 8002d66:	490e      	ldr	r1, [pc, #56]	; (8002da0 <sendString+0xd8>)
 8002d68:	468c      	mov	ip, r1
 8002d6a:	0019      	movs	r1, r3
 8002d6c:	31ec      	adds	r1, #236	; 0xec
 8002d6e:	e7e4      	b.n	8002d3a <sendString+0x72>
			else if(string[i]==' '){
 8002d70:	2a20      	cmp	r2, #32
 8002d72:	d104      	bne.n	8002d7e <sendString+0xb6>
				letter[j] = fonts[38*6+j];
 8002d74:	490a      	ldr	r1, [pc, #40]	; (8002da0 <sendString+0xd8>)
 8002d76:	468c      	mov	ip, r1
 8002d78:	0019      	movs	r1, r3
 8002d7a:	31e4      	adds	r1, #228	; 0xe4
 8002d7c:	e7d4      	b.n	8002d28 <sendString+0x60>
			else if(string[i]=='@'){
 8002d7e:	2a40      	cmp	r2, #64	; 0x40
 8002d80:	d104      	bne.n	8002d8c <sendString+0xc4>
				letter[j] = fonts[38*6+j];
 8002d82:	4907      	ldr	r1, [pc, #28]	; (8002da0 <sendString+0xd8>)
 8002d84:	468c      	mov	ip, r1
 8002d86:	0019      	movs	r1, r3
 8002d88:	31e4      	adds	r1, #228	; 0xe4
 8002d8a:	e7d6      	b.n	8002d3a <sendString+0x72>
			wordSize = (uint16_t)sizeof(letter);
 8002d8c:	0021      	movs	r1, r4
			else if(string[i]=='*'){
 8002d8e:	2a2a      	cmp	r2, #42	; 0x2a
 8002d90:	d1d8      	bne.n	8002d44 <sendString+0x7c>
				letter[j] = fonts[37*6+j];
 8002d92:	4903      	ldr	r1, [pc, #12]	; (8002da0 <sendString+0xd8>)
 8002d94:	468c      	mov	ip, r1
 8002d96:	0019      	movs	r1, r3
 8002d98:	31de      	adds	r1, #222	; 0xde
 8002d9a:	e7c5      	b.n	8002d28 <sendString+0x60>
	}
}
 8002d9c:	b009      	add	sp, #36	; 0x24
 8002d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002da0:	20000465 	.word	0x20000465

08002da4 <setupScreen>:
void setupScreen(){
 8002da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t page[] = {0x22, 0x00,0x00};
 8002da6:	2322      	movs	r3, #34	; 0x22
	uint8_t col[]= {0x21, 0x00, 0x7F};
 8002da8:	2503      	movs	r5, #3
	uint8_t page[] = {0x22, 0x00,0x00};
 8002daa:	2600      	movs	r6, #0
 8002dac:	466a      	mov	r2, sp
	uint8_t col[]= {0x21, 0x00, 0x7F};
 8002dae:	4928      	ldr	r1, [pc, #160]	; (8002e50 <setupScreen+0xac>)
 8002db0:	ac01      	add	r4, sp, #4
	uint8_t page[] = {0x22, 0x00,0x00};
 8002db2:	7013      	strb	r3, [r2, #0]
 8002db4:	7056      	strb	r6, [r2, #1]
 8002db6:	7096      	strb	r6, [r2, #2]
	uint8_t col[]= {0x21, 0x00, 0x7F};
 8002db8:	310a      	adds	r1, #10
 8002dba:	002a      	movs	r2, r5
 8002dbc:	0020      	movs	r0, r4
 8002dbe:	f000 fa7f 	bl	80032c0 <memcpy>
	clearScreen();
 8002dc2:	f7ff ff73 	bl	8002cac <clearScreen>
	sendCMD(page,(uint16_t)sizeof(page));
 8002dc6:	0029      	movs	r1, r5
 8002dc8:	4668      	mov	r0, sp
 8002dca:	f7ff fef9 	bl	8002bc0 <sendCMD>
	sendCMD(col, (uint16_t)sizeof(col));
 8002dce:	0029      	movs	r1, r5
 8002dd0:	0020      	movs	r0, r4
 8002dd2:	f7ff fef5 	bl	8002bc0 <sendCMD>
	sendString(message,0x00);
 8002dd6:	0031      	movs	r1, r6
 8002dd8:	481e      	ldr	r0, [pc, #120]	; (8002e54 <setupScreen+0xb0>)
 8002dda:	f7ff ff75 	bl	8002cc8 <sendString>
	page[1]=0x01;
 8002dde:	2701      	movs	r7, #1
 8002de0:	466b      	mov	r3, sp
 8002de2:	705f      	strb	r7, [r3, #1]
	page[2]=0x01;
 8002de4:	709f      	strb	r7, [r3, #2]
	col[2]=0x7F;
 8002de6:	237f      	movs	r3, #127	; 0x7f
	sendCMD(page,(uint16_t)sizeof(page));
 8002de8:	0029      	movs	r1, r5
 8002dea:	4668      	mov	r0, sp
	col[2]=0x7F;
 8002dec:	70a3      	strb	r3, [r4, #2]
	col[1]=0x00;
 8002dee:	7066      	strb	r6, [r4, #1]
	sendCMD(page,(uint16_t)sizeof(page));
 8002df0:	f7ff fee6 	bl	8002bc0 <sendCMD>
	sendCMD(col, (uint16_t)sizeof(col));
 8002df4:	0029      	movs	r1, r5
 8002df6:	0020      	movs	r0, r4
 8002df8:	f7ff fee2 	bl	8002bc0 <sendCMD>
	sendString(message,0x01);
 8002dfc:	0039      	movs	r1, r7
 8002dfe:	4816      	ldr	r0, [pc, #88]	; (8002e58 <setupScreen+0xb4>)
 8002e00:	f7ff ff62 	bl	8002cc8 <sendString>
	page[1]=0x02;
 8002e04:	466a      	mov	r2, sp
 8002e06:	2302      	movs	r3, #2
	sendCMD(page,(uint16_t)sizeof(page));
 8002e08:	0029      	movs	r1, r5
	page[1]=0x02;
 8002e0a:	7053      	strb	r3, [r2, #1]
	page[2]=0x02;
 8002e0c:	7093      	strb	r3, [r2, #2]
	sendCMD(page,(uint16_t)sizeof(page));
 8002e0e:	4668      	mov	r0, sp
	col[2]=0x7F;
 8002e10:	337d      	adds	r3, #125	; 0x7d
 8002e12:	70a3      	strb	r3, [r4, #2]
	col[1]=0x00;
 8002e14:	7066      	strb	r6, [r4, #1]
	sendCMD(page,(uint16_t)sizeof(page));
 8002e16:	f7ff fed3 	bl	8002bc0 <sendCMD>
	sendCMD(col, (uint16_t)sizeof(col));
 8002e1a:	0029      	movs	r1, r5
 8002e1c:	0020      	movs	r0, r4
 8002e1e:	f7ff fecf 	bl	8002bc0 <sendCMD>
	sendString(message,0x00);
 8002e22:	0031      	movs	r1, r6
 8002e24:	480d      	ldr	r0, [pc, #52]	; (8002e5c <setupScreen+0xb8>)
 8002e26:	f7ff ff4f 	bl	8002cc8 <sendString>
	page[1]=0x03;
 8002e2a:	466b      	mov	r3, sp
 8002e2c:	705d      	strb	r5, [r3, #1]
	page[2]=0x03;
 8002e2e:	709d      	strb	r5, [r3, #2]
	col[2]=0x7F;
 8002e30:	237f      	movs	r3, #127	; 0x7f
	sendCMD(page,(uint16_t)sizeof(page));
 8002e32:	0029      	movs	r1, r5
 8002e34:	4668      	mov	r0, sp
	col[2]=0x7F;
 8002e36:	70a3      	strb	r3, [r4, #2]
	col[1]=0x00;
 8002e38:	7066      	strb	r6, [r4, #1]
	sendCMD(page,(uint16_t)sizeof(page));
 8002e3a:	f7ff fec1 	bl	8002bc0 <sendCMD>
	sendCMD(col, (uint16_t)sizeof(col));
 8002e3e:	0029      	movs	r1, r5
 8002e40:	0020      	movs	r0, r4
 8002e42:	f7ff febd 	bl	8002bc0 <sendCMD>
	sendString(message,0x00);
 8002e46:	0031      	movs	r1, r6
 8002e48:	4805      	ldr	r0, [pc, #20]	; (8002e60 <setupScreen+0xbc>)
 8002e4a:	f7ff ff3d 	bl	8002cc8 <sendString>
}
 8002e4e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002e50:	08003324 	.word	0x08003324
 8002e54:	0800334b 	.word	0x0800334b
 8002e58:	08003361 	.word	0x08003361
 8002e5c:	08003377 	.word	0x08003377
 8002e60:	0800337d 	.word	0x0800337d

08002e64 <updateScreen>:

void updateScreen(char* hr, char* spo2, char* distance, char* user){
 8002e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e66:	001f      	movs	r7, r3

	uint8_t page[] = {0x22, 0x00,0x00};
 8002e68:	2500      	movs	r5, #0
 8002e6a:	2322      	movs	r3, #34	; 0x22
void updateScreen(char* hr, char* spo2, char* distance, char* user){
 8002e6c:	b087      	sub	sp, #28
 8002e6e:	9101      	str	r1, [sp, #4]

	uint8_t col[]= {0x21, 0x00, 0x7F};
 8002e70:	4936      	ldr	r1, [pc, #216]	; (8002f4c <updateScreen+0xe8>)
void updateScreen(char* hr, char* spo2, char* distance, char* user){
 8002e72:	9202      	str	r2, [sp, #8]
	uint8_t col[]= {0x21, 0x00, 0x7F};
 8002e74:	ac05      	add	r4, sp, #20
	uint8_t page[] = {0x22, 0x00,0x00};
 8002e76:	aa04      	add	r2, sp, #16
 8002e78:	7013      	strb	r3, [r2, #0]
 8002e7a:	7055      	strb	r5, [r2, #1]
 8002e7c:	7095      	strb	r5, [r2, #2]
void updateScreen(char* hr, char* spo2, char* distance, char* user){
 8002e7e:	0006      	movs	r6, r0
	uint8_t col[]= {0x21, 0x00, 0x7F};
 8002e80:	2203      	movs	r2, #3
 8002e82:	310a      	adds	r1, #10
 8002e84:	0020      	movs	r0, r4
 8002e86:	f000 fa1b 	bl	80032c0 <memcpy>

	//hr col is 0-18
	//spo2 col is - 33-51
	//distance col is for
	if(user[0]=='1'){
 8002e8a:	783b      	ldrb	r3, [r7, #0]
 8002e8c:	2b31      	cmp	r3, #49	; 0x31
 8002e8e:	d129      	bne.n	8002ee4 <updateScreen+0x80>
		page[1]=0x00;
		page[2]=0x00;
		col[1]=0x00;
		col[2]=0x12;
 8002e90:	3b1f      	subs	r3, #31
		sendCMD(page,(uint16_t)sizeof(page));
 8002e92:	2103      	movs	r1, #3
 8002e94:	a804      	add	r0, sp, #16
		col[2]=0x12;
 8002e96:	70a3      	strb	r3, [r4, #2]
		sendCMD(page,(uint16_t)sizeof(page));
 8002e98:	f7ff fe92 	bl	8002bc0 <sendCMD>
		sendCMD(col, (uint16_t)sizeof(col));
 8002e9c:	2103      	movs	r1, #3
 8002e9e:	0020      	movs	r0, r4
 8002ea0:	f7ff fe8e 	bl	8002bc0 <sendCMD>
		sendString(hr,0x00);
 8002ea4:	0029      	movs	r1, r5
 8002ea6:	0030      	movs	r0, r6
 8002ea8:	f7ff ff0e 	bl	8002cc8 <sendString>
		col[1]=0x21;
 8002eac:	2321      	movs	r3, #33	; 0x21
		col[2]=0x32;
		sendCMD(page,(uint16_t)sizeof(page));
 8002eae:	2103      	movs	r1, #3
		col[1]=0x21;
 8002eb0:	7063      	strb	r3, [r4, #1]
		sendCMD(page,(uint16_t)sizeof(page));
 8002eb2:	a804      	add	r0, sp, #16
		col[2]=0x32;
 8002eb4:	3311      	adds	r3, #17
 8002eb6:	70a3      	strb	r3, [r4, #2]
		sendCMD(page,(uint16_t)sizeof(page));
 8002eb8:	f7ff fe82 	bl	8002bc0 <sendCMD>

		sendCMD(col, (uint16_t)sizeof(col));
 8002ebc:	2103      	movs	r1, #3
 8002ebe:	0020      	movs	r0, r4
 8002ec0:	f7ff fe7e 	bl	8002bc0 <sendCMD>
		sendString(spo2,0x00);
 8002ec4:	0029      	movs	r1, r5
 8002ec6:	9801      	ldr	r0, [sp, #4]
 8002ec8:	f7ff fefe 	bl	8002cc8 <sendString>
		col[1]=0x61;
 8002ecc:	2361      	movs	r3, #97	; 0x61
		col[2]=0x79;
		sendCMD(col, (uint16_t)sizeof(col));
 8002ece:	2103      	movs	r1, #3
		col[1]=0x61;
 8002ed0:	7063      	strb	r3, [r4, #1]
		sendCMD(col, (uint16_t)sizeof(col));
 8002ed2:	0020      	movs	r0, r4
		col[2]=0x79;
 8002ed4:	3318      	adds	r3, #24
 8002ed6:	70a3      	strb	r3, [r4, #2]
		sendCMD(col, (uint16_t)sizeof(col));
 8002ed8:	f7ff fe72 	bl	8002bc0 <sendCMD>
		sendString(distance,0x00);
 8002edc:	0029      	movs	r1, r5
 8002ede:	9802      	ldr	r0, [sp, #8]
 8002ee0:	f7ff fef2 	bl	8002cc8 <sendString>


	}
	if(user[0]=='2'){
 8002ee4:	783b      	ldrb	r3, [r7, #0]
 8002ee6:	9303      	str	r3, [sp, #12]
 8002ee8:	2b32      	cmp	r3, #50	; 0x32
 8002eea:	d12c      	bne.n	8002f46 <updateScreen+0xe2>

		page[1]=0x03;
 8002eec:	2503      	movs	r5, #3
 8002eee:	ab04      	add	r3, sp, #16
		page[2]=0x03;
		col[1]=0x00;
 8002ef0:	2700      	movs	r7, #0
		page[1]=0x03;
 8002ef2:	705d      	strb	r5, [r3, #1]
		page[2]=0x03;
 8002ef4:	709d      	strb	r5, [r3, #2]
		col[2]=0x12;
 8002ef6:	2312      	movs	r3, #18
		sendCMD(page,(uint16_t)sizeof(page));
 8002ef8:	0029      	movs	r1, r5
 8002efa:	a804      	add	r0, sp, #16
		col[2]=0x12;
 8002efc:	70a3      	strb	r3, [r4, #2]
		col[1]=0x00;
 8002efe:	7067      	strb	r7, [r4, #1]
		sendCMD(page,(uint16_t)sizeof(page));
 8002f00:	f7ff fe5e 	bl	8002bc0 <sendCMD>
		sendCMD(col, (uint16_t)sizeof(col));
 8002f04:	0029      	movs	r1, r5
 8002f06:	0020      	movs	r0, r4
 8002f08:	f7ff fe5a 	bl	8002bc0 <sendCMD>
		sendString(hr,0x00);
 8002f0c:	0039      	movs	r1, r7
 8002f0e:	0030      	movs	r0, r6
 8002f10:	f7ff feda 	bl	8002cc8 <sendString>
		col[1]=0x21;
 8002f14:	2321      	movs	r3, #33	; 0x21
 8002f16:	7063      	strb	r3, [r4, #1]
		col[2]=0x32;
 8002f18:	466b      	mov	r3, sp
 8002f1a:	7b1b      	ldrb	r3, [r3, #12]
		sendCMD(col, (uint16_t)sizeof(col));
 8002f1c:	0029      	movs	r1, r5
 8002f1e:	0020      	movs	r0, r4
		col[2]=0x32;
 8002f20:	70a3      	strb	r3, [r4, #2]
		sendCMD(col, (uint16_t)sizeof(col));
 8002f22:	f7ff fe4d 	bl	8002bc0 <sendCMD>
		sendString(spo2,0x00);
 8002f26:	0039      	movs	r1, r7
 8002f28:	9801      	ldr	r0, [sp, #4]
 8002f2a:	f7ff fecd 	bl	8002cc8 <sendString>
		col[1]=0x41;
 8002f2e:	2341      	movs	r3, #65	; 0x41
		col[2]=0x59;
		sendCMD(col, (uint16_t)sizeof(col));
 8002f30:	0029      	movs	r1, r5
		col[1]=0x41;
 8002f32:	7063      	strb	r3, [r4, #1]
		sendCMD(col, (uint16_t)sizeof(col));
 8002f34:	0020      	movs	r0, r4
		col[2]=0x59;
 8002f36:	3318      	adds	r3, #24
 8002f38:	70a3      	strb	r3, [r4, #2]
		sendCMD(col, (uint16_t)sizeof(col));
 8002f3a:	f7ff fe41 	bl	8002bc0 <sendCMD>
		sendString(distance,0x00);
 8002f3e:	0039      	movs	r1, r7
 8002f40:	9802      	ldr	r0, [sp, #8]
 8002f42:	f7ff fec1 	bl	8002cc8 <sendString>
	}
}
 8002f46:	b007      	add	sp, #28
 8002f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	08003324 	.word	0x08003324

08002f50 <testScreen>:


void testScreen()
{
 8002f50:	b570      	push	{r4, r5, r6, lr}

	if(isSelfSetup)
 8002f52:	4c1c      	ldr	r4, [pc, #112]	; (8002fc4 <testScreen+0x74>)
 8002f54:	7823      	ldrb	r3, [r4, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <testScreen+0x12>
		  		  {
		  			  setupScreen();
 8002f5a:	f7ff ff23 	bl	8002da4 <setupScreen>
		  			  isSelfSetup = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	7023      	strb	r3, [r4, #0]

		  		  }

		  		  if(hr[2]=='9'){
 8002f62:	4c19      	ldr	r4, [pc, #100]	; (8002fc8 <testScreen+0x78>)
 8002f64:	78a3      	ldrb	r3, [r4, #2]
 8002f66:	2b39      	cmp	r3, #57	; 0x39
 8002f68:	d129      	bne.n	8002fbe <testScreen+0x6e>
		  			  if(hr[1]=='9'){
 8002f6a:	7863      	ldrb	r3, [r4, #1]
 8002f6c:	2b39      	cmp	r3, #57	; 0x39
 8002f6e:	d123      	bne.n	8002fb8 <testScreen+0x68>
		  				  if (hr[0]=='9'){
 8002f70:	7823      	ldrb	r3, [r4, #0]
 8002f72:	2230      	movs	r2, #48	; 0x30
 8002f74:	2b39      	cmp	r3, #57	; 0x39
 8002f76:	d11c      	bne.n	8002fb2 <testScreen+0x62>
		  					  hr[0]='0';
 8002f78:	7022      	strb	r2, [r4, #0]
		  				  }
		  				  else{
		  					  hr[0]=hr[0]+1;
		  				  }
		  				  hr[1]='0';
 8002f7a:	7062      	strb	r2, [r4, #1]
		  			  }
		  			  else{
		  				  hr[1]=hr[1]+1;
		  			  }
		  			  hr[2]='0';
 8002f7c:	2330      	movs	r3, #48	; 0x30
		  		  }
		  		  else{
		  			  hr[2]=hr[2]+1;
		  		  }

		  		  distance[1]=hr[0];
 8002f7e:	4d13      	ldr	r5, [pc, #76]	; (8002fcc <testScreen+0x7c>)
		  			  hr[2]=hr[2]+1;
 8002f80:	70a3      	strb	r3, [r4, #2]
		  		  distance[1]=hr[0];
 8002f82:	7823      	ldrb	r3, [r4, #0]
		  		  distance[2]=hr[1];
		  		  distance[3]=hr[2];
		  		  user[0]='1';
 8002f84:	4e12      	ldr	r6, [pc, #72]	; (8002fd0 <testScreen+0x80>)
		  		  distance[1]=hr[0];
 8002f86:	706b      	strb	r3, [r5, #1]
		  		  distance[2]=hr[1];
 8002f88:	7863      	ldrb	r3, [r4, #1]
		  		  updateScreen(hr, hr, hr, user);
 8002f8a:	0022      	movs	r2, r4
		  		  distance[2]=hr[1];
 8002f8c:	70ab      	strb	r3, [r5, #2]
		  		  distance[3]=hr[2];
 8002f8e:	78a3      	ldrb	r3, [r4, #2]
		  		  updateScreen(hr, hr, hr, user);
 8002f90:	0021      	movs	r1, r4
		  		  distance[3]=hr[2];
 8002f92:	70eb      	strb	r3, [r5, #3]
		  		  user[0]='1';
 8002f94:	2331      	movs	r3, #49	; 0x31
		  		  updateScreen(hr, hr, hr, user);
 8002f96:	0020      	movs	r0, r4
		  		  user[0]='1';
 8002f98:	7033      	strb	r3, [r6, #0]
		  		  updateScreen(hr, hr, hr, user);
 8002f9a:	0033      	movs	r3, r6
 8002f9c:	f7ff ff62 	bl	8002e64 <updateScreen>
		  		  user[0]='2';
 8002fa0:	2332      	movs	r3, #50	; 0x32
		  		  updateScreen(hr, hr, distance, user);
 8002fa2:	002a      	movs	r2, r5
		  		  user[0]='2';
 8002fa4:	7033      	strb	r3, [r6, #0]
		  		  updateScreen(hr, hr, distance, user);
 8002fa6:	0021      	movs	r1, r4
 8002fa8:	0033      	movs	r3, r6
 8002faa:	0020      	movs	r0, r4
 8002fac:	f7ff ff5a 	bl	8002e64 <updateScreen>

}
 8002fb0:	bd70      	pop	{r4, r5, r6, pc}
		  					  hr[0]=hr[0]+1;
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	7023      	strb	r3, [r4, #0]
 8002fb6:	e7e0      	b.n	8002f7a <testScreen+0x2a>
		  				  hr[1]=hr[1]+1;
 8002fb8:	3301      	adds	r3, #1
 8002fba:	7063      	strb	r3, [r4, #1]
 8002fbc:	e7de      	b.n	8002f7c <testScreen+0x2c>
		  			  hr[2]=hr[2]+1;
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	e7dd      	b.n	8002f7e <testScreen+0x2e>
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	20000557 	.word	0x20000557
 8002fc8:	20000553 	.word	0x20000553
 8002fcc:	20000460 	.word	0x20000460
 8002fd0:	20000558 	.word	0x20000558

08002fd4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_MspInit+0x18>)
 8002fd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fde:	2280      	movs	r2, #128	; 0x80
 8002fe0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002fe2:	0552      	lsls	r2, r2, #21
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fe8:	4770      	bx	lr
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	40021000 	.word	0x40021000

08002ff0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ff0:	b510      	push	{r4, lr}
 8002ff2:	0004      	movs	r4, r0
 8002ff4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff6:	2214      	movs	r2, #20
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	a801      	add	r0, sp, #4
 8002ffc:	f000 f969 	bl	80032d2 <memset>
  if(hi2c->Instance==I2C1)
 8003000:	4b10      	ldr	r3, [pc, #64]	; (8003044 <HAL_I2C_MspInit+0x54>)
 8003002:	6822      	ldr	r2, [r4, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d11a      	bne.n	800303e <HAL_I2C_MspInit+0x4e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003008:	2102      	movs	r1, #2
 800300a:	4c0f      	ldr	r4, [pc, #60]	; (8003048 <HAL_I2C_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800300c:	480f      	ldr	r0, [pc, #60]	; (800304c <HAL_I2C_MspInit+0x5c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800300e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003010:	430a      	orrs	r2, r1
 8003012:	62e2      	str	r2, [r4, #44]	; 0x2c
 8003014:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003016:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003018:	400b      	ands	r3, r1
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800301e:	23c0      	movs	r3, #192	; 0xc0
 8003020:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003022:	3bae      	subs	r3, #174	; 0xae
 8003024:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003026:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003028:	3b11      	subs	r3, #17
 800302a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800302c:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800302e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003030:	f7fd fad8 	bl	80005e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003034:	2380      	movs	r3, #128	; 0x80
 8003036:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003038:	039b      	lsls	r3, r3, #14
 800303a:	4313      	orrs	r3, r2
 800303c:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800303e:	b006      	add	sp, #24
 8003040:	bd10      	pop	{r4, pc}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	40005400 	.word	0x40005400
 8003048:	40021000 	.word	0x40021000
 800304c:	50000400 	.word	0x50000400

08003050 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003050:	b510      	push	{r4, lr}
 8003052:	0004      	movs	r4, r0
 8003054:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003056:	2214      	movs	r2, #20
 8003058:	2100      	movs	r1, #0
 800305a:	a803      	add	r0, sp, #12
 800305c:	f000 f939 	bl	80032d2 <memset>
  if(hspi->Instance==SPI1)
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	4a1c      	ldr	r2, [pc, #112]	; (80030d4 <HAL_SPI_MspInit+0x84>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d11a      	bne.n	800309e <HAL_SPI_MspInit+0x4e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003068:	2280      	movs	r2, #128	; 0x80
 800306a:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_SPI_MspInit+0x88>)
 800306c:	0152      	lsls	r2, r2, #5
 800306e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003070:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003072:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003074:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003076:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800307a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800307c:	430a      	orrs	r2, r1
 800307e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	400b      	ands	r3, r1
 8003084:	9301      	str	r3, [sp, #4]
 8003086:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003088:	23e0      	movs	r3, #224	; 0xe0
 800308a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308c:	3bde      	subs	r3, #222	; 0xde
 800308e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003090:	185b      	adds	r3, r3, r1
 8003092:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003094:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003096:	f7fd faa5 	bl	80005e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800309a:	b008      	add	sp, #32
 800309c:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 800309e:	4a0f      	ldr	r2, [pc, #60]	; (80030dc <HAL_SPI_MspInit+0x8c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d1fa      	bne.n	800309a <HAL_SPI_MspInit+0x4a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80030a4:	2280      	movs	r2, #128	; 0x80
 80030a6:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <HAL_SPI_MspInit+0x88>)
 80030a8:	01d2      	lsls	r2, r2, #7
 80030aa:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ac:	480c      	ldr	r0, [pc, #48]	; (80030e0 <HAL_SPI_MspInit+0x90>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80030ae:	430a      	orrs	r2, r1
 80030b0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b2:	2202      	movs	r2, #2
 80030b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030b6:	4311      	orrs	r1, r2
 80030b8:	62d9      	str	r1, [r3, #44]	; 0x2c
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030bc:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030be:	4013      	ands	r3, r2
 80030c0:	9302      	str	r3, [sp, #8]
 80030c2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80030c4:	23a0      	movs	r3, #160	; 0xa0
 80030c6:	021b      	lsls	r3, r3, #8
 80030c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ca:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030cc:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ce:	9306      	str	r3, [sp, #24]
 80030d0:	e7e1      	b.n	8003096 <HAL_SPI_MspInit+0x46>
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	40013000 	.word	0x40013000
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40003800 	.word	0x40003800
 80030e0:	50000400 	.word	0x50000400

080030e4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80030e4:	2380      	movs	r3, #128	; 0x80
 80030e6:	6802      	ldr	r2, [r0, #0]
{
 80030e8:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM2)
 80030ea:	05db      	lsls	r3, r3, #23
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d10c      	bne.n	800310a <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030f0:	2301      	movs	r3, #1
 80030f2:	4a06      	ldr	r2, [pc, #24]	; (800310c <HAL_TIM_Base_MspInit+0x28>)
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80030f4:	200f      	movs	r0, #15
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030f6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80030f8:	430b      	orrs	r3, r1
 80030fa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80030fc:	2200      	movs	r2, #0
 80030fe:	0011      	movs	r1, r2
 8003100:	f7fd f9f6 	bl	80004f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003104:	200f      	movs	r0, #15
 8003106:	f7fd fa23 	bl	8000550 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800310a:	bd10      	pop	{r4, pc}
 800310c:	40021000 	.word	0x40021000

08003110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003110:	b510      	push	{r4, lr}
 8003112:	0004      	movs	r4, r0
 8003114:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003116:	2214      	movs	r2, #20
 8003118:	2100      	movs	r1, #0
 800311a:	a801      	add	r0, sp, #4
 800311c:	f000 f8d9 	bl	80032d2 <memset>
  if(huart->Instance==USART1)
 8003120:	4b14      	ldr	r3, [pc, #80]	; (8003174 <HAL_UART_MspInit+0x64>)
 8003122:	6822      	ldr	r2, [r4, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d123      	bne.n	8003170 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003128:	2280      	movs	r2, #128	; 0x80
 800312a:	4b13      	ldr	r3, [pc, #76]	; (8003178 <HAL_UART_MspInit+0x68>)
 800312c:	01d2      	lsls	r2, r2, #7
 800312e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003130:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 8003132:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003134:	2101      	movs	r1, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 8003136:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313c:	430a      	orrs	r2, r1
 800313e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	400b      	ands	r3, r1
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003148:	23c0      	movs	r3, #192	; 0xc0
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314e:	2302      	movs	r3, #2
 8003150:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003152:	185b      	adds	r3, r3, r1
 8003154:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003156:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003158:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800315a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315c:	f7fd fa42 	bl	80005e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003160:	2200      	movs	r2, #0
 8003162:	201b      	movs	r0, #27
 8003164:	0011      	movs	r1, r2
 8003166:	f7fd f9c3 	bl	80004f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800316a:	201b      	movs	r0, #27
 800316c:	f7fd f9f0 	bl	8000550 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003170:	b006      	add	sp, #24
 8003172:	bd10      	pop	{r4, pc}
 8003174:	40013800 	.word	0x40013800
 8003178:	40021000 	.word	0x40021000

0800317c <NMI_Handler>:
 800317c:	4770      	bx	lr

0800317e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800317e:	e7fe      	b.n	800317e <HardFault_Handler>

08003180 <SVC_Handler>:
 8003180:	4770      	bx	lr

08003182 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003182:	4770      	bx	lr

08003184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003184:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003186:	f7fd f995 	bl	80004b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800318a:	bd10      	pop	{r4, pc}

0800318c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800318c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800318e:	2001      	movs	r0, #1
 8003190:	f7fd fae4 	bl	800075c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003194:	2002      	movs	r0, #2
 8003196:	f7fd fae1 	bl	800075c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800319a:	bd10      	pop	{r4, pc}

0800319c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800319c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800319e:	4802      	ldr	r0, [pc, #8]	; (80031a8 <TIM2_IRQHandler+0xc>)
 80031a0:	f7fe fc13 	bl	80019ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80031a4:	bd10      	pop	{r4, pc}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	200008bc 	.word	0x200008bc

080031ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80031ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031ae:	4802      	ldr	r0, [pc, #8]	; (80031b8 <USART1_IRQHandler+0xc>)
 80031b0:	f7fe fd88 	bl	8001cc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031b4:	bd10      	pop	{r4, pc}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	2000077c 	.word	0x2000077c

080031bc <EXTI4_15_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI4_15_IRQHandler(void)
{
	HAL_GPIO_EXTI_IRQHandler(HR_MFIO_Pin);
 80031bc:	2080      	movs	r0, #128	; 0x80
{
 80031be:	b510      	push	{r4, lr}
	HAL_GPIO_EXTI_IRQHandler(HR_MFIO_Pin);
 80031c0:	0200      	lsls	r0, r0, #8
 80031c2:	f7fd facb 	bl	800075c <HAL_GPIO_EXTI_IRQHandler>
}
 80031c6:	bd10      	pop	{r4, pc}

080031c8 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80031c8:	2280      	movs	r2, #128	; 0x80
 80031ca:	4b10      	ldr	r3, [pc, #64]	; (800320c <SystemInit+0x44>)
 80031cc:	0052      	lsls	r2, r2, #1
 80031ce:	6819      	ldr	r1, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	490e      	ldr	r1, [pc, #56]	; (8003210 <SystemInit+0x48>)
 80031d8:	400a      	ands	r2, r1
 80031da:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	490d      	ldr	r1, [pc, #52]	; (8003214 <SystemInit+0x4c>)
 80031e0:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80031e2:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80031e4:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	438a      	bics	r2, r1
 80031ea:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	490a      	ldr	r1, [pc, #40]	; (8003218 <SystemInit+0x50>)
 80031f0:	400a      	ands	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	4909      	ldr	r1, [pc, #36]	; (800321c <SystemInit+0x54>)
 80031f8:	400a      	ands	r2, r1
 80031fa:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80031fc:	2200      	movs	r2, #0
 80031fe:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003200:	2280      	movs	r2, #128	; 0x80
 8003202:	4b07      	ldr	r3, [pc, #28]	; (8003220 <SystemInit+0x58>)
 8003204:	0512      	lsls	r2, r2, #20
 8003206:	609a      	str	r2, [r3, #8]
#endif
}
 8003208:	4770      	bx	lr
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	40021000 	.word	0x40021000
 8003210:	88ff400c 	.word	0x88ff400c
 8003214:	fef6fff6 	.word	0xfef6fff6
 8003218:	fffbffff 	.word	0xfffbffff
 800321c:	ff02ffff 	.word	0xff02ffff
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003224:	480d      	ldr	r0, [pc, #52]	; (800325c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003226:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003228:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800322a:	e003      	b.n	8003234 <LoopCopyDataInit>

0800322c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800322c:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800322e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003230:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003232:	3104      	adds	r1, #4

08003234 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003234:	480b      	ldr	r0, [pc, #44]	; (8003264 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003236:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003238:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800323a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800323c:	d3f6      	bcc.n	800322c <CopyDataInit>
  ldr  r2, =_sbss
 800323e:	4a0b      	ldr	r2, [pc, #44]	; (800326c <LoopForever+0x12>)
  b  LoopFillZerobss
 8003240:	e002      	b.n	8003248 <LoopFillZerobss>

08003242 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003242:	2300      	movs	r3, #0
  str  r3, [r2]
 8003244:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003246:	3204      	adds	r2, #4

08003248 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003248:	4b09      	ldr	r3, [pc, #36]	; (8003270 <LoopForever+0x16>)
  cmp  r2, r3
 800324a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800324c:	d3f9      	bcc.n	8003242 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800324e:	f7ff ffbb 	bl	80031c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003252:	f000 f811 	bl	8003278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003256:	f7ff fadd 	bl	8002814 <main>

0800325a <LoopForever>:

LoopForever:
    b LoopForever
 800325a:	e7fe      	b.n	800325a <LoopForever>
  ldr   r0, =_estack
 800325c:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8003260:	080033c8 	.word	0x080033c8
  ldr  r0, =_sdata
 8003264:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003268:	20000560 	.word	0x20000560
  ldr  r2, =_sbss
 800326c:	20000560 	.word	0x20000560
  ldr  r3, = _ebss
 8003270:	200008fc 	.word	0x200008fc

08003274 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003274:	e7fe      	b.n	8003274 <ADC1_COMP_IRQHandler>
	...

08003278 <__libc_init_array>:
 8003278:	b570      	push	{r4, r5, r6, lr}
 800327a:	2600      	movs	r6, #0
 800327c:	4d0c      	ldr	r5, [pc, #48]	; (80032b0 <__libc_init_array+0x38>)
 800327e:	4c0d      	ldr	r4, [pc, #52]	; (80032b4 <__libc_init_array+0x3c>)
 8003280:	1b64      	subs	r4, r4, r5
 8003282:	10a4      	asrs	r4, r4, #2
 8003284:	42a6      	cmp	r6, r4
 8003286:	d109      	bne.n	800329c <__libc_init_array+0x24>
 8003288:	2600      	movs	r6, #0
 800328a:	f000 f83f 	bl	800330c <_init>
 800328e:	4d0a      	ldr	r5, [pc, #40]	; (80032b8 <__libc_init_array+0x40>)
 8003290:	4c0a      	ldr	r4, [pc, #40]	; (80032bc <__libc_init_array+0x44>)
 8003292:	1b64      	subs	r4, r4, r5
 8003294:	10a4      	asrs	r4, r4, #2
 8003296:	42a6      	cmp	r6, r4
 8003298:	d105      	bne.n	80032a6 <__libc_init_array+0x2e>
 800329a:	bd70      	pop	{r4, r5, r6, pc}
 800329c:	00b3      	lsls	r3, r6, #2
 800329e:	58eb      	ldr	r3, [r5, r3]
 80032a0:	4798      	blx	r3
 80032a2:	3601      	adds	r6, #1
 80032a4:	e7ee      	b.n	8003284 <__libc_init_array+0xc>
 80032a6:	00b3      	lsls	r3, r6, #2
 80032a8:	58eb      	ldr	r3, [r5, r3]
 80032aa:	4798      	blx	r3
 80032ac:	3601      	adds	r6, #1
 80032ae:	e7f2      	b.n	8003296 <__libc_init_array+0x1e>
 80032b0:	080033c0 	.word	0x080033c0
 80032b4:	080033c0 	.word	0x080033c0
 80032b8:	080033c0 	.word	0x080033c0
 80032bc:	080033c4 	.word	0x080033c4

080032c0 <memcpy>:
 80032c0:	2300      	movs	r3, #0
 80032c2:	b510      	push	{r4, lr}
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d100      	bne.n	80032ca <memcpy+0xa>
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	5ccc      	ldrb	r4, [r1, r3]
 80032cc:	54c4      	strb	r4, [r0, r3]
 80032ce:	3301      	adds	r3, #1
 80032d0:	e7f8      	b.n	80032c4 <memcpy+0x4>

080032d2 <memset>:
 80032d2:	0003      	movs	r3, r0
 80032d4:	1882      	adds	r2, r0, r2
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d100      	bne.n	80032dc <memset+0xa>
 80032da:	4770      	bx	lr
 80032dc:	7019      	strb	r1, [r3, #0]
 80032de:	3301      	adds	r3, #1
 80032e0:	e7f9      	b.n	80032d6 <memset+0x4>

080032e2 <strcat>:
 80032e2:	0002      	movs	r2, r0
 80032e4:	b510      	push	{r4, lr}
 80032e6:	7813      	ldrb	r3, [r2, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d105      	bne.n	80032f8 <strcat+0x16>
 80032ec:	5ccc      	ldrb	r4, [r1, r3]
 80032ee:	54d4      	strb	r4, [r2, r3]
 80032f0:	3301      	adds	r3, #1
 80032f2:	2c00      	cmp	r4, #0
 80032f4:	d1fa      	bne.n	80032ec <strcat+0xa>
 80032f6:	bd10      	pop	{r4, pc}
 80032f8:	3201      	adds	r2, #1
 80032fa:	e7f4      	b.n	80032e6 <strcat+0x4>

080032fc <strcpy>:
 80032fc:	1c03      	adds	r3, r0, #0
 80032fe:	780a      	ldrb	r2, [r1, #0]
 8003300:	3101      	adds	r1, #1
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	3301      	adds	r3, #1
 8003306:	2a00      	cmp	r2, #0
 8003308:	d1f9      	bne.n	80032fe <strcpy+0x2>
 800330a:	4770      	bx	lr

0800330c <_init>:
 800330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003312:	bc08      	pop	{r3}
 8003314:	469e      	mov	lr, r3
 8003316:	4770      	bx	lr

08003318 <_fini>:
 8003318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331e:	bc08      	pop	{r3}
 8003320:	469e      	mov	lr, r3
 8003322:	4770      	bx	lr
